[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "\u003d One Life"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "https://travis-ci.org/CS2103-AY1819S1-W16-3/main[image:https://travis-ci.org/CS2103-AY1819S1-W16-3/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "https://ci.appveyor.com/project/nelvintan/main[image:https://ci.appveyor.com/api/projects/status/c2o87jmgyqvj8n9i/branch/master?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S1-W16-3/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103-AY1819S1-W16-3/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "* This is a desktop Address Book application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "* It is an application intended for medical professionals to accelerate their working processes."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "* Features include:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "** Quick and User-Friendly Patient \u0026 Doctor Management"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "*** Add/Edit/Delete a person\u0027s details"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "*** Instantly locate a person in the Database"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "** High Resistance to User Error"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "*** Undo/Redo Actions for all data modification commands"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "*** Display chronological history of user actions"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "* https://github.com/CS2103-AY1819S1-W16-3/main/blob/master/docs/UserGuide.adoc[User Guide]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "* https://github.com/CS2103-AY1819S1-W16-3/main/blob/master/docs/DeveloperGuide.adoc[Developer Guide]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "* https://github.com/CS2103-AY1819S1-W16-3/main/blob/master/docs/AboutUs.adoc[About Us]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "* https://github.com/CS2103-AY1819S1-W16-3/main/blob/master/docs/ContactUs.adoc[Contact Us]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "* Based off the AddressBook-Level4 project created by SE-EDU initiative at https://github.com/se-edu/."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 16,
      "guestuser0123": 3,
      "-": 21
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "  ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \"githubId\": \"GaryGohYP\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \"displayName\": \"GARY ...IPENG\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \"authorNames\": [\"GaryGohYP\", \"DESKTOP-1NRGIML\\\\user\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \"githubId\": \"guestuser0123\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \"displayName\": \"KENNE... TECK\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \"authorNames\": [\"guestuser0123\", \"DESKTOP-DAUN7QD\", \"DESKTOP-DAUN7QD\\\\Kenneth\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \"githubId\": \"ngkangtze\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \"displayName\": \"NG KA...G TZE\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "      \"authorNames\": [\"ngkangtze\", \"Kang Tze\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \"githubId\": \"nelvintan\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \"displayName\": \"TAN T...ELVIN\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \"authorNames\": [\"nelvintan\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    },"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \"githubId\": \"tristonpang\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \"displayName\": \"TRIST... SYEN\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \"authorNames\": [\"tristonpang\", \"TRISTON-XPS15\\\\lawll\"]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 1,
      "guestuser0123": 29
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        \u0027site-name\u0027: \u0027One Life\u0027,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/CS2103-AY1819S1-W16-3/main\u0027,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "task copyDummySearchPage(type: Copy) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    from \u0027docs/DummySearchPage.html\u0027"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${buildDir}/docs/html5\""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 2,
      "-": 244
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "One Life was developed by the"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "https://github.com/CS2103-AY1819S1-W16-3[W16-3] team. +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u003d\u003d\u003d Joanne Ong"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "image::joanneong.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "{empty}[https://github.com/joanneong[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Role: Supervisor"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u003d\u003d\u003d Tan Thong Cai Nelvin"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "image::nelvintan.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "{empty}[https://github.com/nelvintan[github]] [\u003c\u003cnelvintan#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Responsibilities: Deliverables \u0026 deadlines, Scheduling \u0026 tracking"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u003d\u003d\u003d Triston Pang Erh Syen"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "image::tristonpang.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "{empty}[https://github.com/tristonpang[github]] [\u003c\u003ctristonpang#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Responsibilities: Integration"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u003d\u003d\u003d Ng Kang Tze"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "image::ngkangtze.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "{empty}[https://github.com/ngkangtze[github]] [\u003c\u003cngkangtze#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Responsibilities: Code Quality, JavaFX expert"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u003d\u003d\u003d Gary Goh Yi Peng"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "image::garygohyp.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "{empty}[https://github.com/garygohyp[github]] [\u003c\u003cgarygohyp#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Responsibilities: Documentation"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u003d\u003d\u003d Kenneth Goh Jun Teck"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "image::guestuser0123.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "{empty}[https://github.com/guestuser0123[github]] [\u003c\u003cguestuser0123#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Responsibilities: Testing"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 9,
      "guestuser0123": 2,
      "GaryGohYP": 1,
      "-": 34,
      "nelvintan": 19
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2103-AY1819S1-W16-3/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "* *Email us* : You can also reach us at"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "** Nelvin: `nelvintan [at] u.nus.edu`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "** Triston: `triston.pang [at] u.nus.edu`"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "** Kang Tze: `e0175352 [at] u.nus.edu`"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "** Gary: `e0148664 [at] u.nus.edu`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "** Kenneth: `e0202061 [at] u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 7,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d One Life - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-W16-3/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "By: `Team W16-3`      Since: `Sep 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d Setting Up"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Listed below are the prerequites:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "** *JDK `9`* or later"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "** *IntelliJ* IDE"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Listed below are the steps to set up the project:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ". Fork this repo, and clone the fork to your computer."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ". Open IntelliJ. (If you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first.)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ". Set up the correct JDK version for Gradle."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ".. Click `New...` and find the directory of the JDK."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ". Click `Import Project`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ". Click `Open as Project`."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ". Click `OK` to accept the default settings."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson.java`] and link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ". Repeat this for the test folder as well. (E.g. check link:{repoURL}/src/test/java/seedu/address/commons/util/XmlUtilTest.java[`XmlUtilTest.java`] and link:{repoURL}/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way.)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Listed below are the steps to verify the setup:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify, follow these steps:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ". Click on the `Imports` tab to set the order."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* For `Import Layout`: Change the import order to `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms. (Travis is Unix-based and AppVeyor is Windows-based.)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Listed below are some things to try when you are ready to start coding:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "** Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "** Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "The *_Architecture Diagram_* given below explains the high-level design of the App."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Given below is a quick overview of each component."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* At app launch: Initializing the components in the correct sequence, and connecting them up with each other."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* At shut down: Shutting down the components and invoking cleanup method where necessary."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events. (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* `LogsCenter` : This class is used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ".Component Interactions for `delete 1` Command (Part 1)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ".Component Interactions for `delete 1` Command (Part 2)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Given below is the structure of the UI component."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ".Structure of the `UI` Component"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "As shown in the figure above, the UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Shown below is the structure of the `Logic` component."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "As shown in the figure above, `Logic` uses the `AddressBookParser` class to parse the user command. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "The command execution can affect the `Model` (e.g. adding a person) and/or raise events."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Shown below is the structure of the `Model` component."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "As shown by the figure above, the `Model`,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Shown below is the structure of the `Storage` component."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "As shown by the figure above, the `Storage` component,"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in xml format and read it back."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "This section describes the pros and cons of the current and other alternate implementations of undo \u0026 redo."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* **Alternative 1 (current choice):** Save the entire address book."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* **Alternative 2:** Use individual commands to undo/redo by itself."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "** Cons: Must ensure that the implementations of individual commands are correct."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "// tag::schedulecommand[]"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d Schedule command feature"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "The scheduling appointment mechanism is facilitated by `ScheduleCommandParser`, `ScheduleCommand`, `Appointment` and `AppointmentManager`."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "`ScheduleCommand` extends from `Command` and `ScheduleCommandParser` implements `Parser`."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "The key operation implemented is `ScheduleCommand#execute`."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Given below is an example usage scenario and how the schedule command mechanism behaves at each step."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Step 1. The user wants to schedule an appointment. User proceeds to fill in the details behind the respective prefixes."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "For example: `schedule 1 d/23.11.2018 st/1300 et/1400 dn/Jack di/S1234567B pn/John Doe pi/S1234567A`"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Step 2. The user executes the `ScheduleCommand` which calls the `ScheduleCommandParser`."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "`ScheduleCommandParser` will parse the inputs and return a `ScheduleCommand`."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Step 3. `ScheduleCommand` then executes."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "`ScheduleCommand` then conducts various checks sequentially to ensure that the appointment scheduled is valid."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "If it is invalid, an exception message will be thrown."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "The `Appointment` will not be scheduled."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "The order of checks conducted is displayed in the image below."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "image::AppointmentCheckingFlow.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Step 4. A successful check gives 2 objects, `personToEdit` and `Appointment` object."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Program creates another `Person` object called `editedPerson` that is equal to `personToEdit`."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "`ScheduleCommand` then adds `Appointment` to the `appointmentList` of `editedPerson`."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Lastly, `ScheduleCommand` replaces `personToEdit` with `editedPerson` in our model."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "This is shown in the diagram below."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "image::ScheduleCommandStep4.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "The above procedure in step 4 is then repeated for the other person (e.g. the other person is a doctor if the specified person is a patient) involved in the scheduling process."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Step 5. `XmlAdaptedPerson` updates storage of `appointmentList`."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "The following sequence diagram shows how the schedule appointment operation works:"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ".Sequence diagram for scheduling appointments"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "image::ScheduleSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "This section describes the pros and cons of the current and other alternate implementations of schedule."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Command for schedule command"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* **Alternative 1 (current choice):** Take in the inputs for schedule appointment command using one prefix for each detail."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "For example: `schedule 1 d/23.11.2018 st/1300 et/1400 dn/Jack di/S1234567B pn/John Doe pi/S1234567A`"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "** Pros: The design is consistent with the other commands in the application."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "** Cons: It requires the user to type more when scheduling an appointment."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* **Alternative 2:** Use a comma-separated long string in the command prompt to schedule an appointment."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "For example: `schedule 1 s/23.11.2018,1300,1400,Jack,S1234567B,John Doe,S1234567A`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "** Pros: The user has to type less when scheduling a command."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "The user is not required to type all the prefixes, he just has to type one prefix, `s/`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "** Cons: The design would not be consistent with the other commands."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "This might confuse the user."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Sorting of appointments"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* **Alternative 1 (current choice):** Do not sort the appointments in the ArrayList of appointments."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "A new appointment is added to the back of the ArrayList."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "** Pros: It is simple to check for appointment clashes."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "To check for appointment clashes, just loop through the ArrayList and check the new appointment against every other appointment."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "The simplicity is shown in code below."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "public static boolean isClash(Appointment appointment, Appointment otherAppointment) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    if (appointment.isClash(otherAppointment)) {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    return false;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "}"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "** Cons: It might not be the most efficient way."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* **Alternative 2:** Sort the appointments in the ArrayList of appointments."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Maintain a sorted list of appointments based on the date and time of appointments."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "** Pros: It might be more efficient when checking for appointment clashes."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "We do not need to check our new appointment against all the appointments in the ArrayList."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "For example we can check from the last (latest) appointment down the list until a point where the next appointment ends before this appointment."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "At that point we can stop checking as we know that there will be no more clashes."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "** Cons: The efficiency gain when checking for clashes might be lost due to efficiency lost due to sorting being required."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "// end::schedulecommand[]"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "// tag::intuitivecommandprompt[]"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d Intuitive command prompt"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "The Intuitive Command Prompt feature is facilitated mainly by two classes: `IntuitivePromptManager`"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "and `IntuitiveEntryCommand`."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "`IntuitiveEntryCommand` extends `Command`, and represents the logic to be"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "executed when the user enters an input during the execution of an intuitive command. The `IntuitiveEntryCommand`"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "communicates with the `Model` interface in order to add an input into, or remove an input from the"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "`IntuitivePromptManager`."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "The `IntuitivePromptManager` exists to store the inputs entered by the user during the execution of an"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "intuitive command, and once all prompts or fields of the intuitive command have been filled, uses the stored inputs"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "to prepare a String that represents a non-intuitive command (e.g. `add n/NAME p/PHONE ...`) back to the"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "AddressBookParser in order to execute this command."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "The `IntuitivePromptManager` also has an `ArgumentManager`"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "that determines how to keep track of the arguments for its respective intuitive command."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "`IntuitivePromptManager` has six public-access methods that allow the `Model` to communicate with it."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "They are the following:"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "****"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "* `IntuitivePromptManager#addArgument(input)`: takes in a string input and stores it as an argument"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "* `IntuitivePromptManager#removeArgument()`: removes the latest stored argument(s)"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "* `IntuitivePromptManager#getInstruction()`: retrieves the instruction or prompt to be shown to the user"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "(for the field that One Life is currently prompting the user for)"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "* `IntuitivePromptManager#retrieveArguments()`: prepares and returns the String that represents the non-intuitive"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "command, called when all fields have been filled"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "* `IntuitivePromptManager#isIntuitiveMode()`: checks if One Life is currently executing an intuitive command"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "* `IntuitivePromptManager#areArgsAvailable()`: checks if there are any arguments still being stored in the"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "`IntuitivePromptManager`"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "****"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "With the above operations in mind, below is an example usage scenario of how an intuitive command works at each step."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "We will be using the example of an intuitive `add` command."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Start of Intuitive Command"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "The intuitive command first needs to be triggered:"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Step 1. User wishes to add a new patient. User types `add` into the command prompt and submits."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Step 2. `AddressBookParser` parses the input and detects the `add` command word without any trailing arguments."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Intuitive mode is triggered and a new `IntuitiveEntryCommand` is created."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Step 3. `LogicManager` executes the `IntuitiveEntryCommand`."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "`IntuitiveEntryCommand` interfaces with `Model` to add and store the user\u0027s input"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "in the `IntuitivePromptManager`."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Step 4. `Model` calls the `IntuitivePromptManager` to store the user\u0027s input as an argument. Since the user\u0027s"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "input is the `add` command word, the `IntuitivePromptManager` triggers it\u0027s intuitive mode - it creates the respective"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "`ArgumentManager` (in this case it is an `AddArgumentManager`) and stores it in a variable called `argumentManager`."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Step 5. `Model` then calls the `IntuitivePromptManager` to retrieve the next prompt to be shown to the user."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "`IntuitivePromptManager` asks `argumentManager` to retrieve the correct instruction."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "This String instruction representing the prompt to be shown is then returned by `IntuitivePromptManager` and `Model` then"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "proceeds to return this String instruction to the executing `IntuitiveEntryCommand`."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Step 6. `IntuitiveEntryCommand` uses the String instruction to create a new `CommandResult`, which is then returned"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "to the `LogicManager` to be displayed to the user."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "The following two sequence diagrams (Figures 11 \u0026 12) describes the above process:"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ".High level sequence diagram detailing interactions between `Logic` and `Model`"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "image::IntuitiveCommandWordSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ".Internal sequence diagram showing how `IntuitivePromptManager` interacts with `argumentManager`"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "image::ArgumentManagerStartSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Middle of Intuitive Command"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "As the intuitive command has now started and is in the midst of execution, the system prompts the"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "user for an input for the next field:"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Step 1. The system displays the instruction which prompts the user for the role of the person to be added."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "The user enters `patient` to indicate that the person added is a patient."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Step 2-3. These steps are similar to Steps 2-3 of the above section (Start of Intuitive Command), with the exception that the input is now `patient`"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Step 4. `Model` calls the `IntuitivePromptManager` to store the user\u0027s input as an argument. Since the intuitive"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "command is already executing, the user\u0027s input is stored as an argument in the `arguments` list."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "The `currentArgIndex`, which allows the `IntuitivePromptManager` to determine the what field it should prompt for next"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "is incremented accordingly by the `ArgumentManager`:"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ".How the `arguments` list in `IntuitivePromptManager` records arguments with `currentArgIndex`"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "image::IntuitiveInternalDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Step 5-6. These steps are the same as that of the above section (Start of Intuitive Command)"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d End of Intuitive Command"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Once all fields have been filled by the user, the system will exit intuitive mode as follows:"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Step 1-3. These steps are the same as those of the above section (Start of Intuitive Command). Take note that this is the last field that the user has to fill."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Step 4. `Model` calls the `IntuitivePromptManager` to store the user\u0027s input as an argument. The input is"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "stored as an argument in the `arguments` list. The `IntuitivePromptManager` detects that this is the last"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "field required to be filled and calls `IntuitivePromptManager#exitIntuitiveMode()` to signal the end of"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "the intuitive command."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Step 5. `Model` retrieves the next prompt from the `IntuitivePromptManager` but since there are no more"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "fields needing to be filled, `IntuitivePromptManager` returns a loading message to be displayed to the user,"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "to inform the user that the intuitive command is complete and the arguments provided by the user are being processed"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Step 6. `LogicManager` detects that the intuitive command has exited and that there are arguments stored in the"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "`IntuitivePromptManager`. Using the `Model` interface, it requests to retrieve the arguments in the"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "`IntuitivePromptManager` as a String line (representing a non-intuitive command)."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Step 7. This String line is passed into the `AddressBookParser` to be parsed. The sequence flow from here is"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "the same as if the user entered the non-intuitive version of the command."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "The following sequence diagram describes Step 6 and onwards."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ".High level sequence diagram showing how arguments are retrieved at the end of the intuitive command"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "image::IntuitiveEndSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Going Back"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "The user has the ability to undo the inputs that he enters into each field. This is known as going back,"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "and is achieved when the user types `/bk`. The following usage scenario describes how this takes place:"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Step 1. The user decides to undo his input for the previous field, and types `/bk`."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Step 2. The system behaves as per normal as mentioned above, treating `/bk` as a normal input."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Step 3. When `IntuitiveEntryCommand#execute()` is called, it detects that the input is the go back command"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "`/bk`. It calls `Model#removeIntuitiveEntry()` to remove the input filled into the latest field."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Step 4. `Model#removeIntuitiveEntry()` calls `IntuitivePromptManager#removeArgument()`, and the"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "`IntuitivePromptManager` removes the input filled into the latest field. `currentArgIndex` is decremented"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "as accordingly by the `ArgumentManager` as shown in the code snippet below:"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "```"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "public void removeArgument() {"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    if (currentArgIndex \u003c\u003d ArgumentManager.MIN_ARGUMENT_INDEX) {"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    currentArgIndex \u003d argumentManager.removeArgumentForCommand(arguments, currentArgIndex);"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "}"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "```"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Step 5. `Model` retrieves the instruction of the field indicated by the `currentArgIndex` of the"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "`IntuitivePromptManager`. Execution continues normally as described in the above sections."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "The following two sequence diagrams (Figures 15 \u0026 16) describe the above process:"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ".High level sequence diagram showing going back ability"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "image::IntuitiveCommandPromptBackSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ".Internal sequence digram showing going back ability"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "image::ArgumentManagerBackSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "\u003d\u003d\u003d\u003d Commands \u0026 Argument Managers"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "The following `XYZArgumentManagers` inherit from `ArgumentManager`. They handle arguments for and represent the different commands as stated below:"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "* `AddArgumentManager`: Represents the intuitive `add` command"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "* `DeleteArgumentManager`: Represents the intuitive `delete` command"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "* `FindArgumentManager`: Represents the intuitive `find` command"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "* `EditArgumentManager`: Represents the intuitive `edit` command"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "* `ScheduleArgumentManager`: Represents the intuitive `schedule` command"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "* `UpdateArgumentManager`: Represents the intuitive `update` command"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "// end::intuitivecommandprompt[]"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "// tag::displaydoctoravailability[]"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003d\u003d\u003d Display doctor\u0027s current availability feature"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "The display of each doctor\u0027s current availability is facilitated by `PersonProfilePage`, `Doctor`, `AppointmentManager`."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Given below is an example usage scenario of how the information is generated and propagated to be displayed in the"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "`PersonProfilePage` at the final stage."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Step 1. The user launches the application for the first time. The `MainWindow` will be initialized."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Step 2. The user then selects one of the doctors to view his/her profile via the `PersonProfilePage`."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Step 3. This then loads the `PersonProfilePage` that displays all of the person\u0027s particulars, be it a doctor or"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "patient. In the event that this `PersonProfilePage` belongs to a doctor, it calls the method"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "`Doctor#currentAvailStatus` to retrieve information on the doctor\u0027s current availability."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Step 4. Next, upon calling the method `Doctor#currentAvailStatus`, a helper method in `AppointmentManager`, called"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "`AppointmentManager#isAnyAppointmentOngoing` executes."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Step 5. `AppointmentManager` retrieves the current locale date and time from our `Date` and `Time` class and compare the"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "current time with all the scheduled appointments that the doctor has, and determines if the doctor is currently"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "available."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Step 6. The status information generated in `AppointmentManager` is propagated back up to the"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "`PersonProfilePage` which then sets a badge (available/busy) to reflect the availability status of that doctor."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Step 7. As long as the user remains on the same `PersonProfilePage`, this method continues to run in the background,"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "providing real time update of the doctor\u0027s availability at that point in time."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "The following sequence diagram summarizes what happens when a user launches the application:"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ".Sequence diagram for displaying of doctor\u0027s availability status feature"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "image::DisplayDoctorAvailabilitySequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "This section describes the pros and cons of the current and other alternate implementations of the doctor\u0027s availability feature."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to display each doctor\u0027s availability"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "* **Alternative 1 (current choice):** A badge in each doctor\u0027s `PersonProfilePage` display that shows his/her current"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "availability."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "** Pros: Provides convenience for the user to refer to since the badge is always on the display."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "** Cons: Limits to only checking and viewing the availability status of one doctor at a time, thus will not be able"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " to get a consolidated list/view of all doctors who are available or busy at the moment."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "* **Alternative 2:** A separate command that the user can call upon to look up the current availability of all doctors."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "** Pros: Allows the user to call this method repeatedly/when needed and the user will be provided with the latest"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "information."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "** Cons: Raises a need to have a separate command dedicated to this feature which may not be necessary and not as"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "convenient as compared to having a badge that is on the display at all times and will auto-update itself. Also, this"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "adds on to"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "the list of"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "commands that the user has to get familiar with."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to update the status of each doctor\u0027s availability"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "* **Alternative 1 (current choice):** A function that will refresh the badge every few seconds."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "** Pros: Provides accurate information and real time update on the doctor\u0027s availability and it is easy to implement."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Given below is a code snippet of how this feature is implemented:"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " if (person instanceof Doctor) {"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     setAvailabilityOfDoctor();"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     animationTimer.start(); // Updates availability badge of doctor every second"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                             // to reflect real time status."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " } else {"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     assert person instanceof Patient;"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     animationTimer.stop();"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     hideDoctorFields();"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " }"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "** Cons: Affects the performance of the application due to this function continuously running in the background."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "* **Alternative 2:** Updates the status/badge only on launch of application and only when there is a"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "change in information stored in the database."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "** Pros: Offers an easier implementation method."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "** Cons: Does not auto-update the information and thus the information will be outdated and unreliable."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "// end::displaydoctoravailability[]"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003d\u003d\u003d Switch command feature"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "The switching of database functionality is facilitated by `SwitchCommand`, `SwitchCommandParser` and `ModelManager` and"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "`DatabaseChangedEvent`. `DatabaseChangedEvent` extends from `Events`,`SwitchCommand` extends from `Command` and"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "`SwitchCommandParser` extends from `Parser`."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Given"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "below is an example usage scenario of the database is segmented into the two different sub-databases, i.e. patient and doctor."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Step 1. The user switches over to view the doctor\u0027s database. User enters the command `switch r/doctor`. +"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Input parameter for `r/ROLE` is case-insensitive"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Step 2. This then calls the `SwitchCommandParser` and it will parse the inputs and creates a new `SwitchCommand`."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Step 3. Next, this triggers the `ModelManager#changeDatabase` method, which then updates the `filteredPersons` in"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "the `ModelManager`. At the same time, a new `DatabaseChangedEvent` is created that will trigger the relevant"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "components in the `UI` that are subscribed to this event, updating those components base on this new change in the"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "database."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "The following sequence diagram summarizes what happens when a user switches the database:"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ".Sequence diagram for switch command"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "image::switchCommandSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "This section describes the pros and cons of the current and other alternate implementations the switch command feature."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to divide the database into two different sub-databases"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "* **Alternative 1 (current choice):** An additional filter layered upon the database instead of having 2 different"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "databases."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "** Pros: Offers an easier implementation method, because it only needs to implement a filter on the data. More"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "importantly, there will be less issues with certain commands such as the `ScheduleCommand`. This is because such"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "commands requires updating both the patient\u0027s and the doctor\u0027s data. As such, this implementation allows the system"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "to still have access to both parties\u0027 data, since they are actually not stored in different places, facilitating the"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "update of data on both side."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "** Cons: Reduces the speed and efficiency of the system since there are more data being dealt with when it could have"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " been halved (refer to Alternative 2)."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "* **Alternative 2:** Two different databases to store patients\u0027 and doctors\u0027 data separately."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "** Pros: Improves the efficiency of the system since the data that is being dealt with and processed, is halved (i.e."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " there will only be patients\u0027 data, without the additional doctors\u0027 data, or vice versa)"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "** Cons: Creates issues for certain commands such as the `ScheduleCommand`. To elaborate, `ScheduleCommand` updates the"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "data for both the doctor and the patient. However this implementation means that the system only has access to one particular"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "database (i.e. either patient or doctor) and thus this will hinder and cause inconvience as it will create a need for"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " a method to propogate this information to the other database that is inactive at the moment."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "// tag::updatecommand[]"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d Update command feature"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "The updating medical record mechanism is facilitated by `UpdateCommandParser`, `UpdateCommand` and `MedicalRecord`."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "`UpdateCommand` extends from `Command` and `UpdateCommandParser` extends from `Parser`."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "The key operation implemented is `UpdateCommand#execute`."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Given below is an example usage scenario and how the update command mechanism behaves at each step."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Step 1. The user wants to update the medical record library of a `Patient`. User proceeds to fill in the details behind the respective prefixes."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "For example: `update 1 d/16.10.2018 dg/flu tr/tamiflu c/to be taken thrice a day`"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Step 2. The user executes the command which calls the `UpdateCommandParser`."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "`UpdateCommandParser` will first parse the inputs and create a `MedicalRecord` with the given date, diagnosis, treatment and comment, and return an `UpdateCommand` with the new `MedicalRecord`."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "If no comment is given the default comment \"-\" is used."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Step 3. `UpdateCommand` will then be executed."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "`UpdateCommand` will first do the following checks on the user input to ensure that the command input was valid:"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Checks:"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "** Whether the index of input person is valid."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "** Whether the person specified by the index is a patient."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "** Whether the specified date is a valid date."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "** Whether the specified date is before the current date."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "** Whether the input contain invalid prefixes."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "If it was invalid, an exception message will be thrown and the `MedicalRecord` will not be added into the patient\u0027s medical record library."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Step 4. If the checks are successful, all the attributes of the specified person will first be copied, including the existing medical record library of the specified `Patient`."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Step 5. The new `MedicalRecord` will be added into the copied medical record library which is an `ArrayList` of `MedicalRecord`. The new `MedicalRecord` is added to the front of the list and since the pointer for the latest medical record is always pointing to the first element, the latest medical record will be automatically updated."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "image::UpdateSequenceDiagramStep5.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Step 6. A new `Patient` is created with all the copied attributes and the updated medical record library."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Step 7. The existing `Patient` that was specified is updated to the newly created `Patient` in the model."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "The following sequence diagram shows how the update medical record operation works:"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ".Sequence diagram for an update command"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "image::UpdateSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "This section describes the pros and cons of the current and other alternate implementations of updating medical records."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to store a patient\u0027s medical record library"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* **Alternative 1 (current choice):** Use an ArrayList of `MedicalRecord` as the patient\u0027s medical record library."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "** Pros: Accessing the most recent record by retrieving the first `MedicalRecord` in the ArrayList is easy. Given below is a code snippet that demonstrates how this is done."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "if (medicalRecordLibrary.size() !\u003d 0) {"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    return medicalRecordLibrary.get(medicalRecordLibrary.size() - 1);"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "} else {"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    return null;"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "}"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "** Cons: Retrieving the latest `MedicalRecord` before a specified date takes longer as each `MedicalRecord` has to be checked sequentially until the last `MedicalRecord` before the specified date is found."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* **Alternative 2:** Use a different data structure like a TreeMap of `MedicalRecord` as the value and date for the key as the patient\u0027s medical record library."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "** Pros: Retrieving the latest `MedicalRecord` before a specified date is made convenient by  just using the floor function already defined in the TreeMap API."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "** Cons: Maintaining the TreeSet for more complicated tasks like editing `MedicalRecord` may be difficult since a new `MedicalRecord` has to be created and reinserted into the same location in the TreeSet."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "// end::updatecommand[]"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "// tag::findcommand[]"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d Find command feature"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "The find mechanism is facilitated by `FindCommand`, `FindCommandParser` and `PersonContainsKeywordPredicate`."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "`FindCommand` extends from `Command`, `FindCommandParser` implements `Parser` and `PersonContainsKeywordPredicate`"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "implements `Predicate`."
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "The key operation implemented is `FindCommand#execute`."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "Given below is an example usage scenario and how the find command mechanism behaves at each step."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "Step 1. The user wants to find all `Person` whom have a `friends` `Tag`, with `Name` either `Alex` or `Bernice` by"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "executing `find n/Alex n/Bernice t/friends`."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "Step 2. `FindCommandParser` will parse the input and verify that is it valid before creating a"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "`PersonContainsKeywordsPredicate`, which is passed into `FindCommand`. Then, `FindCommand` is returned."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "* `PersonContainsKeywordPredicate` takes in a `HashMap` of `Prefix` mapped to an `ArrayList` of search parameters. The"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "code snippet below illustrates how a `FindCommand` is created:"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        ..."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        // Performs checks to see if the arguments entered are valid."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        ..."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        // Process arguments into a HashMap personSearchKeywords which is used to create a PersonContainsKeywordsPredicate to be passed into FindCommand."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        ..."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        return new FindCommand(new PersonContainsKeywordsPredicate(personSearchKeywords));"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "* `PersonContainsKeywordPredicate` tests if a `Person` should appear when searched by iterating through each of the keys"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "in the `HashMap` and returning `true` if all of the `Person` \u0027s attributes match at least 1 of the entries in each key\u0027s"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "`ArrayList`. The image below illustrates the list of `Person` that return `true` for"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "`PersonContainsKeywordPredicate#test`"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "after the user input `find n/Alex n/Bernice t/friends`."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ".PersonContainsKeywordPredicate test result"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "image::FindCommandDeveloperGuidePredicate.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "* As can be seen in the image above, `Person` at index 0 and index 2 have at least 1 entry in `Name` and `Tag` that"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "match the required search parameters. Therefore, they will be shown in the result list. Even though `Person` at index 1"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "has a match in the `Name` attribute, he does not have a `friends` `Tag` and is therefore not shown."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "If there is no input after the \"find\" keyword, `IntuitiveEntryCommand` will be triggered, which will prompt the user to"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "input search parameters."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "Step 3. `FindCommand` will then be executed."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "Step 4. `Model#updateFilteredPersonList()` will be called, which uses `PersonContainsKeywordPredicate` to  update"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "`Model` to show all `Person` that contains the searched parameters."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "The following activity diagram summarises what happens when a user launches the application:"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ".Find command sequence diagram"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "image::FindCommandDeveloperGuideSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to input search fields"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "* **Alternative 1 (current choice):** Allow users to perform searches by specifying certain keywords of interest."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "(For example: `Name` : `n/`, `Phone`: `p/`)"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "** Pros: It results in a powerful and precise search function by providing the user the option to specify exactly which"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "`Person` attributes are of interest."
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "** Cons: It may be difficult for newer users to remember the shortcuts that represent the attributes of interest."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "* **Alternative 2:** Generalise the search function by searching through all fields and providing the most relevant"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "information through predictive search."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "** Pros: It provides an even more powerful search function that is both simple to use and accurate."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "** Cons: It is incredibly difficult to implement such a search function without the use of machine-learning algorithms"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "or an internet connection."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "// end::findcommand[]"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d Editing documentation"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d Publishing documentation"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d Converting documentation to PDF format"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d Site-wide documentation settings"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Shown below is a list of site-wide attributes and a short description for each attribute."
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d Per-file documentation settings"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Shown below is a list of per-file attributes and a short description for each."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d Site template"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d Running tests"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`."
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`."
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* Open a console and run the command `gradlew clean allTests`. (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests`. (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d Troubleshooting testing"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d Build automation"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d Continuous integration"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d Coverage reporting"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d Documentation previews"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d Making a release"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d Managing dependencies"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "a. Include those libraries in the repo. (this bloats the repo size) +"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "b. Require developers to download those libraries manually. (this creates extra work for developers)"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": ". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `appointment` field for each contact, rather than relying on tags alone. After designing the specification for the `appointment` command, you are convinced that this feature is worth implementing. Your job is to implement the `appointment` command."
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for a person specified in the `INDEX`. +"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for the first person to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": "Removes the remark for the first person."
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027appointment\u0027 arguments"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `appointment` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for appointment in `PersonCard`"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a appointment for each person later."
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "-"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the appointment label."
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "We have to properly encapsulate the appointment in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a appointment)."
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": "We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new Xml field for `Remark`."
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cappointment\u003e` element."
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "-"
        },
        "content": "Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "-"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Our appointment label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `appointment` field."
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s appointment."
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning appointment label."
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `appointment` command."
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "* has a need to manage a significant number of patients"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "* is reasonably comfortable using CLI applications"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "* works in the hospital"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "* has a need to retrieve patient information promptly"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Value proposition: manage contacts faster than a typical mouse/GUI driven application"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Shown below are the user stories collected and used to conceptualize the features of One Life."
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "|`* * *` |user |be able to create a patient profile |"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "|`* * *` |user |add to look up existing patient profiles |"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "|`* * *` |user |update existing patient profiles |"
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "|`* * *` |careless user |delete an existing patient profile|remove a profile that was accidentally created"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "|`* * *` |new user |be able to refer to a helplist of commands |quickly learn how to use the software"
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "|`*` |expert user |be able to use shortcuts to access data |speed up my processes"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "|`* * *` |user |be able to accurately obtain data of a specific patient when the dataset is large (people of the same name) |prevent any accidental misdiagnosis"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "|`*` |user |be able to look up a patient based on one or more attributes |"
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "|`*` |user |be able to pin command(s) at the top of my screen |easily refer to those that I am interested in"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "|`* *` |user |be able to hide patient details |protect the personal details of certain patients"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "|`* * *` |careless user |be able to undo recent changes or deletion |recover patients\u0027 profiles in the event of a mistake"
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "|`* *` |user |be able to tag patients with VIP status |keep track of high profile patients and allocate necessary resources"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "|`* *` |user |be able to check if a drug will cause an allergic reaction |prescribe medication to a patient safely"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "|`*` |user |check if a drug will cause an allergic reaction |"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "|`*` |user |add a appointment for a patient |record down anything that doesn\u0027t fall in given categories"
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "|`*` |user |check the countries a patient has been to in the last few weeks |check for any diseases contracted from overseas"
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "|`* * *` |user |group patients by a particular attribute |"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "|`*` |expert user |be able to use shortcuts for commands (e.g. \"d\" instead of \"delete\") |save time typing long commands"
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "|`* *` |less IT-savvy user |be able to use more user friendly/natural language commands |can understand the data entry and retrieval process intuitively"
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "|`* *` |less IT-savvy user |see the CLI as a chat |typing in commands will feel more intuitive"
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "-"
        },
        "content": "(For all use cases below, the *System* is the `AddressBook` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "\u003d\u003d\u003d Use case: Display and Schedule data and time of medical appointments"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "1.  User requests to view all medical appointments or appointments on a specific day."
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "2.  AddressBook shows a list of all appointments."
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "3.  User requests to appointment a patient at a specific date and time."
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "4.  AddressBook updates appointment details in database."
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "5.  AddressBook shows the appointments details to the user."
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* 3a. Patient is not in database."
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "** 3a1. AddressBook warns user that patient is not in database."
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* 4a. Appointment clashes with another appointment."
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "** 4a1. AddressBook warns user of appointment clash."
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "\u003d\u003d\u003d Use case: Intuitive Command Prompting"
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "1.  User enters in command that takes in in arguments without any specified arguments. (e.g. add, delete)"
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "2.  AddressBook shows instructions to guide user."
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "3.  User responds to instructions with respective answers/inputs."
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "4.  AddressBook performs command for user and echoes changes made to user."
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* 1a. User enters unrecognised command."
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "** 1a1. AddressBook shows error message and shows list of available commands."
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* 3a. User accidentally enters wrong data when prompted by instruction."
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "** 3a1. User follows instruction to return to previous instruction/undo. (e.g. type /bk)"
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Use case resumes at step 3."
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "\u003d\u003d\u003d Use case: Viewing and updating medical history"
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "1.  User requests to view medical history of a particular patient at a specific date."
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "2.  AddressBook displays medical history of the patient."
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "3.  User requests to update medical history."
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "4.  AddressBook updates patient medical history in database using current date."
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "5.  AddressBook displays success message."
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* 1a. Patient is not in database."
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "** 1a1. AddressBook warns user that patient is not in database."
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* 1b. No specified date."
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "** 1b1. AddressBook displays most recent medical history."
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Use case resumes at step 3."
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "\u003d\u003d\u003d Use case: Add and display doctors\u0027 profile"
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "1.  User adds new doctor to the database."
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "2.  Addressbook shows success message."
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "3.  User requests to display all doctors."
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "4.  Addressbook displays all doctors’ information and indicates their current availability."
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* 1a. User does not specify the doctor’s medical speciality."
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "** 1a1. Addressbook prompts user of insufficient information."
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* 1b. Similar name already exists in the same medical department."
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "** 1b1. Addressbook prompts user that similar name already exists."
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Use case resumes at Step 1."
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u003d\u003d\u003d Use case: Displays a specific doctor’s appointment"
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "1.  User requests to view the appointment of a particular doctor."
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "2.  Addressbook displays appointment of the specified doctor. (In ascending chronological order)"
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* 1a. User inputs wrong/invalid doctor’s name or medical department."
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "** 1a1. Addressbook informs user that there is no doctor with the name and/or medical department specified by the user."
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* 1b. User does not specify doctor’s name."
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "** 1b1. Addressbook informs use that no doctor was specified."
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* 1c. User enters a doctor whose name appears in more than 1 medical department."
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "** 1c1. Addressbook displays to user that there are more than 1 Dr [name] detected."
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "** 1c2. Addressbook requests user to re-enter input and indicate the doctor’s medical department as well."
      },
      {
        "lineNumber": 1544,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "+"
      },
      {
        "lineNumber": 1545,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Use case resumes from Step 1."
      },
      {
        "lineNumber": 1546,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1547,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1548,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "\u003d\u003d\u003d Use case: Find patients by any keywords"
      },
      {
        "lineNumber": 1549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1550,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1551,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1552,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "1.  User requests to find patients by tag."
      },
      {
        "lineNumber": 1553,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "2.  Addressbook lists all users with that tag."
      },
      {
        "lineNumber": 1554,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1555,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1556,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1557,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1558,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 1559,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1560,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "* 1a. There are no users with that tag."
      },
      {
        "lineNumber": 1561,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1562,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "** 1a1. Addressbook returns an empty list of patients."
      },
      {
        "lineNumber": 1563,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1564,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1567,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1568,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1570,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "**  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1571,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "**  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1572,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "**  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1575,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1576,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1578,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1579,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1581,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1582,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1584,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 1585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1586,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 1587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1588,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1590,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1591,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1593,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1595,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1596,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1598,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1599,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1600,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1601,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1603,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1604,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1606,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d Launch and shutdown"
      },
      {
        "lineNumber": 1607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1608,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1610,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ".. Download the jar file and copy into an empty folder."
      },
      {
        "lineNumber": 1611,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ".. Double-click the jar file. +"
      },
      {
        "lineNumber": 1612,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1614,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1616,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1617,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1618,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1620,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1622,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1623,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1624,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1626,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1627,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1628,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1629,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1630,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1631,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1632,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1634,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1636,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1638,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1639,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1640,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1642,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 69,
      "tristonpang": 285,
      "guestuser0123": 119,
      "GaryGohYP": 219,
      "-": 856,
      "nelvintan": 94
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d One Life - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "By: `Team W16-3`      Since: `Sep 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "One Life (OL) is designed for service providers in the healthcare industry who *prefer to use a desktop application for"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "managing patient and doctor information*. More importantly, One Life is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you prefer typing, One Life can get your medical information management tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Listed below are instructions to help you get started:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ".  Copy the file into the folder you want to use as the home folder for One Life."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ".  Double-click the file to start the app. The GUI (as shown in Figure 1 below) should appear in a few seconds."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ".One Life User Interface"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "image::UserGuide_Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "E.g. typing *`help`* and pressing kbd:[Enter] will open the help window. +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Some example commands you can try:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* *`list`* : lists all contacts."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "* **`add`**`r/patient n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 ic/S9601234A` : adds a `Patient` named `John Doe` to the database."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* **`delete`**`3` : deletes the 3rd contact shown in the current list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* *`exit`* : exits the app."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Opens user guide. +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "// tag::add[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Adding a person: `add`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "Adds a `Patient` or `Doctor` to the database. +"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "*Adding a `Patient`* +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Format: `add r/patient n/NAME ic/NRIC p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "*Adding a `Doctor`* +"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Format: `add r/doctor n/NAME ic/NRIC p/PHONE_NUMBER e/EMAIL a/ADDRESS md/MEDICAL_DEPARTMENT [t/TAG]...`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "A `Person` can have any number of `Tag` (including 0)."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "* `add r/patient n/John Doe Xiao Huang ic/S1234567D p/98765432 e/johnd@example.com a/John street, block 123, #01-01"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "t/Hokkien` +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "(Adds a new patient, refer to Figure 1 and 2 below for illustrations)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ".Before adding a new patient using add command"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "image::AddCommandPatientBefore.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ".After adding a new patient using add command"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "image::AddCommandPatientAfter.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "* `add r/doctor n/Betsy Crowe ic/S8234567A e/betsycrowe@example.com a/Newgate Estates p/1234567 md/dentistry` +"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "(Adds a new `Doctor`, refer to Figure 3 and 4 below for illustrations)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ".Before adding a new doctor using add command"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "image::AddCommandDoctorBefore.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ".After adding a new doctor using add command"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "image::AddCommandDoctorAfter.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "When adding a new `Doctor` you have to to specify his/her `MedicalDepartment`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "// end::add[]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "// tag::list[]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003d\u003d\u003d Listing all relevant personnel : `list`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Shows a list of all of the people in the database. +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "// end::list[]"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing a person : `edit`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Edits an existing person in the database. +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Format: `edit INDEX [n/NAME] [ic/NRIC] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed patient list."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 2 n/Betsy Crower t/` +"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "// tag::find[]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003d\u003d\u003d Locating person by any attribute: `find`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "There are two types of Find Commands: Global Find and Specific Find. They can be used in conjunction with one"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "another. +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "Format: `find [PREFIX] KEYWORDS [NEXT_PREFIX] [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "In order for a `Person` to show up on `find`, the `Person` must match all attributes in the input. +"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "(i.e. `find n/alex r/doctor` will show all `Doctor` named `Alex`. If another `Alex` is not a `Doctor`, he will not be"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "shown.)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "\u003d\u003d\u003d\u003d Global Find"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "Global Find is a search on all attributes of all `Person` in the database. +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "It is performed when:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "* no `Prefix` is included in the input, or when"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "* keywords are included before the first valid `Prefix`."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "When performing Global Find with more than one separate keyword, users can simply separate them using a `[SPACE]`."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "The Find Command will interpret the input as separate words to be searched globally."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "* `find kang` +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "Displays all `Person` with `kang` in any of their attributes."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "* `find kang r/doctor` +"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "Displays all `Person` with `kang` in any of their attributes and whom is a `Doctor`. This is an example of Global Find"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "used in conjunction with Specific Find."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "* `find alex doctor` +"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "Displays all `Person` with `alex` or `doctor` in any of their attributes."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "The images below illustrate the utilisation of Global Find:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ".Global find command"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "image::FindCommandUserGuideGlobal1.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ".Global find command with specific find command"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "image::FindCommandUserGuideGlobal2.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ".Global Find command with multiple keywords"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "image::FindCommandUserGuideGlobal3.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "\u003d\u003d\u003d\u003d Specific Find"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "Specific Find is a search on attributes specified by the user. (i.e. `Name`, `Phone` etc)."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "It is performed when a `Prefix` is specified in the input field. +"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "Below is a list of all searchable attributes and their corresponding `Prefix`:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ".Table of searchable prefixes"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "[width\u003d\"80\"]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "| *Attribute*        | *Prefix*"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "| Name               | `n/`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "| NRIC               | `ic/`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "| Phone              | `p/`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "| Email              | `e/`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "| Address            | `a/`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "| Role               | `r/`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "| Tag                | `t/`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "| Medical Department | `md/`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "| Medical Record     | `mr/`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "Search keywords must be entered behind a `Prefix` whenever a `Prefix` is used in the input. A command like"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "`find n/[BLANK]` is not a valid input. +"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "The `Prefix` entered must also be valid."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "* `find t/friends` +"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "Displays all `Person` with the `Tag` labelled `friends`."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "* `find t/friends r/doctor` +"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "Displays all `Person` with the `Tag` labelled `friends` and whose `Role` is `Doctor`."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "* The images below illustrate the utilisation of Specific Find."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ".Specific find command"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "image::FindCommandUserGuideSpecific1.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ".Specific find command with additional prefixes"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "image::FindCommandUserGuideSpecific2.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ".Examples of invalid input for specific find command"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "image::FindCommandUserGuideError.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "****"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "* Find is case-insensitive. e.g. `nelvin` will match `Nelvin`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "* In Global Find, `Person` containing any of the given keywords in any of his/her attributes will be displayed."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "e.g. `find doctor nelvin` will cause all `Doctor` and `Nelvin Tan` to be displayed."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "* In Specific Find, the specified attribute of the `Person` must contain the searched keyword to be displayed."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "e.g. `find n/Gary Goh` will display `Gary Goh` but not `Kenneth Goh`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "* In the event that the user wants to specify more than one keyword to be seperately searched in a specified attribute,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "for example if the user wants to find all `Person` with `Name` `Kang Tze` or `Triston`, he must separate the names"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "using two `Name` `Prefix`. e.g. `find n/Kang Tze n/Triston` displays `Ng Kang Tze` and `Triston Pang`."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "* An illustration of a more complicated `find` command is `find friends n/Kang Tze n/Triston r/doctor`, which displays"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "all `Person` with `friends` in their attributes, has `name` containing either `Kang Tze` or `Triston`, and whom is a"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "`Doctor`."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "****"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "// end::find[]"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person : `delete`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Deletes the specified person from the database. +"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the person at the specified `INDEX`."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Deletes the 2nd person in the database."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Selecting a person : `select`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the person identified by the index number used in the displayed person list. +"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* Selects the person and loads the details of the person at the specified `INDEX`."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Selects the 2nd person in the database."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "`select 1` +"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Selects the 1st patient in the results of the `find` command."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Restores the database to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Undoable commands: those commands that modify the database\u0027s content (`add`, `delete`, `edit` and `clear`)."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "// tag::switch[]"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003d\u003d\u003d Switching between different database : `switch`"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Switches between the three different database available i.e. 1. doctor, 2. patient, 3. doctor and patient. +"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Format: `switch r/ROLE`"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "****"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "* The active database displayed is switched to that of the specified ROLE."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "* ROLE is the role of the person (patient or doctor)."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "****"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "IMPORTANT: ROLE is *case-insensitive* and it accepts only *three* different parameters as follows: +"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "1. Doctor +"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "2. Patient +"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "3. All +"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "NOTE: Adding a person belonging to a different database is allowed but you would not be able to view it. +"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "E.g. Adding"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "a new patient while viewing the doctor\u0027s database."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "* `switch r/Doctor` +"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Switches over to display the doctor\u0027s database as shown in the figure below:"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ".Upon switching to doctor\u0027s database"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "image::switchDoc.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "* `switch r/Patient` +"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Switches over to display the patient\u0027s database as shown in the figure below:"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ".Upon switching to patient\u0027s database"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "image::switchPatient.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "* `switch r/All` +"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Switches over to display a combined view of both patient\u0027s and doctor\u0027s database, shown in figure below:"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ".Upon switching to the combined database of both patient and doctor"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "image::switchAll.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "// end::switch[]"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003d\u003d\u003d Clear entries in active database : `clear`"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Clears only the entries in the active database (currently in view of). +"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "`switch r/doctor` +"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Switches over to the doctor\u0027s database as shown in the figure below:"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ".Upon switching to doctor\u0027s database"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "image::clearStep1.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Clears all the data in the currently active database i.e. clears all doctors\u0027 data only, shown in the figure below:"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ".Clearing the active database"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "image::clearStep2.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "`switch r/patient` +"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Switches over to the patient\u0027s database and as shown in the figure below, the patients\u0027 data are"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "still present:"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ".Upon switching to patient\u0027s database"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "image::clearStep3.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "NOTE: If the current active database is the combined database containing both patients\u0027 and doctors\u0027 data, then"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "executing this command would result in clearing all entries from both databases."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clearall`"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Clears all entries from both patient\u0027s and doctor\u0027s databases. +"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Format: `clearall`"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "NOTE: This command when executed, clears all patients\u0027 and doctors\u0027 regardless of which database the user is"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "currently viewing, unlike the `clear` command where the deletion of data only applies to the active database."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "// tag::avail[]"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003d\u003d\u003d Retrieving a list of available doctors : `avail`"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Retrieves a list of all the doctors available at that moment or base on the date and time period indicated by the"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "user. +"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Format: `avail [d/DATE] [st/START TIME] [et/END TIME]`"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "****"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "* Date is formatted as DD.MM.YYYY and is dot separated. e.g.  `7.11.1996` is the 7th of November 1996"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "* Both start and end time uses the 24-hour clock time. e.g. `1300` is 1pm"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "* End Time should be the same if not a later time than the start time"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "* Date and Time (start and end time) are optional parameters"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "****"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "NOTE: If no date is specified by the user, the system would use the current date by default. Similarly, if neither start"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " nor end time is specified by the user, the system would use the current time as an input for both start and end time."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "NOTE: There is a 1 minute buffer time allocated for doctors after the end of their appointments. This means that"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " if a doctor has an appointment from 1100 to 1200, the doctor will be considered unavailable even at the time 1201."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Inputs for both start and end time should either be both present or both absent. There should not be"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "an end time without there being a start time specified, and vice versa. +"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "`avail` +"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "List all doctors available at the moment (i.e. the date and time when the command is executed), as shown in the figure"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "below:"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ".Display available doctors at current datetime"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "image::avail.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "`avail d/24.11.2018`"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "List all doctors available on the 24th November 2018, at the time when this command is executed, as seen in the"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "figure below:"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ".Display available doctors on 24th November"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "image::avail2.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "`avail d/24.11.2018 st/1200 et/1300`"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Lists all doctors available from 12pm to 1pm, on the 24th November 2018, shown in the diagram below:"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ".Display available doctors base on the given date and time"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "image::avail3.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "This command will not work should the user be viewing the patient\u0027s database, since this command applies only for"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "doctors. In this case, executing this command will throw a message to prompt the user to switch the current"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "active database to either the doctor\u0027s database or the combined database containing both patients\u0027 and doctors\u0027 data."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "// end::avail[]"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "// tag::displayappt[]"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u003d\u003d\u003d Displaying medical appointments : `select`"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Displays a list of medical appointments that are currently scheduled for the specified person. +"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "****"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* Selects the person and loads the appointment list of the person at the specified `INDEX`."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* The index is the position of the person selected from the person card list."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* The appointment list will be displayed on the top right of the screen."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "****"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* `list` displays the list of persons as shown in the figure below."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "+"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ".Display list diagram"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "image::ListCommand.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "+"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "`select 2` selects the 2nd person in the database and display the appointments of that person"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "on the top right of the screen as shown in the figure below."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "+"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ".Display appointment diagram"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "image::DisplayAppointment.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "`select 1` +"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Selects the 1st patient in the results of the `find` command and display the appointments."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "This is similar to the example above."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "// end::displayappt[]"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "// tag::schedule[]"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u003d\u003d\u003d Scheduling medical appointments : `schedule`"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Schedules a patient/doctor for a medical appointment at a specific date and time. +"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Format: `schedule INDEX d/DATE st/START_TIME et/END_TIME dn/DOCTOR_NAME di/DOCTOR_NRIC pn/PATIENT_NAME pi/PATIENT_NRIC`"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "****"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* Date is formatted as DD.MM.YYYY and is dot separated. e.g.  `7.11.1996` is the 7th of November 1996"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* Time uses the 24-hour clock time. e.g. `1300` is 1pm"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* Doctor name is the doctor\u0027s full name. e.g. `John Doe`"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* Doctor nric is the doctor\u0027s nric. e.g. `S1234567B`"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* Patient name is the patient\u0027s full name. e.g. `Kim Tan`"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* Patient nric is the patient\u0027s nric. e.g. `S1234567A`"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "****"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Overlapping of timing with existing appointments is considered a clash."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "E.g. 1300-1301 and 1301-1302 is a clash due to 1301."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* `schedule 1 d/23.11.2018 st/1300 et/1400 dn/Jack di/S1234567B pn/John Doe pi/S1234567A` +"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Schedules `John Doe` for an appointment with doctor `Jack` on the 23nd of November 2018 from"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " 1pm to 2pm."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "+"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "An example of a successful schedule is shown in the figure below."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "+"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ".Successful schedule diagram"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "image::ScheduleSuccess.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "+"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "After an appointment is successfully scheduled, the appointment list as shown below will be updated."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "+"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ".Change in appointment list"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "image::AppointmentListChange.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "+"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "An example of an unsuccessful schedule is shown in the figure below."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "+"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ".Unsuccessful schedule diagram"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "image::ScheduleFailure.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "// end::schedule[]"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "// tag::displaymr[]"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d Displaying medical records of patients : `select`"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Displays all the medical records of the specified person. +"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "****"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* The index is the position of the person selected from the person card list."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "****"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Displays the medical records of the first person on the displayed list as shown in the figure below."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ".Displaying medical records"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "image::DisplayMedicalRecords.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "// end::displaymr[]"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "// tag::update[]"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d Updating medical records of patients : `update`"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Adds a new medical record for the patient as the most updated record using the specified date as date of record. +"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Format: `update INDEX d/DATE dg/DIAGNOSIS tr/TREATMENT [c/COMMENTS]`"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "****"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* The date is formatted as DD.MM.YYYY and is dot separated e.g.  `11.1.2019` is the 11th of January 2019."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* The date cannot be in the past."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* Comments are optional."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "****"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "If no comments are specified, \"-\" will be displayed on the medical record."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* `update 1 d/13.11.2018 dg/Flu tr/Tamiflu` +"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Updates the medical records of the patient at index 1 with the given date, diagnosis and treatment without any comments as shown in the figure below."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ".Updating records without comments"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "image::UpdateCommandWithoutCommentsSuccess.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* `update 1 d/13.11.2018 dg/Flu tr/Tamiflu c/To be taken thrice a day after meals.` +"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "Updates the medical records of the patient at index 1 with the given date, diagnosis, treatment and comments as shown in the figure below."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ".Updating records with comments"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "image::UpdateCommandWithCommentsSuccess.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "// end::update[]"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "One Life data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "// tag::intuitivecommandprompt[]"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u003d\u003d\u003d Intuitive command prompting"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Provides a more natural way of entering commands into One Life. One Life will prompt the user for the next required"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "input - no prefixes are required."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Commands that support intuitive prompting:"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "****"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "* `add`"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "* `delete`"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "* `edit`"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "* `find`"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "* `schedule`"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "* `update`"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "****"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Format: `COMMAND`"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Type `/bk` to re-enter previous field. +"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Type `//` if the field is to be left blank (only available for optional fields). +"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Press `ESC` to cancel the currently executing command."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "* `add` +"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Starts an intuitive `add` command."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "This triggers the intuitive command prompt, and One Life will begin to guide you through the command with instructions, as shown in the figure below:"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ".Starting the intuitive `add` command"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "image::StartIntuitiveCommand.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "* `patient` +"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Specifies that a patient is to be added to the intuitive command prompt. The intuitive command prompt then asks for the next input,"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "in this case the patient\u0027s name, as shown in the figure below:"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ".Entering an input"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "image::NextIntuitiveInput.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "* `/bk` +"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Goes back to the previous field. A new input can be reentered for this field, as shown in the figure below:"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ".Going back to the previous field"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "image::BackIntuitive.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "* `ESC` +"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "Cancels the intuitive command. This clears the command box and exits the intuitive command, allowing for normal operation again, as shown in the figure below:"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ".Cancelling an intuitive command"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "image::ExitIntuitive.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "//end::intuitivecommandprompt[]"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "_{explain how the user can enable/disable data encryption}_"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous One Life folder."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "* *Add Patient* : `add r/patient n/NAME ic/NRIC p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` +"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "e.g. `add r/patient n/James Ho ic/S1234567A p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "t/colleague`"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "* *Add Doctor* : `add r/doctor n/Bobby Tan ic/S1234567B p/91234567 e/BBTan@example.com a/123, Clementi Rd, 123456"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "md/Dentistry`"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `edit 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "* *Find* : `find [PREFIX] KEYWORDS [NEXT_PREFIX] [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "e.g. `find n/James t/friends`"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "* *List People* : `list`"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "* *Select* : `select INDEX` +"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "e.g.`select 2`"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* *Display Medical Appointments* : `select INDEX`"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* *Schedule Medical Appointments* : `schedule INDEX d/DATE st/START_TIME et/END_TIME dn/DOCTOR_NAME di/DOCTOR_NRIC pn/PATIENT_NAME pi/PATIENT_NRIC` +"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "e.g. `schedule 1 d/23.11.2018 st/1300 et/1400 dn/Jack di/S1234567B pn/John Doe pi/S1234567A`"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* *Display Medical Records* : `select INDEX`"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* *Update Medical Records* : `update INDEX d/DATE dg/DIAGNOSIS tr/TREATMENT c/COMMENTS +"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "e.g. `update 2 d/22.11.2018 dg/flu tr/tamiflu`"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 117,
      "tristonpang": 44,
      "guestuser0123": 168,
      "GaryGohYP": 78,
      "-": 212,
      "nelvintan": 71
    }
  },
  {
    "path": "docs/team/garygohyp.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d Gary Goh Yipeng - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d PROJECT: One Life"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "---"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d Introduction"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "This project portfolio details my key contributions to the project One Life and serves to document the key features I implemented."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "One Life is a desktop application designed by me and other students from the National University of Singapore (NUS) as part of a requirement for our software engineering module under the given constraints that the user must interact with it using a Command Line Interface(CLI)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "One life is used for storing, updating, and displaying data related to patients and doctors. The user interacts with it using a CLI, and it has a Graphical User Interface (GUI) created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d Summary of Contributions"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* *Major enhancement*: added *the ability to update and display medical records.*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "** _What it does:_"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "*** Enables the user to update the current medical record history of a specified patient on a specified date."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "*** Checks if the given information such as the date, diagnosis or treatment are valid."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "** _Justification:_"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "*** Streamlines a key part of medical operations in a hospital. (Updating and referring to the current medical history of any given patient.)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "** _Highlights:_"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "*** Improves how data is stored, retrieved, and sorted."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "*** Requires in-depth analysis of design alternatives when choosing the most efficient method of storing medical record data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "*** Requires a brand new command to be created and existing code to be edited."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* *Minor enhancement*: added a check to verify if a given date is valid and in the correct format."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* *Code contributed*: [https://github.com/CS2103-AY1819S1-W16-3/main/commits?author\u003dGaryGohYP[Functional Code]][https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dgarygohyp\u0026sort\u003ddisplayName\u0026since\u003d2018-09-12\u0026until\u003d2018-11-10\u0026timeframe\u003dday\u0026reverse\u003dfalse\u0026repoSort\u003dtrue[RepoSense]]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "*** Managed releases `v1.1` - `v1.4` (4 releases) on GitHub."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "*** Changed the browser panel to display medical records instead. (Pull requests https://github.com/CS2103-AY1819S1-W16-3/main/pull/105[#105], https://github.com/CS2103-AY1819S1-W16-3/main/pull/109[#109])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "*** Added documentation and formatting changes for all new features to the User Guide. (Pull requests https://github.com/CS2103-AY1819S1-W16-3/main/pull/4[#4], https://github.com/CS2103-AY1819S1-W16-3/main/pull/5[#5], https://github.com/CS2103-AY1819S1-W16-3/main/pull/6[#6], https://github.com/CS2103-AY1819S1-W16-3/main/pull/39/commits/9e6897ca4b66ea457bd0b000adf74a7c2b0ffcc7[#39])"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "*** Added documentation for updating medical records to the Developer Guide. (Pull request https://github.com/CS2103-AY1819S1-W16-3/main/pull/80/commits/86501c5bba40bb36af4b584929e214c0d915fab2[#80])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "*** Reviewed other team members\u0027 pull requests. (Pull request https://github.com/CS2103-AY1819S1-W16-3/main/pull/129[#129])"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class. (Pull request https://github.com/CS2103-AY1819S1-W16-3/main/pull/66[#66])"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddisplaymr]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "include::../UserGuide.adoc[tag\u003dupdate]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dupdatecommand]"
      }
    ],
    "authorContributionMap": {
      "GaryGohYP": 64
    }
  },
  {
    "path": "docs/team/guestuser0123.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003d Kenneth Goh Jun Teck - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003d\u003d PROJECT: One Life"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "---"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003d\u003d\u003d Overview"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "This project portfolio details my key contributions to Project One Life."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "One Life is a desktop medical management application designed as part a project for a software engineering module"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "that I took in National University of Singapore (NUS). Originally an addressbook application with simple functions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "such as adding, editing, deleting and searching for contacts, my team and I have expanded and almost doubled its"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "functionality, morphing it into an application that can support and improves the efficiency of performing administrative"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "task in the medical sector (i.e. hospitals or medical centres)."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Some of the features that we have added includes, but are not limited to:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "* Able to schedule appointments between patients and doctors"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "* Able to update medical records of patients"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "* Able to be retrieve the availability status of all doctors at any point in time, base on their schedule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "* Able to enter commands using the Intuitive Command Prompt feature that is more user-friendly as compared to the"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "default Command Line Interface (CLI)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "* Able to effectively search for a group of/specific person in view of the many different attributes a patient or a"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "doctor has (e.g. medical department, medical records, appointments, nric, etc)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003d\u003d\u003d Summary of Contributions"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "* *Major enhancement*: added *the ability to be retrieve all doctor\u0027s availability status.*"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "** What it does: This allows the user to view the the availability status of each doctor at the moment."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "Alternatively, the user can choose to retrieve a list of doctors who are free/available at a given date and time,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "base on their schedule."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "** Justification: This feature improves the product significantly because a user can easily retrieve the data of each"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "doctor, and more importantly the current availability status of each doctor. Since this is a hospital management"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "application that will be used by nurses or medical administrative staff, in cases of a medical emergency or when a"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "doctor is required, the user can easily know which doctors are available at the moment to help/address the medical"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "situation. Alternatively, this feature also allows the user to know which doctors are available to be activated for"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "stand-by or other medical needs, at a specific date and time."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "** Highlights: This enhancement improves this application\u0027s ability to serve as a hospital management application as"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "it provides real time update of the availability status of each doctor. The implementation too was challenging as"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "it required addition of new event handlers to facilitate propagation of information stored in the backend, to the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "frontend i.e. Graphical User Interface(GUI) where the information is processed and displayed to the user."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "* *Minor enhancement*: +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "1. Changed the existing `add` command such that it facilitates adding of doctors and patients"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "separately."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "2. Added a `switch` command to facilitate switching between the doctor\u0027s and patient\u0027s database."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "3. Added a profile page to the GUI that displays all the information belonging to the selected"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "patient/doctor."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "4. Updated the existing `clear` command and added a new `clearall` command in view of having different database for"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "different people (i.e. patients and doctors)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "* *Code contributed*: [https://github.com/CS2103-AY1819S1-W16-3/main/commits?author\u003dguestuser0123[Functional code]]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " [https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dguestuser0123\u0026sort\u003ddisplayName\u0026since\u003d2018-09-12\u0026until\u003d2018-11-06\u0026timeframe\u003dday\u0026reverse\u003dfalse\u0026repoSort\u003dtrue[Reposense]]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "*** Managed releases `v1.1` - `v1.4` (4 releases) on GitHub"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "*** Updated the GUI layout (Pull requests https://github.com/CS2103-AY1819S1-W16-3/main/pull/54[#54],"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "https://github.com/CS2103-AY1819S1-W16-3/main/pull/116[#116],"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "https://github.com/CS2103-AY1819S1-W16-3/main/pull/124[#124],"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "https://github.com/CS2103-AY1819S1-W16-3/main/pull/204[#204])"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage (Pull requests"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "https://github.com/CS2103-AY1819S1-W16-3/main/pull/116[#116],"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "https://github.com/CS2103-AY1819S1-W16-3/main/pull/129[#129])"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "https://github.com/CS2103-AY1819S1-W16-3/main/pull/221[#221]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "*** Reviewed Pull Requests (PRs) of other team members (with non-trivial review comments):"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "https://github.com/CS2103-AY1819S1-W16-3/main/pull/53[#53], https://github.com/CS2103-AY1819S1-W16-3/main/pull/71[#71],"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "https://github.com/CS2103-AY1819S1-W16-3/main/pull/119[#119]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "*** Reported bugs and suggestions for other members in the team (Pull Requests:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "https://github.com/CS2103-AY1819S1-W16-3/main/pull/119[#119])"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "*** Updated team member\u0027s code to remove errors/bugs detected when running test codes against the program (Pull requests"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "https://github.com/CS2103-AY1819S1-W16-3/main/pull/34[#34],"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "https://github.com/CS2103-AY1819S1-W16-3/main/pull/76[#76])"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003d\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "include::../UserGuide.adoc[tag\u003davail]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "include::../UserGuide.adoc[tag\u003dswitch]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003d\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddisplaydoctoravailability]"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 103
    }
  },
  {
    "path": "docs/team/nelvintan.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u003d Tan Thong Cai Nelvin - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u003d\u003d PROJECT: One Life"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "---"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u003d\u003d\u003d Overview"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "This project portfolio details my key contributions to Project One Life."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "One Life is a desktop medical management application designed by me and my groups mates for a software engineering module in National University of Singapore (NUS)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "It aims to improve the efficiency of administrative processes in medical institutes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "The project was created under the constraint that the user only interacts with the application through a Command Line Interface (CLI)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "The main features of the project are:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* The ability to display and schedule medical appointments."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* The ability to display and update medical records."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* The ability to display doctor and patient details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* The ability to find persons by specifying related keywords."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* The ability to enter commands using intuitive command prompts instead of CLI for new users."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u003d\u003d\u003d Summary of Contributions"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* *Major enhancement*: added the ability to schedule and display medical appointments."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "** What it does: This enhancement allows the user to schedule appointments at a specified time and date."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "** Justification: This feature improves the product significantly because a user is able to display current appointments and schedule appointments."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "This is a key part of medical operations in a hospital."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Further checks are available to inform the user if they keyed in incorrect appointment details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "** Highlights: This enhancement drastically improved the ability of the application to assist medical processes, specifically in the area of scheduling appointment."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "The implementation too was challenging as it required a brand new command to be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* *Minor enhancement*: added the ability to check for valid date and time which is useful for scheduling and updating commands."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* *Code contributed*: [https://github.com/CS2103-AY1819S1-W16-3/main/commits?author\u003dnelvintan[Functional code]] [https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dnelvintan\u0026sort\u003ddisplayName\u0026since\u003d2018-09-12\u0026until\u003d2018-11-06\u0026timeframe\u003dday\u0026reverse\u003dfalse\u0026repoSort\u003dtrue[RepoSense]]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "*** Managed releases `v1.1` - `v1.4` (4 releases) on GitHub."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "*** Set up travis for continuous integration of the code base."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "*** Set up auto publishing of documentation for travis."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage %."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "(Pull requests https://github.com/CS2103-AY1819S1-W16-3/main/pull/11/commits/7203d4a630e46fdf724c76170e3589de7704687d[#11],"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "https://github.com/CS2103-AY1819S1-W16-3/main/pull/68/commits/ad0a044af6a04de2a7c5d456c4bc5753c60aacd4[#68])"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "(Pull requests https://github.com/CS2103-AY1819S1-W16-3/main/pull/123/commits/a8d665e38c5f07a50f6e38635bcc54b858193ac4[#123],"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "https://github.com/CS2103-AY1819S1-W16-3/main/pull/192[#192],"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "https://github.com/CS2103-AY1819S1-W16-3/main/pull/203[#203])"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "*** Reviewed other team members\u0027 pull requests."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "(Pull request https://github.com/CS2103-AY1819S1-W16-3/main/pull/124#pullrequestreview-169082170[#124])"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "(Pull requests https://github.com/CS2103-AY1819S1-W16-3/main/pull/124#pullrequestreview-169082170[#124],"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "https://github.com/CS2103-AY1819S1-W16-3/main/pull/204[#204])"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddisplayappt]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "include::../UserGuide.adoc[tag\u003dschedule]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dschedulecommand]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "nelvintan": 81
    }
  },
  {
    "path": "docs/team/ngkangtze.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "\u003d Ng Kang Tze - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d PROJECT: One Life"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "---"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d Overview"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "This Project Portfolio is intended to document my contributions towards One Life. These contributions include functional"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "and non-functional code, documentation, user interface and numerous other aspects of the project."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "One Life is a desktop-based medical database and medical information management application used for storing and displaying"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "data related to patients and doctors."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "One Life aims to improve the efficiency of administrative processes in medical institutions."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "It was developed as part of the module requirements for CS2103T (Software Engineering)."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "The user interacts with it using a Command Line Interface (CLI), and it has a Graphical User Interface (GUI) created with JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003d\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "* *Major enhancement*: Enhanced *the ability to find `Person` with selected attributes* instead of only with their `Name`."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "** What it does: This feature allows the user to find all `Person` containing specified keywords. Users may combine multiple keywords from different fields to increase the search accuracy."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "** Justification: This feature improves the product significantly because it reduces the amount of time needed to find all relevant `Person` and perform other operations on their information fields."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "** Highlights: This enhancement was deceptively challenging. Even though it builds upon existing procedures, a large amount of modification was necessary to ensure that users are able to enter the arguments in any preferred order."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "* *Minor enhancement*: Modified the `find` command to reject invalid input and prompt the user for proper input using a format guide."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "* *Code contributed*: [https://github.com/CS2103-AY1819S1-W16-3/main/commits?author\u003dngkangtze[Functional code]] [https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dngkangtze\u0026sort\u003ddisplayName\u0026since\u003d2018-09-12\u0026until\u003d2018-11-06\u0026timeframe\u003dday\u0026reverse\u003dfalse\u0026repoSort\u003dtrue[RepoSense]]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "*** Managed releases `v1.1` - `v1.4` (4 releases) on GitHub"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "*** Set up Travis and AppVeyor badge for tracking of project build. (Pull request https://github.com/CS2103-AY1819S1-W16-3/main/commit/e5ee2bc09478cd85f5d867e9c4b1f6fc1a5a710d[#49])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "*** Fixed bugs arising from modification of the GUI. (Pull request https://github.com/CS2103-AY1819S1-W16-3/main/pull/183[#183])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "*** Modified README, AboutUs and ContactUs to match project specifications and team information. (Pull request https://github.com/CS2103-AY1819S1-W16-3/main/pull/36[#36])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "*** Modified build.gradle to reflect our project and removed elements of AddressBook-Level4 from the documentation website. (Pull request https://github.com/CS2103-AY1819S1-W16-3/main/pull/150[#150], https://github.com/CS2103-AY1819S1-W16-3/main/pull/153/commits[#153])"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "*** Reviewed pull requests (with non-trivial review comments)."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "(Pull request https://github.com/CS2103-AY1819S1-W16-3/main/pull/128[#128])"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "*** Reviewed and addressed raised issues. (Issue https://github.com/CS2103-AY1819S1-W16-3/main/issues/170[#170], https://github.com/CS2103-AY1819S1-W16-3/main/issues/174[#174])"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "include::../UserGuide.adoc[tag\u003dfind]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dfindcommand]"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 62,
      "GaryGohYP": 3
    }
  },
  {
    "path": "docs/team/tristonpang.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "\u003d Triston Pang Erh Syen - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "\u003d\u003d PROJECT: One Life"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "---"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "\u003d\u003d\u003d Overview"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "This portfolio documents the features and enhancements that I have made to the project and the contributions I have made to"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "the User and Developer guide."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "One Life is a desktop medical database application used for storing and displaying data related to patients and doctors."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "The project was developed as part of the requirements for the CS2103T (Software Engineering) module."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "One Life aims to be a simplified, non-complex system that is responsive and easy to use, so as to increase efficiency in the processes of medical staff and to"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "reduce the amount of human errors made in the medical field."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "The user interacts with One Life using a Command Line Interface (CLI), and it has a Graphical User Interface (GUI) created with JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "\u003d\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "* *Major enhancement*: added *the intuitive command prompt feature*"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "** What it does: intuitively guides and instructs the user to enter the correct inputs into the"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "required fields of a command"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "** Justification: This feature improves the product significantly because new or less tech-saavy users are able to"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "easily use the product. The step-by-step walkthrough of commands by the intuitive command prompt also simplifies the"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "typing of commands and can potentially reduce human error."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "** Highlights: This enhancement involves all commands that take in one or more arguments."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "The implementation of the enhancement required classes that could keep track of arguments and have different prompting"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "behaviours depending of the type of command to be executed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "* *Minor enhancement*: added command box clear ability and cancellation of intuitive command ability on `ESC` key press."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "* *Code contributed*: [https://github.com/CS2103-AY1819S1-W16-3/main/commits?author\u003dtristonpang[Functional code]] [https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dtristonpang\u0026sort\u003ddisplayName\u0026since\u003d2018-09-12\u0026until\u003d2018-11-06\u0026timeframe\u003dday\u0026reverse\u003dfalse\u0026repoSort\u003dtrue[RepoSense]]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "*** Managed releases `v1.1` - `v1.4` (4 releases) on GitHub"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "*** Tagged releases, compiled binary (JAR) files and published releases on GitHub"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "*** Updated class diagram for Model component: https://github.com/CS2103-AY1819S1-W16-3/main/pull/144/commits/2b05e6cb5a4e3b9cf8164184bb474b79fc6d3531[#144]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "*** Reviewed PRs of other team members: https://github.com/CS2103-AY1819S1-W16-3/main/pull/54#issuecomment-428477267[#54]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "include::../UserGuide.adoc[tag\u003dintuitivecommandprompt]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dintuitivecommandprompt]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tristonpang": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAddressBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing One Life Application ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample One Life database\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty database\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty database\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        logger.info(\"Starting One Life application \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping One Life Application ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 6,
      "-": 202
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private String appTitle \u003d \"One Life App\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAppTitle() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return appTitle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAppTitle(String appTitle) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appTitle \u003d appTitle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(appTitle, o.appTitle)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"App title : \" + appTitle);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nCurrent log level : \" + logLevel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GaryGohYP": 1,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_PATIENT_FORMAT \u003d \"Invalid command format for adding patient! \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + \"\\n%1$s\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_DOCTOR_FORMAT \u003d \"Invalid command format for adding doctor! \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + \"\\n%1$s\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String MESSAGE_INVALID_ROLE \u003d \"Invalid format for role\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_CHOSEN \u003d \"Invalid person chosen. Person chosen is not a patient\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 6,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/DatabaseChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * Indicates that the active database has changed."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class DatabaseChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private String activeRole;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public DatabaseChangedEvent(String activeRole) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.activeRole \u003d activeRole.toUpperCase();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return \"Database has been switched: \" + activeRole;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/PersonChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "/** Indicates the person in the model has changed */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class PersonChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public final Person editedPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public final Person originalPerson;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public PersonChangedEvent(Person originalPerson, Person editedPerson) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.originalPerson \u003d originalPerson;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.editedPerson \u003d editedPerson;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return \"Person data modified: \" + editedPerson;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/DisplayPanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.model.person.DisplayableAttribute;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": " * Represents a selection change in the Display Panel"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "public class DisplayPanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private final DisplayableAttribute newSelection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public DisplayPanelSelectionChangedEvent(DisplayableAttribute newSelection) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public DisplayableAttribute getNewSelection() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return newSelection;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "GaryGohYP": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code query}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "     *   Ignores case, will match as long as the argument is contained within the {@code Person} parameters."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d true // ABc def contains AB"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "     *       containsWordIgnoreCase(\"aaa BBB\", \"a B\") \u003d\u003d true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "     * @param query cannot be null, cannot be empty"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "    public static boolean containsQueryIgnoreCase(String sentence, String query) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        requireNonNull(query);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        String preppedQuery \u003d query.trim();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        checkArgument(!preppedQuery.isEmpty(), \"Query parameter cannot be empty\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        checkArgument(preppedQuery.split(\"\\\\s+\").length !\u003d 0, \"Query parameter should not be null\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        return sentence.toLowerCase().contains(preppedQuery.toLowerCase());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 20,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    ListElementPointer getHistorySnapshot();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Cancels the current command. If an intuitive command is currently executing, exit from the command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Otherwise, it clears the command box text field."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @return a String feedback message that tells the user what has been cancelled"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    String cancelCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tristonpang": 8,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String MESSAGE_NON_INTUITIVE_CANCELLATION \u003d \"There is currently \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"no intuitive command that is executing. Command box cleared.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String MESSAGE_INTUITIVE_CANCELLATION \u003d \"Intuitive command cancelled.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            CommandResult result \u003d command.execute(model, history);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            //if after intuitive input, all inputs have been received, parse with full arguments"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            if (!model.isIntuitiveMode() \u0026\u0026 model.areIntuitiveArgsAvailable()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                //tell AddressBookParser that the intuitive command has completed"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                addressBookParser.exitIntuitiveMode();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                String intuitiveArguments \u003d model.retrieveIntuitiveArguments();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                logger.fine(\"Retrieved Argument String: \" + intuitiveArguments);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                Command intuitiveCompletedCommand \u003d addressBookParser.parseCommand(intuitiveArguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                return intuitiveCompletedCommand.execute(model, history);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public String cancelCommand() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        if (!model.isIntuitiveMode()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return MESSAGE_NON_INTUITIVE_CANCELLATION;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        addressBookParser.exitIntuitiveMode();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        model.cancelIntuitiveCommand();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return MESSAGE_INTUITIVE_CANCELLATION;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tristonpang": 28,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL_DEPARTMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String COMMON_MESSAGE \u003d COMMAND_WORD + \": Adds a person to the database. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + PREFIX_ROLE + \"ROLE \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + PREFIX_NRIC + \"NRIC \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String USAGE_EXAMPLE \u003d \"Example: \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + PREFIX_ROLE + \"\u003cROLE\u003e \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + PREFIX_NRIC + \"S1234567A \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + PREFIX_TAG + \"diabetic \";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String USAGE_DOCTOR_EXAMPLE \u003d USAGE_EXAMPLE.replaceFirst(\"\u003cROLE\u003e\", \"Doctor\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + PREFIX_MEDICAL_DEPARTMENT + \"Oncology\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String MESSAGE_PATIENT_USAGE \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            COMMON_MESSAGE.replaceFirst(\"person\", \"patient\") + USAGE_EXAMPLE.replaceFirst(\"\u003cROLE\u003e\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    \"Patient\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String MESSAGE_DOCTOR_USAGE \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            COMMON_MESSAGE.replaceFirst(\"person\", \"doctor\") + USAGE_DOCTOR_EXAMPLE;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String MESSAGE_GENERAL_USAGE \u003d MESSAGE_PATIENT_USAGE.replaceFirst(\"patient\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            \"patient/doctor\") + \"\\n\" + USAGE_DOCTOR_EXAMPLE;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 24,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AvailCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.AppointmentManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class AvailCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"avail\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all doctors available at: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String MESSAGE_INVALID_TIME_INPUT \u003d \"Invalid time period. You need to specify both start and\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + \" end time\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists all doctors available at indicated time / \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + \"current datetime (as per default). \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE]\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + \"[\" + PREFIX_START_TIME + \"START TIME]\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + \"[\" + PREFIX_END_TIME + \"END TIME]\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + COMMAND_WORD + \"\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + PREFIX_DATE + \"24.11.2019\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + PREFIX_DATE + \"24.11.2019 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + PREFIX_START_TIME + \"1200 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + PREFIX_END_TIME + \"1300\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String MESSAGE_INVALID_DATABASE \u003d \"You are currently in the patients\u0027 database. Switch over \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + \"to view the doctor\u0027s database before using this command\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String PATIENT_KEYWORD \u003d \"Patient\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private Time startTime;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private Time endTime;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Creates an AvailCommand base on given datetime parameters."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * If no {@code endTime} is given, it will check the doctor\u0027s availability base on that instant of {@code starttime}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public AvailCommand(Date date, Time startTime, Time endTime) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        requireAllNonNull(date, startTime);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (endTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            this.endTime \u003d startTime;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (model.getCurrentDatabase().equalsIgnoreCase(PATIENT_KEYWORD)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_DATABASE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Predicate\u003cPerson\u003e filterDoctorsOnly \u003d person -\u003e person instanceof Doctor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Predicate\u003cPerson\u003e filterAvailDoctor;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (endTime !\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            filterAvailDoctor \u003d doctor -\u003e !AppointmentManager.isAnyAppointmentOngoing(doctor.getAppointmentList(),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    date, startTime, endTime);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            filterAvailDoctor \u003d doctor -\u003e !AppointmentManager.isAnyAppointmentOngoing(doctor.getAppointmentList(),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    date, startTime, endTime);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        model.updateFilteredPersonList(filterDoctorsOnly.and(filterAvailDoctor));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, date + \" \" + startTime + \" to \" + endTime));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                || (other instanceof AvailCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \u0026\u0026 date.equals(((AvailCommand) other).date))"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \u0026\u0026 startTime.equals(((AvailCommand) other).startTime)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \u0026\u0026 endTime.equals(((AvailCommand) other).endTime);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 100
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Active database has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        model.clearActiveDatabase();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 2,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearallCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class ClearallCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clearall\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entire database has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        model.resetData(new AddressBook());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.patient.MedicalRecord;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.person.AppointmentManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (personToDelete instanceof Patient) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            for (Appointment appointment : personToDelete.getAppointmentList()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                Nric doctorNric \u003d appointment.getDoctorNric();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                Person affectedPersonToEdit \u003d model.getPerson(doctorNric).get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                ArrayList\u003cAppointment\u003e affectedAppointmentList \u003d new ArrayList\u003c\u003e(affectedPersonToEdit"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                        .getAppointmentList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                affectedAppointmentList \u003d AppointmentManager"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                        .removeAppointmentsOfPatient(personToDelete.getNric(), affectedAppointmentList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                Person affectedEditedPerson \u003d new Doctor("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                        affectedPersonToEdit.getName(), affectedPersonToEdit.getNric(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                        affectedPersonToEdit.getPhone(), affectedPersonToEdit.getEmail(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                        affectedPersonToEdit.getAddress(), affectedPersonToEdit.getTags(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                        affectedAppointmentList, ((Doctor) affectedPersonToEdit).getMedicalDepartment());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                model.updatePerson(affectedPersonToEdit, affectedEditedPerson);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        } else if (personToDelete instanceof Doctor) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            for (Appointment appointment : personToDelete.getAppointmentList()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                Nric patientNric \u003d appointment.getPatientNric();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                Person affectedPersonToEdit \u003d model.getPerson(patientNric).get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                ArrayList\u003cAppointment\u003e affectedAppointmentList \u003d new ArrayList\u003c\u003e(affectedPersonToEdit"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                        .getAppointmentList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                ArrayList\u003cMedicalRecord\u003e newMedicalRecordLibrary \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                        new ArrayList\u003c\u003e(((Patient) affectedPersonToEdit).getMedicalRecordLibrary());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                affectedAppointmentList \u003d AppointmentManager"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                        .removeAppointmentsOfDoctor(personToDelete.getNric(), affectedAppointmentList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                Person affectedEditedPerson \u003d new Patient("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                        affectedPersonToEdit.getName(), affectedPersonToEdit.getNric(),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                        affectedPersonToEdit.getPhone(), affectedPersonToEdit.getEmail(),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                        affectedPersonToEdit.getAddress(), affectedPersonToEdit.getTags(),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                        affectedAppointmentList, newMedicalRecordLibrary);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                model.updatePerson(affectedPersonToEdit, affectedEditedPerson);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 55,
      "nelvintan": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.doctor.MedicalDepartment;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.MedicalRecord;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.person.AppointmentManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String MESSAGE_ROLE_CONFLICT \u003d \"Attempting to edit invalid fields for: \";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (hasRoleConflict(personToEdit, editPersonDescriptor)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new CommandException(MESSAGE_ROLE_CONFLICT + personToEdit.getClass().getSimpleName().toUpperCase());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor, model);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                                             Model model) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Nric updatedNric \u003d editPersonDescriptor.getNric().orElse(personToEdit.getNric());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // edit command does not allow editing remarks"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (personToEdit instanceof Patient) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            // edit command does not allow editing medical records"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            MedicalRecord updatedMedicalRecord \u003d ((Patient) personToEdit).getMedicalRecord();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            // reflecting the change in appointments of patient"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            ArrayList\u003cAppointment\u003e appointmentList \u003d new ArrayList\u003c\u003e(personToEdit.getAppointmentList());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            ArrayList\u003cAppointment\u003e updatedAppointmentList \u003d AppointmentManager"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    .changePatientNameAndNric(personToEdit.getName(),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    personToEdit.getNric(), updatedName, updatedNric, appointmentList);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            // reflecting the change in appointments of doctors who have an appointment with the patient"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            for (Appointment appt : updatedAppointmentList) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                Person doctorToEdit \u003d model.getPerson(appt.getDoctorNric()).get();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                ArrayList\u003cAppointment\u003e doctorAppointmentList \u003d"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                        new ArrayList\u003c\u003e(doctorToEdit.getAppointmentList());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                ArrayList\u003cAppointment\u003e updatedDoctorAppointmentList \u003d"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                        AppointmentManager.changePatientNameAndNric(personToEdit.getName(),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                        personToEdit.getNric(), updatedName, updatedNric, doctorAppointmentList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                Person editedDoctor \u003d new Doctor(doctorToEdit.getName(),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                        doctorToEdit.getNric(), doctorToEdit.getPhone(),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                        doctorToEdit.getEmail(), doctorToEdit.getAddress(), doctorToEdit.getTags(),"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                        updatedDoctorAppointmentList, ((Doctor) doctorToEdit).getMedicalDepartment());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                model.updatePerson(doctorToEdit, editedDoctor);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return new Patient(updatedName, updatedNric, updatedPhone, updatedEmail, updatedAddress, updatedTags,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    updatedAppointmentList, updatedMedicalRecord);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            // Person must be either Patient or Doctor."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            assert personToEdit instanceof Doctor; // Person must be either Patient or Doctor."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            MedicalDepartment updateMedicalDepartment \u003d"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    editPersonDescriptor.getMedicalDepartment().orElse(((Doctor) personToEdit).getMedicalDepartment());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            // reflecting the change in appointments of doctor"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            ArrayList\u003cAppointment\u003e appointmentList \u003d new ArrayList\u003c\u003e(personToEdit.getAppointmentList());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            ArrayList\u003cAppointment\u003e updatedAppointmentList \u003d AppointmentManager"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    .changeDoctorNameAndNric(personToEdit.getName(),"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    personToEdit.getNric(), updatedName, updatedNric, appointmentList);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            // reflecting the change in appointments of patients who have an appointment with the doctor"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            for (Appointment appt : updatedAppointmentList) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                Person patientToEdit \u003d model.getPerson(appt.getPatientNric()).get();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                ArrayList\u003cAppointment\u003e patientAppointmentList \u003d"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                        new ArrayList\u003c\u003e(patientToEdit.getAppointmentList());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                ArrayList\u003cAppointment\u003e updatedDoctorAppointmentList \u003d"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                        AppointmentManager.changeDoctorNameAndNric(personToEdit.getName(),"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                                personToEdit.getNric(), updatedName, updatedNric, patientAppointmentList);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                Person editedPatient \u003d new Patient(patientToEdit.getName(),"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                        patientToEdit.getNric(), patientToEdit.getPhone(),"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                        patientToEdit.getEmail(), patientToEdit.getAddress(), patientToEdit.getTags(),"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                        updatedDoctorAppointmentList, ((Patient) patientToEdit).getMedicalRecordLibrary());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                model.updatePerson(patientToEdit, editedPatient);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return new Doctor(updatedName, updatedNric, updatedPhone, updatedEmail, updatedAddress, updatedTags,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    updatedAppointmentList, updateMedicalDepartment);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * Checks if the given person has valid arguments. If the person is a patient, checks if the Medical"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * Department field is present. Else if the person is a doctor, checks if the NRIC field is present."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * @param personToEdit the person to edit."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static boolean hasRoleConflict(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (personToEdit instanceof Patient) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return editPersonDescriptor.getMedicalDepartment().isPresent();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            assert personToEdit instanceof Doctor;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return editPersonDescriptor.getNric().isPresent();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        private Nric nric;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        private MedicalDepartment medicalDepartment;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            setMedicalDepartment(toCopy.medicalDepartment);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            setNric(toCopy.nric);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags, nric, medicalDepartment);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        public void setNric(Nric nric) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            this.nric \u003d nric;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        public Optional\u003cNric\u003e getNric() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return Optional.ofNullable(nric);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        public void setMedicalDepartment(MedicalDepartment medicalDepartment) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            this.medicalDepartment \u003d medicalDepartment;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        public Optional\u003cMedicalDepartment\u003e getMedicalDepartment() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return Optional.ofNullable(medicalDepartment);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 56,
      "GaryGohYP": 6,
      "-": 225,
      "nelvintan": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import seedu.address.model.person.PersonContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose attributes contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "            + \"The following prefixes are available for specification: Name: n/, NRIC: ic/, Phone: p/, \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "            + \"Address: a/, Role: r/, Tag: t/, Medical Department: md/, Medical Record: mr/.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "            + \"Ensure that the prefixes entered adhere to the format above.\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "            + \"If no prefixes are given, all available attributes will searched for the specified keywords.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "            + \"Parameters: [PREFIX]KEYWORD [NEXT_PREFIX][NEXT_KEYWORD]\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" n/alex r/doctor\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "    private final PersonContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "    public FindCommand(PersonContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 10,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/IntuitiveEntryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tristonpang"
        },
        "content": " * Signals that the user has entered an input or argument for a specified field during the execution of"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tristonpang"
        },
        "content": " * an intuitive command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tristonpang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "public class IntuitiveEntryCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final String GO_BACK_COMMAND \u003d \"/bk\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final String GO_BACK_INSTRUCTION \u003d \"\\n(Type %1$s to go back)\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final String INPUT_ECHO \u003d \"You entered: %1$s \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public IntuitiveEntryCommand(String userInput) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        this.input \u003d userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory commandHistory) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        String nextInstruction \u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        if (input.equals(GO_BACK_COMMAND)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            nextInstruction \u003d model.removeIntuitiveEntry();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            //model -\u003e save input as argument in list (IntuitivePromptManager)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            //get correct command type and argument index from IntuitivePromptManager (in model)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            nextInstruction \u003d model.addIntuitiveEntry(input);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        boolean isFirstInput \u003d !model.areIntuitiveArgsAvailable();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        if (input.equals(\"\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return new CommandResult(nextInstruction);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        //return correct instruction to display in CommandResult"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        if (isFirstInput) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return new CommandResult(String.format(INPUT_ECHO, this.input) + nextInstruction);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return new CommandResult(String.format(INPUT_ECHO, this.input) + nextInstruction"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                + String.format(GO_BACK_INSTRUCTION, GO_BACK_COMMAND));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tristonpang": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * Lists all persons in the active database to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ScheduleCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DOCTOR_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DOCTOR_NRIC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PATIENT_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PATIENT_NRIC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.MedicalRecord;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * Updates the schedule of a person in the addressbook."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "public class ScheduleCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"schedule\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Schedules appointment for the person identified \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + \"by the index number used in the last person listing.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + PREFIX_START_TIME + \"START_TIME \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + PREFIX_END_TIME + \"END_TIME \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + PREFIX_DOCTOR_NAME + \"DOCTOR_NAME \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + PREFIX_DOCTOR_NRIC + \"DOCTOR_MEDICAL_DEPARTMENT \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + PREFIX_PATIENT_NAME + \"PATIENT_NAME \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + PREFIX_PATIENT_NRIC + \"PATIENT_NRIC\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + PREFIX_DATE + \"23.11.2018 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + PREFIX_START_TIME + \"1300 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + PREFIX_END_TIME + \"1400 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + PREFIX_DOCTOR_NAME + \"Jack \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + PREFIX_DOCTOR_NRIC + \"S1234567B \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + PREFIX_PATIENT_NAME + \"John Doe \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + PREFIX_PATIENT_NRIC + \"S1234567A \";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static final String MESSAGE_SCHEDULE_APPOINTMENT_SUCCESS \u003d \"Scheduled appointment to Person: %1$s\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static final String MESSAGE_SCHEDULE_APPOINTMENT_FAILURE_INCORRECT_PARTS_NUMBER \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            \"Failed to schedule appointment to Person.\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + \"Number of parts of the appointment is wrong.\\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static final String MESSAGE_SCHEDULE_APPOINTMENT_FAILURE_INCORRECT_START_AND_END_TIME \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            \"Failed to schedule appointment to Person.\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + \"Start time should come before end time!\\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static final String MESSAGE_SCHEDULE_APPOINTMENT_FAILURE_INCORRECT_DOCTOR \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            \"Failed to schedule appointment to Person.\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + \"Doctor details entered are wrong.\\n\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public static final String MESSAGE_SCHEDULE_APPOINTMENT_FAILURE_INCORRECT_PATIENT \u003d \"Failed to schedule \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            + \"appointment to Person.\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + \"Patient details entered are wrong.\\n\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static final String MESSAGE_DELETE_APPOINTMENT_SUCCESS \u003d \"Removed appointment from Person: %1$s\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static final String MESSAGE_SCHEDULE_APPOINTMENT_FAILURE_CLASH \u003d \"There is a clash of appointments. \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + \"Please choose another slot.\\n\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private final Appointment appointment;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param index of the person in the filtered person list to edit the appointment"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param appointment of the person to be updated to"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public ScheduleCommand(Index index, Appointment appointment) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        requireAllNonNull(index, appointment);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.appointment \u003d appointment;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        conductPreliminaryChecks(model, lastShownList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Person editedPerson;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Person secondPersonToEdit;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Person secondEditedPerson;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // check if current person selected matches the details entered from command prompt"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (personToEdit instanceof Doctor \u0026\u0026 !appointment.hasValidDoctor(personToEdit)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            throw new CommandException(MESSAGE_SCHEDULE_APPOINTMENT_FAILURE_INCORRECT_DOCTOR);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // check if current person selected matches the details entered from command prompt"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (personToEdit instanceof Patient \u0026\u0026 !appointment.hasValidPatient(personToEdit)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            throw new CommandException(MESSAGE_SCHEDULE_APPOINTMENT_FAILURE_INCORRECT_PATIENT);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // check for clash of appointments for selected person"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (personToEdit.hasClash(appointment)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            throw new CommandException(MESSAGE_SCHEDULE_APPOINTMENT_FAILURE_CLASH);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        ArrayList\u003cAppointment\u003e appointmentList \u003d new ArrayList\u003c\u003e(personToEdit.getAppointmentList());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointmentList.add(appointment);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (personToEdit instanceof Doctor) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            editedPerson \u003d new Doctor(personToEdit.getName(), personToEdit.getNric(),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    personToEdit.getAddress(), personToEdit.getTags(),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    appointmentList, ((Doctor) personToEdit).getMedicalDepartment());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            secondPersonToEdit \u003d model.getPerson(appointment.getPatientNric()).get();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            // check for clash of appointments for other person"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            if (secondPersonToEdit.hasClash(appointment)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                throw new CommandException(MESSAGE_SCHEDULE_APPOINTMENT_FAILURE_CLASH);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            ArrayList\u003cAppointment\u003e secondAppointmentList \u003d new ArrayList\u003c\u003e(secondPersonToEdit.getAppointmentList());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            secondAppointmentList.add(appointment);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            ArrayList\u003cMedicalRecord\u003e newMedicalRecordLibrary \u003d"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new ArrayList\u003c\u003e(((Patient) secondPersonToEdit).getMedicalRecordLibrary());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            secondEditedPerson \u003d new Patient(secondPersonToEdit.getName(), secondPersonToEdit.getNric(),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    secondPersonToEdit.getPhone(), secondPersonToEdit.getEmail(),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    secondPersonToEdit.getAddress(), secondPersonToEdit.getTags(),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    secondAppointmentList, newMedicalRecordLibrary);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            assert personToEdit instanceof Patient;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            ArrayList\u003cMedicalRecord\u003e newMedicalRecordLibrary \u003d"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new ArrayList\u003c\u003e(((Patient) personToEdit).getMedicalRecordLibrary());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            editedPerson \u003d new Patient(personToEdit.getName(),"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    personToEdit.getNric(), personToEdit.getPhone(),"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    personToEdit.getEmail(), personToEdit.getAddress(),"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    personToEdit.getTags(), appointmentList, newMedicalRecordLibrary);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            secondPersonToEdit \u003d model.getPerson(appointment.getDoctorNric()).get();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            // check for clash of appointments for other person"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            if (secondPersonToEdit.hasClash(appointment)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                throw new CommandException(MESSAGE_SCHEDULE_APPOINTMENT_FAILURE_CLASH);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            ArrayList\u003cAppointment\u003e secondAppointmentList \u003d new ArrayList\u003c\u003e(secondPersonToEdit.getAppointmentList());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            secondAppointmentList.add(appointment);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            secondEditedPerson \u003d new Doctor(secondPersonToEdit.getName(), secondPersonToEdit.getNric(),"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    secondPersonToEdit.getPhone(), secondPersonToEdit.getEmail(),"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    secondPersonToEdit.getAddress(), secondPersonToEdit.getTags(),"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    secondAppointmentList, ((Doctor) secondPersonToEdit).getMedicalDepartment());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // update both of the affected persons"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        model.updatePerson(secondEditedPerson, secondEditedPerson);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        new SelectCommand(index).execute(model, history);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Helper method for execute to conduct the initial checks for scheduling an appointment."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param model which the command should operate on."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param lastShownList where indexed person will be drawn from."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private void conductPreliminaryChecks(Model model, List\u003cPerson\u003e lastShownList) throws CommandException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // check if the index is correct"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (!appointment.isOfCorrectNumberOfParts()) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            throw new CommandException(MESSAGE_SCHEDULE_APPOINTMENT_FAILURE_INCORRECT_PARTS_NUMBER);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // check if such a patient exists in the datebase using the patient\u0027s name and nric"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (!model.hasSuchPatient(appointment.getPatientName(), appointment.getPatientNric())) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            throw new CommandException(MESSAGE_SCHEDULE_APPOINTMENT_FAILURE_INCORRECT_PATIENT);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // check if such a doctor exists in the database using the doctor\u0027s name and nric"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (!model.hasSuchDoctor(appointment.getDoctorName(), appointment.getDoctorNric())) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            throw new CommandException(MESSAGE_SCHEDULE_APPOINTMENT_FAILURE_INCORRECT_DOCTOR);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // check if the start time comes before the end time"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (!appointment.hasValidStartandEndTime()) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            throw new CommandException(MESSAGE_SCHEDULE_APPOINTMENT_FAILURE_INCORRECT_START_AND_END_TIME);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Generates a command execution success message based on whether the appointment is added to or removed from"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String message \u003d !appointment.value.isEmpty() ? MESSAGE_SCHEDULE_APPOINTMENT_SUCCESS"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                : MESSAGE_DELETE_APPOINTMENT_SUCCESS;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (!(other instanceof ScheduleCommand)) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ScheduleCommand e \u003d (ScheduleCommand) other;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                \u0026\u0026 appointment.equals(e.appointment);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 21,
      "GaryGohYP": 2,
      "nelvintan": 210
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SwitchCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * Switches from one database to another (i.e. patient or doctor database or both)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class SwitchCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"switch\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Switches the database to indicated role.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String MESSAGE_SUCCESS_FILTERED_LIST \u003d \"Load database of: \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Switches the database.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + \"Example : \\n\" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + PREFIX_ROLE + \" patient\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + COMMAND_WORD + \" \" + PREFIX_ROLE + \" doctor\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + COMMAND_WORD + \" \" + PREFIX_ROLE + \"all\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private Predicate\u003cPerson\u003e filter;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private String role;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public SwitchCommand(Predicate\u003cPerson\u003e predicate, String role) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.filter \u003d predicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.role \u003d role.toUpperCase();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        model.changeDatabase(filter, role);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        new ListCommand().execute(model, history);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS_FILTERED_LIST + this.role + \"\\n\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UpdateCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DIAGNOSIS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TREATMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.MedicalRecord;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * Updates medical record of a patient in the addressbook."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class UpdateCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"update\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + \": updates the medical record of the person identified by \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + \"the index number used in the last person listing. \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            + \"Medical record library of the patient will be the updated with the given input.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            + PREFIX_DIAGNOSIS + \"DIAGNOSIS \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            + PREFIX_TREATMENT + \"TREATMENT \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            + \"[\" + PREFIX_COMMENT + \"COMMENTS]\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            + PREFIX_DATE + \"22.11.2018 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            + PREFIX_DIAGNOSIS + \"flu \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            + PREFIX_TREATMENT + \"tamiflu\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String MESSAGE_UPDATE_MEDICAL_RECORD_SUCCESS \u003d \"Updated medical record of Person: %1$s\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String MESSAGE_DELETE_MEDICAL_RECORD_SUCCESS \u003d \"Medical record deleted from Person: %1$s\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public static final String MESSAGE_UPDATE_MEDICAL_RECORD_FAILURE \u003d \"Failed to update medical record \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            + \"library to Person.\\n\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private final MedicalRecord medicalRecord;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * @param medicalRecord medical record of the person to update"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public UpdateCommand(Index index, MedicalRecord medicalRecord) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        requireNonNull(medicalRecord);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.medicalRecord \u003d medicalRecord;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (!(lastShownList.get(index.getZeroBased()) instanceof Patient)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_CHOSEN);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (!medicalRecord.isValidNewMedicalRecord()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            throw new CommandException(MESSAGE_UPDATE_MEDICAL_RECORD_FAILURE + medicalRecord.getInvalidReason());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient personToEdit \u003d (Patient) lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        ArrayList\u003cMedicalRecord\u003e editedMedicalRecordLibrary \u003d new ArrayList\u003c\u003e(personToEdit.getMedicalRecordLibrary());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        editedMedicalRecordLibrary.add(0, medicalRecord);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient editedPerson \u003d new Patient(personToEdit.getName(), personToEdit.getNric(),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                personToEdit.getPhone(), personToEdit.getEmail(), personToEdit.getAddress(),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                personToEdit.getTags(), personToEdit.getAppointmentList(), editedMedicalRecordLibrary);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            model.commitAddressBook();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        } catch (DuplicatePersonException dpe) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new AssertionError(\"The target person cannot be missing\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        new SelectCommand(index).execute(model, history);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Returns a success message when updated a medical record."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @param personToEdit The person who\u0027s medical record is changed."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @return A success message."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (!medicalRecord.value.isEmpty()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return String.format(MESSAGE_UPDATE_MEDICAL_RECORD_SUCCESS, personToEdit);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return String.format(MESSAGE_DELETE_MEDICAL_RECORD_SUCCESS, personToEdit);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (!(other instanceof UpdateCommand)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        UpdateCommand e \u003d (UpdateCommand) other;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \u0026\u0026 medicalRecord.equals(e.medicalRecord);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 92,
      "GaryGohYP": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_DOCTOR_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL_DEPARTMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.doctor.MedicalDepartment;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Role;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_ROLE, PREFIX_NRIC, PREFIX_NAME,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG, PREFIX_MEDICAL_DEPARTMENT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // Ensures information for common prefixes are entered."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ROLE, PREFIX_NAME, PREFIX_NRIC, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                PREFIX_ADDRESS) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_GENERAL_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (!isRoleOf(Role.DOCTOR, argMultimap) \u0026\u0026 !isRoleOf(Role.PATIENT, argMultimap)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new ParseException(String.format(Role.MESSAGE_ROLE_CONSTRAINTS, AddCommand.MESSAGE_GENERAL_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // Ensures Medical Department field is not empty when adding a Doctor."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (isRoleOf(Role.DOCTOR, argMultimap) \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_MEDICAL_DEPARTMENT)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_DOCTOR_FORMAT,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    AddCommand.MESSAGE_DOCTOR_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Nric nric \u003d ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Person person \u003d new Person(name, nric, phone, email, address, tagList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (isRoleOf(Role.PATIENT, argMultimap)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            person \u003d new Patient(name, nric, phone, email, address, tagList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        } else if (isRoleOf(Role.DOCTOR, argMultimap)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            MedicalDepartment medicalDepartment \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    ParserUtil.parseMedicalDepartment(argMultimap.getValue((PREFIX_MEDICAL_DEPARTMENT)).get());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            person \u003d new Doctor(name, nric, phone, email, address, tagList, medicalDepartment);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Returns true if the role in args matches with specified the Enum role."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static boolean isRoleOf(Enum role, ArgumentMultimap argMultiMap) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String person \u003d argMultiMap.getValue(PREFIX_ROLE).get();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return person !\u003d null \u0026\u0026 person.equalsIgnoreCase(role.toString());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 41,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.logic.commands.AvailCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.logic.commands.ClearallCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.logic.commands.IntuitiveEntryCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.logic.commands.SwitchCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Keeps track of whether the system is currently executing an Intuitive Prompt Command"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static boolean isIntuitiveMode \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        //detect if in intuitive mode"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        if (isIntuitiveMode) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return new IntuitiveEntryCommand(userInput.trim());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            //detect if user wants to activate intuitive mode/command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            if (arguments.isEmpty()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                return triggerIntuitiveMode(userInput);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            if (arguments.isEmpty()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                return triggerIntuitiveMode(userInput);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            if (arguments.isEmpty()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                return triggerIntuitiveMode(userInput);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        case ClearallCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return new ClearallCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        case AvailCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return new AvailCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            if (arguments.isEmpty()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                return triggerIntuitiveMode(userInput);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        case ScheduleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            if (arguments.isEmpty()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                return triggerIntuitiveMode(userInput);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return new ScheduleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        case SwitchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return new SwitchCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        case UpdateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            if (arguments.isEmpty()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                return triggerIntuitiveMode(userInput);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            return new UpdateCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private Command triggerIntuitiveMode(String userInput) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        isIntuitiveMode \u003d true;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return new IntuitiveEntryCommand(userInput);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public void exitIntuitiveMode() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        isIntuitiveMode \u003d false;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tristonpang": 42,
      "guestuser0123": 12,
      "GaryGohYP": 4,
      "-": 92,
      "nelvintan": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AvailCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.logic.commands.AvailCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * Parses input arguments and creates a new SwitchCommand object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class AvailCommandParser implements Parser\u003cAvailCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * and returns an ListCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * If there are no arguments, then return a regular ListCommand (unfiltered list)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Else, ensures that arguments conform to format and returns a filtered list of"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Doctors or Patients, as per specified."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public AvailCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Date date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Time startTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Time endTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_START_TIME, PREFIX_END_TIME, PREFIX_DATE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AvailCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (!isValidTimeInput(argMultimap, PREFIX_START_TIME, PREFIX_END_TIME)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new ParseException(String.format(AvailCommand.MESSAGE_INVALID_TIME_INPUT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    AvailCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (hasNoDateInput(argMultimap, PREFIX_DATE)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            date \u003d Date.getCurrentDate();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                throw new ParseException(pe.getMessage());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (hasNoTimeInput(argMultimap, PREFIX_START_TIME, PREFIX_END_TIME)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            startTime \u003d Time.getCurrentTime();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            endTime \u003d null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                startTime \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_START_TIME).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                endTime \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_END_TIME).get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                throw new ParseException(pe.getMessage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return new AvailCommand(date, startTime, endTime);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Returns true if the prefix contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static boolean isPrefixPresent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return argMultimap.getValue(prefix).isPresent();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Helper method to check that either both start time and end time prefix are present or absent."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static boolean isValidTimeInput(ArgumentMultimap argumentMultimap, Prefix startTime, Prefix endTime) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (isPrefixPresent(argumentMultimap, startTime) \u0026\u0026 isPrefixPresent(argumentMultimap, endTime)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        } else if (!isPrefixPresent(argumentMultimap, startTime) \u0026\u0026 !isPrefixPresent(argumentMultimap, endTime)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Helper method to check for the presence of Date prefix."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static boolean hasNoDateInput(ArgumentMultimap argumentMultimap, Prefix date) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return !isPrefixPresent(argumentMultimap, date);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Helper method to check for the presence of Time prefix."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static boolean hasNoTimeInput(ArgumentMultimap argumentMultimap, Prefix startTime, Prefix endTime) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return !isPrefixPresent(argumentMultimap, startTime) \u0026\u0026 !isPrefixPresent(argumentMultimap, endTime);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /* For general usage */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final Prefix PREFIX_ROLE \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final Prefix PREFIX_NRIC \u003d new Prefix(\"ic/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final Prefix PREFIX_MEDICAL_DEPARTMENT \u003d new Prefix(\"md/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /* For Appointments */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static final Prefix PREFIX_START_TIME \u003d new Prefix(\"st/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static final Prefix PREFIX_END_TIME \u003d new Prefix(\"et/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static final Prefix PREFIX_DOCTOR_NAME \u003d new Prefix(\"dn/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static final Prefix PREFIX_PATIENT_NAME \u003d new Prefix(\"pn/\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final Prefix PREFIX_DOCTOR_NRIC \u003d new Prefix(\"di/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final Prefix PREFIX_PATIENT_NRIC \u003d new Prefix(\"pi/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /* For Medical Records */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public static final Prefix PREFIX_MEDICAL_RECORD \u003d new Prefix(\"mr/\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public static final Prefix PREFIX_DIAGNOSIS \u003d new Prefix(\"dg/\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public static final Prefix PREFIX_TREATMENT \u003d new Prefix(\"tr/\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public static final Prefix PREFIX_COMMENT \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final Prefix PREFIX_GLOBAL \u003d new Prefix(\"gl/\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 13,
      "GaryGohYP": 4,
      "-": 15,
      "nelvintan": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL_DEPARTMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                        PREFIX_ADDRESS, PREFIX_TAG, PREFIX_MEDICAL_DEPARTMENT, PREFIX_NRIC);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NRIC).isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            editPersonDescriptor.setNric(ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MEDICAL_DEPARTMENT).isPresent()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            editPersonDescriptor.setMedicalDepartment(ParserUtil.parseMedicalDepartment(argMultimap"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    .getValue(PREFIX_MEDICAL_DEPARTMENT).get()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Returns true if the role in args matches with the Enum role."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static boolean isRoleOf(Enum role, ArgumentMultimap argMultiMap) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String person \u003d argMultiMap.getValue(PREFIX_ROLE).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (person !\u003d null \u0026\u0026 person.toUpperCase().equals(role.toString())) { // Input is case-insensitive."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 26,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GLOBAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL_DEPARTMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL_RECORD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import seedu.address.model.person.PersonContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "     * @param args is a non-empty String."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        final ArrayList\u003cPrefix\u003e prefixList \u003d new ArrayList\u003c\u003e(Arrays.asList(PREFIX_NAME, PREFIX_NRIC, PREFIX_PHONE,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_ROLE, PREFIX_TAG, PREFIX_MEDICAL_DEPARTMENT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                PREFIX_MEDICAL_RECORD));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        // Checks if any of the prefixes entered are invalid."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        List\u003cString\u003e allPrefixes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        Matcher m \u003d Pattern.compile(\"\\\\s\\\\w+/\").matcher(args);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        while (m.find()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "            allPrefixes.add(m.group().trim());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        for (String s : allPrefixes) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "            if (prefixList.stream().noneMatch(x -\u003e s.equals(x.toString()))) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, prefixList.toArray(new Prefix[0]));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        Map\u003cPrefix, List\u003cString\u003e\u003e personSearchKeywords \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        if (!argMultimap.getPreamble().equals(\"\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "            List\u003cString\u003e keywordList \u003d new ArrayList\u003c\u003e(Arrays.asList(argMultimap.getPreamble().split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "            personSearchKeywords.put(PREFIX_GLOBAL, keywordList);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        for (Prefix prefix : prefixList) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "            initialiseKeywordMap(argMultimap, personSearchKeywords, prefix);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        return new FindCommand(new PersonContainsKeywordsPredicate(personSearchKeywords));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "     * Private method for handling {@code Prefix} in the input argument."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "     * Maps each {@code Prefix} into a HashMap with their searched keywords."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "     * @param argMultimap Immutable HashMap of all given keywords for each {@code Prefix} mapped to {@code Prefix}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "     * @param personSearchKeywords HashMap of individual keywords in an ArrayList mapped to {@code Prefix}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "     * @param prefix {@code Prefix} corresponding to the keywords given."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "    private void initialiseKeywordMap(ArgumentMultimap argMultimap, Map\u003cPrefix, List\u003cString\u003e\u003e personSearchKeywords,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                                      Prefix prefix) throws ParseException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        if (argMultimap.getValue(prefix).isPresent()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "            List\u003cString\u003e keywordList \u003d new ArrayList\u003c\u003e(argMultimap.getAllValues(prefix));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "            if (keywordList.get(0).equals(\"\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "            personSearchKeywords.put(prefix, keywordList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 63,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.doctor.MedicalDepartment;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Role;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Parses a {@code String nric} into an {@code Nric}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @throws ParseException if the given {@code nric} is invalid."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static Nric parseNric(String nric) throws ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        requireNonNull(nric);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String trimmedNric \u003d nric.trim().toUpperCase();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            Nric.isValidNric(trimmedNric);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return new Nric(trimmedNric);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Parses a {@code String dept} into an {@code Medical Department}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @throws ParseException if the given {@code dept} is invalid."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static MedicalDepartment parseMedicalDepartment(String dept) throws ParseException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        requireNonNull(dept);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String trimmedDept \u003d dept.trim();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (!MedicalDepartment.isValidMedDept(trimmedDept)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new ParseException(MedicalDepartment.MESSAGE_DEPTNAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return new MedicalDepartment(trimmedDept);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Parses a {@code String role} into an {@code Role}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @throws ParseException if the given {@code role} is invalid."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static Role parseRole(String role) throws ParseException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        requireNonNull(role);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String trimmedRole \u003d role.trim().toUpperCase();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (!Role.isValidRole(trimmedRole)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new ParseException(Role.MESSAGE_ROLE_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return Role.valueOf(trimmedRole);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Parses a {@code String date} into an {@code Date}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static Date parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        Date value \u003d new Date(trimmedDate);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (!value.isValid()) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            throw new ParseException(value.getInvalidReason());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return new Date(trimmedDate);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Parses a {@code String time} into an {@code Time}."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @throws ParseException if the given {@code time} is invalid."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static Time parseTime(String time) throws ParseException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String trimmedTime \u003d time.trim();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        Time inputTime \u003d new Time(trimmedTime);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (!inputTime.isValidTime()) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            throw new ParseException(inputTime.getFailureReason());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return inputTime;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 77,
      "GaryGohYP": 7,
      "-": 124
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ScheduleCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DOCTOR_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DOCTOR_NRIC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PATIENT_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PATIENT_NRIC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nelvintan"
        },
        "content": " * Parses input arguments and creates a new {@code ScheduleCommand} object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nelvintan"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "public class ScheduleCommandParser implements Parser\u003cScheduleCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code ScheduleCommand}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * and returns a {@code ScheduleCommand} object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public ScheduleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DATE, PREFIX_START_TIME, PREFIX_END_TIME,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                        PREFIX_DOCTOR_NAME, PREFIX_DOCTOR_NRIC, PREFIX_PATIENT_NAME, PREFIX_PATIENT_NRIC);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // Ensures that index provided is correct."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // Ensures information for common prefixes are entered."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DATE, PREFIX_START_TIME, PREFIX_END_TIME,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                PREFIX_DOCTOR_NAME, PREFIX_DOCTOR_NRIC, PREFIX_PATIENT_NAME, PREFIX_PATIENT_NRIC)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Date date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Time startTime \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_START_TIME).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Time endTime \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_END_TIME).get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Name doctorName \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_DOCTOR_NAME).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Nric doctorNric \u003d ParserUtil.parseNric(argMultimap.getValue(PREFIX_DOCTOR_NRIC).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Name patientName \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_PATIENT_NAME).get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Nric patientNric \u003d ParserUtil.parseNric(argMultimap.getValue(PREFIX_PATIENT_NRIC).get());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return new ScheduleCommand(index, new Appointment(date, startTime, endTime, doctorName, doctorNric,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                patientName, patientNric));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 13,
      "nelvintan": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SwitchCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.logic.commands.SwitchCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Role;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * Parses input arguments and creates a new SwitchCommand object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class SwitchCommandParser implements Parser\u003cSwitchCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String LIST_EVERYTHING \u003d \"ALL\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * and returns an ListCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * If there are no arguments, then return a regular ListCommand (unfiltered list)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Else, ensures that arguments conform to format and returns a filtered list of"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Doctors or Patients, as per specified."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public SwitchCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ROLE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (!isPrefixPresent(argMultimap, PREFIX_ROLE) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    SwitchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (listAllPersons(argMultimap.getValue(PREFIX_ROLE).get())) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return new SwitchCommand(PREDICATE_SHOW_ALL_PERSONS, LIST_EVERYTHING);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            Role role \u003d ParserUtil.parseRole(argMultimap.getValue(PREFIX_ROLE).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return new SwitchCommand((person -\u003e person.getClass().getSimpleName().equalsIgnoreCase(role.toString())),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    role.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new ParseException(pe.getMessage() + \" or \u0027All\u0027 (case-insensitive)\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Returns true if the prefix contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static boolean isPrefixPresent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return argMultimap.getValue(prefix).isPresent();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Helper method to check if user wants to list all persons, regardless of role, base on user\u0027s command input."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static boolean listAllPersons(String args) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return trimmedArgs.equalsIgnoreCase(LIST_EVERYTHING);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UpdateCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DIAGNOSIS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TREATMENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.MedicalRecord;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * Parses input arguments and creates a new UpdateCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class UpdateCommandParser implements Parser\u003cUpdateCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UpdateCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * and returns an UpdateCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public UpdateCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DATE, PREFIX_DIAGNOSIS, PREFIX_TREATMENT, PREFIX_COMMENT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DATE, PREFIX_DIAGNOSIS,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                PREFIX_TREATMENT)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        String date \u003d argMultimap.getValue(PREFIX_DATE).get();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        String diagnosis \u003d argMultimap.getValue(PREFIX_DIAGNOSIS).get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        String treatment \u003d argMultimap.getValue(PREFIX_TREATMENT).get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        String comment \u003d \"\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COMMENT).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            comment \u003d argMultimap.getValue(PREFIX_COMMENT).get();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return new UpdateCommand(index, new MedicalRecord(date, diagnosis, treatment, comment));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 32,
      "GaryGohYP": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Returns true if there is such a person with the provided {@code name} and {@code nric}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public boolean hasSuchPerson(Name name, Nric nric) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        requireAllNonNull(name, nric);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return persons.hasSuchPerson(name, nric);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Returns true if there is such a patient with the provided {@code name} and {@code nric}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public boolean hasSuchPatient(Name name, Nric nric) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        requireAllNonNull(name, nric);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return persons.hasSuchPatient(name, nric);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Returns true if there is such a doctor with the provided {@code name} and {@code nric}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public boolean hasSuchDoctor(Name name, Nric nric) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        requireAllNonNull(name, nric);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return persons.hasSuchDoctor(name, nric);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Returns an {@code Optional\u003cPerson\u003e} base on the provided {@code nric}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public Optional\u003cPerson\u003e getPerson(Nric nric) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        requireNonNull(nric);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return persons.getPerson(nric);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 20,
      "-": 120,
      "nelvintan": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/IntuitivePromptManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.argumentmanagers.AddArgumentManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.argumentmanagers.ArgumentManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.argumentmanagers.DeleteArgumentManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.argumentmanagers.EditArgumentManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.argumentmanagers.FindArgumentManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.argumentmanagers.ScheduleArgumentManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.argumentmanagers.UpdateArgumentManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tristonpang"
        },
        "content": " * The IntuitivePromptManager of the Model. Handles and stores all data related to an intuitive command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tristonpang"
        },
        "content": " * execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tristonpang"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "public class IntuitivePromptManager {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String SKIP_COMMAND \u003d \"//\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String SKIP_INSTRUCTION \u003d \"\\n(Type %1$s to skip this field)\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String INTUITIVE_MODE_MESSAGE \u003d \"(You are currently in the intuitive %1$s command.)\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static int currentArgIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static List\u003cString\u003e arguments;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static ArgumentManager argumentManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static boolean isIntuitiveMode;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final String UNEXPECTED_SCENARIO_MESSAGE \u003d \"IntuitivePromptManager: \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"Unexpected scenario has occurred in switch-case block\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public IntuitivePromptManager() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        currentArgIndex \u003d ArgumentManager.MIN_ARGUMENT_INDEX;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        arguments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        argumentManager \u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        isIntuitiveMode \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public boolean isIntuitiveMode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return isIntuitiveMode;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Adds and stores user\u0027s input as an argument to the currently executing intuitive command."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @param input the user\u0027s input"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public void addArgument(String input) throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        String userInput \u003d input.trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        if (argumentManager \u003d\u003d null) { //start of intuitive command, record command word"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            startIntuitiveMode(userInput);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        } else if (isSkipCommand(userInput) \u0026\u0026 isCurrentFieldSkippable()) { //skip command"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            skipArgumentField();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        } else if (isArgumentValid(userInput)) { //any other valid argument"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            addArgumentForCommand(userInput);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            String exceptionMessage \u003d retrieveInvalidArgumentExceptionMessage();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            throw new CommandException(exceptionMessage + \"\\n\" + getInstruction());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        logger.info(\"Intuitive Argument index: \" + currentArgIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        logger.info(\"Current arguments: \" + arguments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        if (currentArgIndex \u003e\u003d argumentManager.getMaximumArguments()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            exitIntuitiveMode();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Signals the start of execution of an intuitive command"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @param userInput the user\u0027s input (i.e. the command word which specifies which"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     *                  command is going to be run in intuitive mode)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private void startIntuitiveMode(String userInput) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        isIntuitiveMode \u003d true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        switch (userInput) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            argumentManager \u003d new AddArgumentManager();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            argumentManager \u003d new DeleteArgumentManager();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            argumentManager \u003d new EditArgumentManager();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            argumentManager \u003d new FindArgumentManager();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ScheduleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            argumentManager \u003d new ScheduleArgumentManager();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case UpdateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            argumentManager \u003d new UpdateArgumentManager();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            throw new Error(UNEXPECTED_SCENARIO_MESSAGE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Handles the adding of the user\u0027s input as an argument, depending on"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * the type of command."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @param userInput the user\u0027s input to be added as an argument"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private void addArgumentForCommand(String userInput) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        currentArgIndex \u003d argumentManager.addArgumentForCommand(arguments, currentArgIndex, userInput);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Skips the current argument field."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private void skipArgumentField() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        arguments.add(\"\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        currentArgIndex++;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Gives the corresponding instruction or prompt for the current field of the executing"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * intuitive command."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @return the string instruction for the current field of the executing intuitive command"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public String getInstruction() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return String.format(INTUITIVE_MODE_MESSAGE, getCurrentCommandType()) + \"\\n\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                + argumentManager.retrieveInstruction(arguments, currentArgIndex);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Indicates that currently executing intuitive command has completed."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * i.e. all fields have been filled up, intuitive command mode has exited."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private void exitIntuitiveMode() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        isIntuitiveMode \u003d false;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Removes the latest stored argument of the currently executing intuitive command."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public void removeArgument() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        if (currentArgIndex \u003c\u003d ArgumentManager.MIN_ARGUMENT_INDEX) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        currentArgIndex \u003d argumentManager.removeArgumentForCommand(arguments, currentArgIndex);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Checks if there are currently any arguments stored (as part of an executing intuitive command) in the manager."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @return true if there are any arguments stored, false otherwise"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public boolean areArgsAvailable() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return !arguments.isEmpty();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Prepares a string that is a single line command (i.e. non-intuitive command input) based on all"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * the past arguments entered by the user during the execution of an intuitive command."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * This string is basically how the user would have entered the command and its"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * arguments if the intuitive command prompt was not used."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @return a string that is the non-intuitive command input, containing entered arguments of the"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * past executed intuitive command"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public String retrieveArguments() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        String result \u003d argumentManager.prepareArguments(arguments);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        resetIntuitiveCache();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Clears all stored arguments and readies the manager for a new intuitive command."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private void resetIntuitiveCache() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        argumentManager \u003d null;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        arguments.clear();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        currentArgIndex \u003d ArgumentManager.MIN_ARGUMENT_INDEX;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private boolean isSkipCommand(String input) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return input.equals(SKIP_COMMAND);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Checks if the current field of the executing intuitive command is skippable/can be left blank."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @return true if the field is skippable, false otherwise"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private boolean isCurrentFieldSkippable() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return argumentManager.isCurrentFieldSkippable(currentArgIndex);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Checks if given input is a valid argument."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @param input the given input"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @return true if the input is a valid argument, false otherwise"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private boolean isArgumentValid(String input) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return argumentManager.isArgumentValid(arguments, currentArgIndex, input);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Retrieves message to be thrown with exception when an invalid argument is detected."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @return string message to be thrown with exception"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private String retrieveInvalidArgumentExceptionMessage() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return argumentManager.retrieveInvalidArgumentExceptionMessage(arguments, currentArgIndex);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Cancels and exits out of the currently executing intuitive command."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public void cancelIntuitiveCommand() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        exitIntuitiveMode();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        resetIntuitiveCache();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Gets a String representing what intuitive command is currently executing."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @return the String representing the current intuitive command"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private String getCurrentCommandType() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return argumentManager.getArgumentManagerType();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tristonpang": 255,
      "GaryGohYP": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /** Switches the database base on the predicate */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    void changeDatabase(Predicate\u003cPerson\u003e filer, String role);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /** Deletes all person in the current active database only **/"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    void clearActiveDatabase();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /** Returns a message that indicates the type of the current active database **/"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    String getCurrentDatabase();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    void resetData(ReadOnlyAddressBook newData);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the database."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Returns true if there exist a person with matching {@code nric} and {@code name} in the database"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    boolean hasSuchPerson(Name name, Nric nric);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Returns true if there exist a patient with matching {@code nric} and {@code name} in the database"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    boolean hasSuchPatient(Name name, Nric nric);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Returns true if there exist a doctor with matching {@code nric} and {@code name} in the database"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    boolean hasSuchDoctor(Name name, Nric nric);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Returns an {@code Optional\u003cPerson\u003e} that matches the given {@code nric}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    Optional\u003cPerson\u003e getPerson(Nric nric);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * The person must exist in the database."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * {@code person} must not already exist in the database."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * {@code target} must exist in the database."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the database."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    void updatePerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Returns true if the model has previous database states to restore."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canUndoAddressBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Returns true if the model has undone database states to restore."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canRedoAddressBook();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Restores the model\u0027s database to its previous state."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Restores the model\u0027s database to its previously undone state."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Saves the current database state for undo/redo."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitAddressBook();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Records the user\u0027s input when an intuitive command is executing"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @param entry User\u0027s input for the current intuitive prompted field"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @return The next instruction prompt (for the next field to be recorded)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    String addIntuitiveEntry(String entry) throws CommandException;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Removes the user\u0027s most recent input during an intuitive command."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Invoked when user wants to undo their most recent entry/input."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @return The previous field\u0027s instruction prompt"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    String removeIntuitiveEntry();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    boolean isIntuitiveMode();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    boolean areIntuitiveArgsAvailable();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Retrieves all stored arguments input by the user throughout the intuitive command"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * and returns the arguments as a concatenated string, ready for normal command parsing."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Invoked when the intuitive command ends."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @return Concatenated string of all arguments input by the user during intuitive command"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    String retrieveIntuitiveArguments();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Cancels the currently executing intuitive command, if any."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    void cancelIntuitiveCommand();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tristonpang": 32,
      "guestuser0123": 32,
      "-": 68,
      "nelvintan": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.commons.events.model.DatabaseChangedEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.commons.events.model.PersonChangedEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.MedicalRecord;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.AppointmentManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String KEYWORD_ALL \u003d \"ALL\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private Predicate\u003cPerson\u003e predicateShowRelevantPeople;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private final IntuitivePromptManager intuitivePromptManager;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private String activeRole;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // starts the application with the all patient and doctor\u0027s database by default."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        predicateShowRelevantPeople \u003d PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        activeRole \u003d KEYWORD_ALL;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        filteredPersons \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new FilteredList\u003c\u003e(versionedAddressBook.getPersonList()).filtered(predicateShowRelevantPeople);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager \u003d new IntuitivePromptManager();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void changeDatabase(Predicate\u003cPerson\u003e filter, String role) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.predicateShowRelevantPeople \u003d filter;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.activeRole \u003d role;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.indicateDatabaseChanged();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.indicatePersonChanged();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void clearActiveDatabase() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        List\u003cPerson\u003e toDelete \u003d versionedAddressBook.getPersonList().stream()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .filter(predicateShowRelevantPeople).collect(Collectors.toList());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        toDelete.stream().forEach(personToDelete -\u003e {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            if (personToDelete instanceof Patient) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                for (Appointment appointment : personToDelete.getAppointmentList()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    Nric doctorNric \u003d appointment.getDoctorNric();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    Person affectedPersonToEdit \u003d getPerson(doctorNric).get();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    ArrayList\u003cAppointment\u003e affectedAppointmentList \u003d new ArrayList\u003c\u003e(affectedPersonToEdit"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                            .getAppointmentList());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    affectedAppointmentList \u003d AppointmentManager"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                            .removeAppointmentsOfPatient(personToDelete.getNric(), affectedAppointmentList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    Person affectedEditedPerson \u003d new Doctor("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                            affectedPersonToEdit.getName(), affectedPersonToEdit.getNric(),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                            affectedPersonToEdit.getPhone(), affectedPersonToEdit.getEmail(),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                            affectedPersonToEdit.getAddress(), affectedPersonToEdit.getTags(),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                            affectedAppointmentList, ((Doctor) affectedPersonToEdit).getMedicalDepartment());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    updatePerson(affectedPersonToEdit, affectedEditedPerson);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            } else if (personToDelete instanceof Doctor) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                for (Appointment appointment : personToDelete.getAppointmentList()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    Nric patientNric \u003d appointment.getPatientNric();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    Person affectedPersonToEdit \u003d getPerson(patientNric).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    ArrayList\u003cAppointment\u003e affectedAppointmentList \u003d new ArrayList\u003c\u003e(affectedPersonToEdit"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                            .getAppointmentList());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    ArrayList\u003cMedicalRecord\u003e newMedicalRecordLibrary \u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                            new ArrayList\u003c\u003e(((Patient) affectedPersonToEdit).getMedicalRecordLibrary());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    affectedAppointmentList \u003d AppointmentManager"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                            .removeAppointmentsOfDoctor(personToDelete.getNric(), affectedAppointmentList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    Person affectedEditedPerson \u003d new Patient("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                            affectedPersonToEdit.getName(), affectedPersonToEdit.getNric(),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                            affectedPersonToEdit.getPhone(), affectedPersonToEdit.getEmail(),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                            affectedPersonToEdit.getAddress(), affectedPersonToEdit.getTags(),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                            affectedAppointmentList, newMedicalRecordLibrary);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    updatePerson(affectedPersonToEdit, affectedEditedPerson);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            deletePerson(personToDelete);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        });"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.indicatePersonChanged();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public String getCurrentDatabase() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return activeRole;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.resetData(newData);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        indicatePersonChanged();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void indicateAddressBookChanged() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new AddressBookChangedEvent(versionedAddressBook));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /** Raise an event to indicate that the active database has been changed **/"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private void indicateDatabaseChanged() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        raise(new DatabaseChangedEvent(activeRole));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /** Raises an event to indicate the person data has changed */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private void indicatePersonChanged(Person original, Person editedPerson) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        raise(new PersonChangedEvent(original, editedPerson));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /** Raise an event to indicate the person has been removed or reset to previous version*/"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private void indicatePersonChanged() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        raise(new PersonChangedEvent(null, null));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.hasPerson(person);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public boolean hasSuchPerson(Name name, Nric nric) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        requireAllNonNull(name, nric);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return versionedAddressBook.hasSuchPerson(name, nric);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public boolean hasSuchPatient(Name name, Nric nric) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        requireAllNonNull(name, nric);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return versionedAddressBook.hasSuchPatient(name, nric);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public boolean hasSuchDoctor(Name name, Nric nric) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        requireAllNonNull(name, nric);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return versionedAddressBook.hasSuchDoctor(name, nric);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public Optional\u003cPerson\u003e getPerson(Nric nric) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        requireNonNull(nric);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return versionedAddressBook.getPerson(nric);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.removePerson(target);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        indicatePersonChanged();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.addPerson(person);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.updatePerson(target, editedPerson);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        indicatePersonChanged(target, editedPerson);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredPersons);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        filteredPersons.setPredicate(this.predicateShowRelevantPeople.and(predicate));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        indicatePersonChanged();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        indicatePersonChanged();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public String addIntuitiveEntry(String entry) throws CommandException {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(entry);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return intuitivePromptManager.getInstruction();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public String removeIntuitiveEntry() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.removeArgument();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return intuitivePromptManager.getInstruction();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public boolean isIntuitiveMode() {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return intuitivePromptManager.isIntuitiveMode();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public String retrieveIntuitiveArguments() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return intuitivePromptManager.retrieveArguments();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public boolean areIntuitiveArgsAvailable() {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return intuitivePromptManager.areArgsAvailable();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public void cancelIntuitiveCommand() {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.cancelIntuitiveCommand();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tristonpang": 37,
      "guestuser0123": 111,
      "-": 148,
      "nelvintan": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/argumentmanagers/AddArgumentManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "package seedu.address.model.argumentmanagers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL_DEPARTMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.model.IntuitivePromptManager.SKIP_COMMAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.model.IntuitivePromptManager.SKIP_INSTRUCTION;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.doctor.MedicalDepartment;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.person.Role;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tristonpang"
        },
        "content": " * ArgumentManager that handles management and recording of arguments for an intuitive \u0027add\u0027 command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tristonpang"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "public class AddArgumentManager extends ArgumentManager {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String ROLE_INSTRUCTION \u003d \"Is this a patient or a doctor? \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"(Please enter patient or doctor)\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String NAME_INSTRUCTION \u003d \"Please enter person\u0027s name\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String EMAIL_INSTRUCTION \u003d \"Please enter person\u0027s email\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String PHONE_INSTRUCTION \u003d \"Please enter person\u0027s phone number\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String ADDRESS_INSTRUCTION \u003d \"Please enter person\u0027s address\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String TAGS_INSTRUCTION \u003d \"Please enter person\u0027s tags, \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"separated by commas (with no spaces after a comma)\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String NRIC_INSTRUCTION \u003d \"Please enter patient\u0027s NRIC\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String DEPT_INSTRUCTION \u003d \"Please enter doctor\u0027s medical department\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String PATIENT_ARG_IDENTIFIER \u003d \"patient\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String DOCTOR_ARG_IDENTIFIER \u003d \"doctor\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int ADD_MAX_ARGUMENTS \u003d 8;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int ADD_ROLE_INDEX \u003d 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int ADD_NAME_INDEX \u003d 1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int ADD_PHONE_INDEX \u003d 2;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int ADD_EMAIL_INDEX \u003d 3;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int ADD_ADDRESS_INDEX \u003d 4;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int ADD_TAGS_INDEX \u003d 5;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int ADD_NRIC_INDEX \u003d 6;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int ADD_DEPT_INDEX \u003d 7;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static String INVALID_NRIC_MESSAGE;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public int addArgumentForCommand(List\u003cString\u003e arguments, int argumentIndex, String userInput) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        arguments.add(userInput);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        if (!isDoctor(arguments) \u0026\u0026 !isPatient(arguments)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            throw new Error(UNEXPECTED_SCENARIO_MESSAGE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        if (argumentIndex \u003d\u003d ADD_NRIC_INDEX \u0026\u0026 isPatient(arguments)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return ADD_MAX_ARGUMENTS;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return argumentIndex + 1;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private boolean isPatient(List\u003cString\u003e arguments) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return arguments.get(ADD_ROLE_INDEX).equalsIgnoreCase(PATIENT_ARG_IDENTIFIER);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private boolean isDoctor(List\u003cString\u003e arguments) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return arguments.get(ADD_ROLE_INDEX).equalsIgnoreCase(DOCTOR_ARG_IDENTIFIER);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public String retrieveInstruction(List\u003cString\u003e arguments, int argumentIndex) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        switch (argumentIndex) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_ROLE_INDEX:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return ROLE_INSTRUCTION;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_NAME_INDEX:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return NAME_INSTRUCTION;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_EMAIL_INDEX:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return EMAIL_INSTRUCTION;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_PHONE_INDEX:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return PHONE_INSTRUCTION;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_ADDRESS_INDEX:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return ADDRESS_INSTRUCTION;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_TAGS_INDEX:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return TAGS_INSTRUCTION + String.format(SKIP_INSTRUCTION, SKIP_COMMAND);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_NRIC_INDEX:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return NRIC_INSTRUCTION;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_DEPT_INDEX:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return DEPT_INSTRUCTION;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_MAX_ARGUMENTS:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return COMMAND_COMPLETE_MESSAGE;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            throw new Error(UNEXPECTED_SCENARIO_MESSAGE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public int removeArgumentForCommand(List\u003cString\u003e arguments, int argumentIndex) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        arguments.remove(argumentIndex - 1);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return argumentIndex - 1;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public int getMaximumArguments() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return ADD_MAX_ARGUMENTS;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public String prepareArguments(List\u003cString\u003e arguments) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        StringBuilder preparedString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        preparedString.append(AddCommand.COMMAND_WORD + \" \");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        int index \u003d MIN_ARGUMENT_INDEX;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        for (String argument : arguments) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            if (argument.isEmpty()) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            preparedString.append(prefixAddArgument(index, argument));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            preparedString.append(\" \");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return preparedString.toString().trim();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Given an argument and an index that represents which field this argument belongs to in the \u0027add\u0027 command,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * prefix and return the edited argument."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @param index    the index that represents which field the argument belongs to in the \u0027add\u0027 command"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @param argument the specified argument"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @return the prefixed argument"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private String prefixAddArgument(int index, String argument) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        switch (index) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_ROLE_INDEX:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return PREFIX_ROLE + argument;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_NAME_INDEX:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return PREFIX_NAME + argument;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_EMAIL_INDEX:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return PREFIX_EMAIL + argument;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_PHONE_INDEX:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return PREFIX_PHONE + argument;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_ADDRESS_INDEX:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return PREFIX_ADDRESS + argument;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_TAGS_INDEX:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            String resultArg \u003d PREFIX_TAG + argument;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return resultArg.replace(\",\", \" \" + PREFIX_TAG).trim();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_NRIC_INDEX:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return PREFIX_NRIC + argument;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_DEPT_INDEX:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            if (argument.isEmpty()) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                return \"\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return PREFIX_MEDICAL_DEPARTMENT + argument;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public boolean isArgumentValid(List\u003cString\u003e arguments, int argumentIndex, String userInput) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        switch (argumentIndex) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_ROLE_INDEX:"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return Role.isValidRole(userInput);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_NAME_INDEX:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return Name.isValidName(userInput);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_PHONE_INDEX:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return Phone.isValidPhone(userInput);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_EMAIL_INDEX:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return Email.isValidEmail(userInput);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_ADDRESS_INDEX:"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return Address.isValidAddress(userInput);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_TAGS_INDEX:"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            for (String tag : userInput.split(\",\")) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                if (!Tag.isValidTagName(tag)) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_NRIC_INDEX:"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                Nric.isValidNric(userInput);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                INVALID_NRIC_MESSAGE \u003d e.getMessage();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_DEPT_INDEX:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return MedicalDepartment.isValidMedDept(userInput);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            throw new Error(UNEXPECTED_SCENARIO_MESSAGE);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public String retrieveInvalidArgumentExceptionMessage(List\u003cString\u003e arguments, int argumentIndex) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        switch (argumentIndex) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_ROLE_INDEX:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return Role.MESSAGE_ROLE_CONSTRAINTS;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_NAME_INDEX:"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_PHONE_INDEX:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return Phone.MESSAGE_PHONE_CONSTRAINTS;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_EMAIL_INDEX:"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return Email.MESSAGE_EMAIL_CONSTRAINTS;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_ADDRESS_INDEX:"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return Address.MESSAGE_ADDRESS_CONSTRAINTS;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_TAGS_INDEX:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return Tag.MESSAGE_TAG_CONSTRAINTS;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_NRIC_INDEX:"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return INVALID_NRIC_MESSAGE;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ADD_DEPT_INDEX:"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return MedicalDepartment.MESSAGE_DEPTNAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            throw new Error(UNEXPECTED_SCENARIO_MESSAGE);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public boolean isCurrentFieldSkippable(int argumentIndex) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return argumentIndex \u003d\u003d ADD_TAGS_INDEX;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public String getArgumentManagerType() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return AddCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tristonpang": 277
    }
  },
  {
    "path": "src/main/java/seedu/address/model/argumentmanagers/ArgumentManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "package seedu.address.model.argumentmanagers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tristonpang"
        },
        "content": " * Class that determines how arguments are stored and keeps track of respective instructions."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tristonpang"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "public abstract class ArgumentManager {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final int MIN_ARGUMENT_INDEX \u003d 0;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    protected static final String COMMAND_COMPLETE_MESSAGE \u003d \"All required inputs received, processing...\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    protected static final String UNEXPECTED_SCENARIO_MESSAGE \u003d \"ArgumentManager: \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"Unexpected scenario has occurred in switch-case block\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Handles the adding of the user\u0027s input as an argument, depending on"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * the type of command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @param arguments the container of arguments to be added to"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @param argumentIndex the current argument index"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @param userInput the user\u0027s input to be added as an argument"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @return the newly incremented argumentIndex"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public abstract int addArgumentForCommand(List\u003cString\u003e arguments, int argumentIndex, String userInput);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Retrieves corresponding instruction for a field (specified by the current argument index)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * for the intuitive command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @param arguments the current container of arguments"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @return the corresponding string instruction for the specified field"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public abstract String retrieveInstruction(List\u003cString\u003e arguments, int argumentIndex);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Removes the latest stored argument of the currently executing intuitive command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @param arguments the current container of arguments"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @param argumentIndex the current argument index"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @return the newly decremented argument index"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public abstract int removeArgumentForCommand(List\u003cString\u003e arguments, int argumentIndex);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Retrieves the maximum number of arguments that the intuitive command takes in."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @return the maximum number of arguments that the command takes in"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public abstract int getMaximumArguments();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Prepares a string represents a single line (non-intuitive) command based on all"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * the past arguments entered by the user during the execution of the intuitive command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @param arguments the current container of arguments"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @return a string that is the non-intuitive version of the command, containing entered arguments of the"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * past executed intuitive command"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public abstract String prepareArguments(List\u003cString\u003e arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Checks if given input is a valid argument for the intuitive command."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @param arguments the current container of arguments"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @param userInput the given input"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @param argumentIndex the current argument index"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @return true if the input is a valid argument, false otherwise"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public abstract boolean isArgumentValid(List\u003cString\u003e arguments, int argumentIndex, String userInput);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Retrieves message to be thrown with exception when an invalid argument is detected."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @param arguments the current container of arguments"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @param argumentIndex the current argument index"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @return string message to be thrown with exception"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public abstract String retrieveInvalidArgumentExceptionMessage(List\u003cString\u003e arguments, int argumentIndex);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public abstract boolean isCurrentFieldSkippable(int argumentIndex);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Returns a String representing the command that the ArgumentManager is for."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @return the String representing the command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public abstract String getArgumentManagerType();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tristonpang": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/model/argumentmanagers/DeleteArgumentManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "package seedu.address.model.argumentmanagers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tristonpang"
        },
        "content": " * ArgumentManager that handles management and recording of arguments for an intuitive \u0027delete\u0027 command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tristonpang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "public class DeleteArgumentManager extends ArgumentManager {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String DELETE_TARGET_INSTRUCTION \u003d \"Please enter the index of the person to be deleted\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String DELETE_INVALID_ARGUMENT_MESSAGE \u003d \"Index must be a non-zero positive integer\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final String UNEXPECTED_CALL_ERROR \u003d \"DeleteArgumentManager: \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"removeArgumentForCommand(..) should not be called!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int DELETE_MAX_ARGUMENTS \u003d 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int DELETE_TARGET_INDEX \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public int addArgumentForCommand(List\u003cString\u003e arguments, int argumentIndex, String userInput) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        arguments.add(userInput);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return argumentIndex + 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public String retrieveInstruction(List\u003cString\u003e arguments, int argumentIndex) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        switch (argumentIndex) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case DELETE_TARGET_INDEX:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return DELETE_TARGET_INSTRUCTION;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case DELETE_MAX_ARGUMENTS:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return COMMAND_COMPLETE_MESSAGE;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            throw new Error(UNEXPECTED_SCENARIO_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public int removeArgumentForCommand(List\u003cString\u003e arguments, int argumentIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        throw new Error(UNEXPECTED_CALL_ERROR);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public int getMaximumArguments() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return DELETE_MAX_ARGUMENTS;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public String prepareArguments(List\u003cString\u003e arguments) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        String preparedString \u003d \"\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        preparedString +\u003d DeleteCommand.COMMAND_WORD + \" \";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        String targetIndex \u003d arguments.get(DELETE_TARGET_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        preparedString +\u003d targetIndex;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return preparedString;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public boolean isArgumentValid(List\u003cString\u003e arguments, int argumentIndex, String userInput) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return StringUtil.isNonZeroUnsignedInteger(userInput);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public String retrieveInvalidArgumentExceptionMessage(List\u003cString\u003e arguments, int argumentIndex) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return DELETE_INVALID_ARGUMENT_MESSAGE;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public boolean isCurrentFieldSkippable(int argumentIndex) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public String getArgumentManagerType() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return DeleteCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tristonpang": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/model/argumentmanagers/EditArgumentManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "package seedu.address.model.argumentmanagers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tristonpang"
        },
        "content": " * ArgumentManager that handles management and recording of arguments for an intuitive \u0027edit\u0027 command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tristonpang"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "public class EditArgumentManager extends ArgumentManager {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String EDIT_CLEAR_TAGS_COMMAND \u003d \"--\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String EDIT_TARGET_INSTRUCTION \u003d \"Please enter the index of the person to be edited\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String EDIT_FIELDS_INSTRUCTION \u003d \"Please indicate which fields you want to edit, by typing \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"down the corresponding numbers, separated by spaces:\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"1. Name, \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"2. Phone, \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"3. Email, \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"4. Address, \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"5. Tags\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String EDIT_NAME_INSTRUCTION \u003d \"Please enter person\u0027s new name\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String EDIT_EMAIL_INSTRUCTION \u003d \"Please enter person\u0027s new email\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String EDIT_PHONE_INSTRUCTION \u003d \"Please enter person\u0027s new phone number\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String EDIT_ADDRESS_INSTRUCTION \u003d \"Please enter person\u0027s new address\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String EDIT_TAGS_INSTRUCTION \u003d \"Please enter person\u0027s new tags, \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"separated by commas (with no spaces after a comma) (Type %1$s to clear tags)\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String EDIT_INVALID_FIELDS_MESSAGE \u003d \"Indexes must be non-zero positive integers \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"from %1$s to %2$s, and cannot be repeated\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String EDIT_INVALID_INDEX_MESSAGE \u003d \"Index must be a non-zero positive integer\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int EDIT_MAX_ARGUMENTS \u003d 7;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int EDIT_TARGET_INDEX \u003d 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int EDIT_FIELDS_INDEX \u003d 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int EDIT_NAME_INDEX \u003d 2;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int EDIT_PHONE_INDEX \u003d 3;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int EDIT_EMAIL_INDEX \u003d 4;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int EDIT_ADDRESS_INDEX \u003d 5;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int EDIT_TAGS_INDEX \u003d 6;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int EDIT_INDEX_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public int addArgumentForCommand(List\u003cString\u003e arguments, int argumentIndex, String userInput) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        //sort the selected indexes"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        if (argumentIndex \u003d\u003d EDIT_FIELDS_INDEX) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            List\u003cString\u003e rawIndexes \u003d Arrays.asList(userInput.split(\" \"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            rawIndexes.sort((o1, o2) -\u003e Integer.valueOf(o1) - Integer.valueOf(o2));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            String sortedIndexes \u003d \"\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            for (String index : rawIndexes) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                sortedIndexes +\u003d index;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                sortedIndexes +\u003d \" \";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            sortedIndexes \u003d sortedIndexes.trim();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            arguments.add(sortedIndexes);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            arguments.add(userInput);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        if (argumentIndex \u003d\u003d EDIT_TARGET_INDEX) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return argumentIndex + 1;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        if (arguments.get(EDIT_FIELDS_INDEX).isEmpty()) { //no more edit indexes"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            //all remaining unselected fields are empty"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            for (int index \u003d argumentIndex + 1; index \u003c EDIT_MAX_ARGUMENTS; index++) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                arguments.add(\"\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return EDIT_MAX_ARGUMENTS;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        //first element is the next edit index, second element is the remaining indexes"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        String[] firstIndexAndRemainingIndexes \u003d arguments.get(EDIT_FIELDS_INDEX)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                .split(\" \", 2);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        int nextIndex \u003d Integer.valueOf(firstIndexAndRemainingIndexes[0].trim());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        nextIndex +\u003d EDIT_INDEX_OFFSET;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        //the unselected indexes in between the current index and the next index are empty"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        for (int index \u003d argumentIndex + 1; index \u003c nextIndex; index++) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            arguments.add(\"\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        //update remaining indexes"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        arguments.remove(EDIT_FIELDS_INDEX);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        if (firstIndexAndRemainingIndexes.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            arguments.add(EDIT_FIELDS_INDEX, \"\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return nextIndex;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        String remainingIndexes \u003d firstIndexAndRemainingIndexes[1];"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        arguments.add(EDIT_FIELDS_INDEX, remainingIndexes);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return nextIndex;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public String retrieveInstruction(List\u003cString\u003e arguments, int argumentIndex) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        switch (argumentIndex) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_TARGET_INDEX:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return EDIT_TARGET_INSTRUCTION;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_FIELDS_INDEX:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return EDIT_FIELDS_INSTRUCTION;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_NAME_INDEX:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return EDIT_NAME_INSTRUCTION;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_PHONE_INDEX:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return EDIT_PHONE_INSTRUCTION;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_EMAIL_INDEX:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return EDIT_EMAIL_INSTRUCTION;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_ADDRESS_INDEX:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return EDIT_ADDRESS_INSTRUCTION;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_TAGS_INDEX:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return String.format(EDIT_TAGS_INSTRUCTION, EDIT_CLEAR_TAGS_COMMAND);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_MAX_ARGUMENTS:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return COMMAND_COMPLETE_MESSAGE;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            throw new Error(UNEXPECTED_SCENARIO_MESSAGE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public int removeArgumentForCommand(List\u003cString\u003e arguments, int argumentIndex) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        if (argumentIndex \u003d\u003d EDIT_FIELDS_INDEX) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            arguments.remove(argumentIndex - 1);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return argumentIndex - 1;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        String targetIndex \u003d arguments.get(EDIT_TARGET_INDEX);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        arguments.clear();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        arguments.add(targetIndex);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return EDIT_FIELDS_INDEX;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public int getMaximumArguments() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return EDIT_MAX_ARGUMENTS;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public String prepareArguments(List\u003cString\u003e arguments) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        StringBuilder preparedString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        preparedString.append(EditCommand.COMMAND_WORD + \" \");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        for (int index \u003d MIN_ARGUMENT_INDEX; index \u003c EDIT_MAX_ARGUMENTS; index++) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            if (index \u003d\u003d EDIT_FIELDS_INDEX) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            String argument \u003d arguments.get(index);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            if (argument.isEmpty()) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            preparedString.append(prefixEditArgument(index, argument));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            preparedString.append(\" \");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return preparedString.toString().trim();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Given an argument and an index that represents which field this argument belongs to in the \u0027edit\u0027 command,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * prefix and return the edited argument."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @param index    the index that represents which field the argument belongs to in the \u0027edit\u0027 command"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @param argument the specified argument"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @return the prefixed argument"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private String prefixEditArgument(int index, String argument) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        switch (index) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_TARGET_INDEX:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return argument;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_NAME_INDEX:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return PREFIX_NAME + argument;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_EMAIL_INDEX:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return PREFIX_EMAIL + argument;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_PHONE_INDEX:"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return PREFIX_PHONE + argument;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_ADDRESS_INDEX:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return PREFIX_ADDRESS + argument;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_TAGS_INDEX:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            String resultArg \u003d PREFIX_TAG + argument;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            if (argument.equals(EDIT_CLEAR_TAGS_COMMAND)) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                resultArg \u003d PREFIX_TAG + \"\";"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return resultArg.replace(\",\", \" \" + PREFIX_TAG).trim();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            throw new Error(UNEXPECTED_SCENARIO_MESSAGE);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public boolean isArgumentValid(List\u003cString\u003e arguments, int argumentIndex, String userInput) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        switch (argumentIndex) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_TARGET_INDEX:"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return StringUtil.isNonZeroUnsignedInteger(userInput);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_FIELDS_INDEX:"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            String appearedValues \u003d \"\";"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            for (String index : userInput.split(\" \")) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                if (!StringUtil.isNonZeroUnsignedInteger(index)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                        || Integer.valueOf(index) \u003e\u003d EDIT_MAX_ARGUMENTS) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                if (appearedValues.contains(index)) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                appearedValues +\u003d index;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_NAME_INDEX:"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return Name.isValidName(userInput);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_PHONE_INDEX:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return Phone.isValidPhone(userInput);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_EMAIL_INDEX:"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return Email.isValidEmail(userInput);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_ADDRESS_INDEX:"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return Address.isValidAddress(userInput);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_TAGS_INDEX:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            if (userInput.equals(EDIT_CLEAR_TAGS_COMMAND)) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            for (String tag : userInput.split(\",\")) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                if (!Tag.isValidTagName(tag)) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            throw new Error(UNEXPECTED_SCENARIO_MESSAGE);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public String retrieveInvalidArgumentExceptionMessage(List\u003cString\u003e arguments, int argumentIndex) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        switch (argumentIndex) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_TARGET_INDEX:"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return EDIT_INVALID_INDEX_MESSAGE;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_FIELDS_INDEX:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return String.format(EDIT_INVALID_FIELDS_MESSAGE,"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                    EDIT_NAME_INDEX - EDIT_INDEX_OFFSET,"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                    EDIT_TAGS_INDEX - EDIT_INDEX_OFFSET);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_NAME_INDEX:"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_PHONE_INDEX:"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return Phone.MESSAGE_PHONE_CONSTRAINTS;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_EMAIL_INDEX:"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return Email.MESSAGE_EMAIL_CONSTRAINTS;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_ADDRESS_INDEX:"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return Address.MESSAGE_ADDRESS_CONSTRAINTS;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case EDIT_TAGS_INDEX:"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return Tag.MESSAGE_TAG_CONSTRAINTS;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            throw new Error(UNEXPECTED_SCENARIO_MESSAGE);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public boolean isCurrentFieldSkippable(int argumentIndex) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public String getArgumentManagerType() {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return EditCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tristonpang": 312
    }
  },
  {
    "path": "src/main/java/seedu/address/model/argumentmanagers/FindArgumentManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "package seedu.address.model.argumentmanagers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL_DEPARTMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL_RECORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tristonpang"
        },
        "content": " * ArgumentManager that handles management and recording of arguments for an intuitive \u0027find\u0027 command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tristonpang"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "public class FindArgumentManager extends ArgumentManager {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String FIND_SEARCH_FIELDS_INSTRUCTION \u003d \"Please select what fields to search in, by typing \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"down the corresponding numbers, separated by spaces:\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"1. Global Search, \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"2. Search by Name, \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"3. Search by NRIC, \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"4. Search by Phone, \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"5. Search by Email, \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"6. Search by Address, \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"7. Search by Role, \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"8. Search by Tags, \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"9. Search by Medical Department, \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"10. Search by Medical Record\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String FIND_GLOBAL_INSTRUCTION \u003d \"Please enter keywords to be searched everywhere, \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"separated only by commas\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String FIND_NAME_INSTRUCTION \u003d \"Please enter keywords to be searched for (by name), \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"separated only by commas\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String FIND_NRIC_INSTRUCTION \u003d \"Please enter keywords to be searched for (by NRIC), \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"separated only by commas\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String FIND_PHONE_INSTRUCTION \u003d \"Please enter keywords to be searched for (by phone number), \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"separated only by commas\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String FIND_EMAIL_INSTRUCTION \u003d \"Please enter keywords to be searched for (by email), \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"separated only by commas\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String FIND_ADDRESS_INSTRUCTION \u003d \"Please enter keywords to be searched for (by address), \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"separated only by commas\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String FIND_ROLE_INSTRUCTION \u003d \"Please enter keywords to be searched for (by role), \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"separated only by commas\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String FIND_TAGS_INSTRUCTION \u003d \"Please enter keywords to be searched for (by tags), \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"separated only by commas\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String FIND_MEDICAL_DEPT_INSTRUCTION \u003d \"Please enter keywords to be searched for \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"(by medical department), separated only by commas\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String FIND_MEDICAL_RECORD_INSTRUCTION \u003d \"Please enter keywords to be searched for \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"(by medical record), separated only by commas\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String FIND_INVALID_FIELDS_MESSAGE \u003d \"Indexes must be non-zero positive integers \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"from %1$s to %2$s, and cannot be repeated\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int FIND_MAX_ARGUMENTS \u003d 11;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int FIND_SEARCH_FIELDS_INDEX \u003d 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int FIND_GLOBAL_INDEX \u003d 1;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int FIND_NAME_INDEX \u003d 2;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int FIND_NRIC_INDEX \u003d 3;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int FIND_PHONE_INDEX \u003d 4;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int FIND_EMAIL_INDEX \u003d 5;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int FIND_ADDRESS_INDEX \u003d 6;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int FIND_ROLE_INDEX \u003d 7;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int FIND_TAGS_INDEX \u003d 8;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int FIND_MEDICAL_DEPT_INDEX \u003d 9;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int FIND_MEDICAL_RECORD_INDEX \u003d 10;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public int addArgumentForCommand(List\u003cString\u003e arguments, int argumentIndex, String userInput) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        //sort the selected indexes"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        if (argumentIndex \u003d\u003d FIND_SEARCH_FIELDS_INDEX) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            List\u003cString\u003e rawIndexes \u003d Arrays.asList(userInput.split(\" \"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            rawIndexes.sort((o1, o2) -\u003e Integer.valueOf(o1) - Integer.valueOf(o2));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            String sortedIndexes \u003d \"\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            for (String index : rawIndexes) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                sortedIndexes +\u003d index;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                sortedIndexes +\u003d \" \";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            sortedIndexes \u003d sortedIndexes.trim();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            arguments.add(sortedIndexes);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            arguments.add(userInput);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        //all remaining unselected fields are empty"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        if (arguments.get(FIND_SEARCH_FIELDS_INDEX).isEmpty()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            for (int index \u003d argumentIndex + 1; index \u003c FIND_MAX_ARGUMENTS; index++) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                arguments.add(\"\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return FIND_MAX_ARGUMENTS;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        //first element is the next edit index, second element is the remaining indexes"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        String[] firstIndexAndRemainingIndexes \u003d arguments.get(FIND_SEARCH_FIELDS_INDEX)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                .split(\" \", 2);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        int nextIndex \u003d Integer.valueOf(firstIndexAndRemainingIndexes[0].trim());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        //the unselected indexes in between the current index and the next index are empty"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        for (int index \u003d argumentIndex + 1; index \u003c nextIndex; index++) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            arguments.add(\"\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        //update remaining indexes"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        arguments.remove(FIND_SEARCH_FIELDS_INDEX);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        if (firstIndexAndRemainingIndexes.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            arguments.add(FIND_SEARCH_FIELDS_INDEX, \"\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return nextIndex;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        String remainingIndexes \u003d firstIndexAndRemainingIndexes[1];"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        arguments.add(FIND_SEARCH_FIELDS_INDEX, remainingIndexes);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return nextIndex;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public String retrieveInstruction(List\u003cString\u003e arguments, int argumentIndex) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        switch (argumentIndex) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case FIND_SEARCH_FIELDS_INDEX:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return FIND_SEARCH_FIELDS_INSTRUCTION;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case FIND_GLOBAL_INDEX:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return FIND_GLOBAL_INSTRUCTION;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case FIND_NAME_INDEX:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return FIND_NAME_INSTRUCTION;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case FIND_NRIC_INDEX:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return FIND_NRIC_INSTRUCTION;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case FIND_PHONE_INDEX:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return FIND_PHONE_INSTRUCTION;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case FIND_EMAIL_INDEX:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return FIND_EMAIL_INSTRUCTION;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case FIND_ADDRESS_INDEX:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return FIND_ADDRESS_INSTRUCTION;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case FIND_ROLE_INDEX:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return FIND_ROLE_INSTRUCTION;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case FIND_TAGS_INDEX:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return FIND_TAGS_INSTRUCTION;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case FIND_MEDICAL_DEPT_INDEX:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return FIND_MEDICAL_DEPT_INSTRUCTION;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case FIND_MEDICAL_RECORD_INDEX:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return FIND_MEDICAL_RECORD_INSTRUCTION;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case FIND_MAX_ARGUMENTS:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return COMMAND_COMPLETE_MESSAGE;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            throw new Error(UNEXPECTED_SCENARIO_MESSAGE);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public int removeArgumentForCommand(List\u003cString\u003e arguments, int argumentIndex) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        arguments.clear();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return FIND_SEARCH_FIELDS_INDEX;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public int getMaximumArguments() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return FIND_MAX_ARGUMENTS;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public String prepareArguments(List\u003cString\u003e arguments) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        StringBuilder preparedString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        preparedString.append(FindCommand.COMMAND_WORD + \" \");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        for (int index \u003d MIN_ARGUMENT_INDEX; index \u003c FIND_MAX_ARGUMENTS; index++) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            if (index \u003d\u003d FIND_SEARCH_FIELDS_INDEX) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            String argument \u003d arguments.get(index);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            if (argument.isEmpty()) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            preparedString.append(prefixFindArgument(index, argument));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            preparedString.append(\" \");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return preparedString.toString().trim();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Given an argument and an index that represents which field this argument belongs to in the \u0027find\u0027 command,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * prefix and return the edited argument."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @param index    the index that represents which field the argument belongs to in the \u0027find\u0027 command"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @param argument the specified argument"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @return the prefixed argument"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private String prefixFindArgument(int index, String argument) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        String resultArg;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        switch (index) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case FIND_GLOBAL_INDEX:"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return argument.replace(\",\", \" \").trim();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case FIND_NAME_INDEX:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            resultArg \u003d PREFIX_NAME + argument;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return resultArg.replace(\",\", \" \" + PREFIX_NAME).trim();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case FIND_NRIC_INDEX:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            resultArg \u003d PREFIX_NRIC + argument;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return resultArg.replace(\",\", \" \" + PREFIX_NRIC).trim();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case FIND_PHONE_INDEX:"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            resultArg \u003d PREFIX_PHONE + argument;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return resultArg.replace(\",\", \" \" + PREFIX_PHONE).trim();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case FIND_EMAIL_INDEX:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            resultArg \u003d PREFIX_EMAIL + argument;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return resultArg.replace(\",\", \" \" + PREFIX_EMAIL).trim();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case FIND_ADDRESS_INDEX:"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            resultArg \u003d PREFIX_ADDRESS + argument;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return resultArg.replace(\",\", \" \" + PREFIX_ADDRESS).trim();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case FIND_ROLE_INDEX:"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            resultArg \u003d PREFIX_ROLE + argument;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return resultArg.replace(\",\", \" \" + PREFIX_ROLE).trim();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case FIND_TAGS_INDEX:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            resultArg \u003d PREFIX_TAG + argument;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return resultArg.replace(\",\", \" \" + PREFIX_TAG).trim();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case FIND_MEDICAL_DEPT_INDEX:"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            resultArg \u003d PREFIX_MEDICAL_DEPARTMENT + argument;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return resultArg.replace(\",\", \" \" + PREFIX_MEDICAL_DEPARTMENT).trim();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case FIND_MEDICAL_RECORD_INDEX:"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            resultArg \u003d PREFIX_MEDICAL_RECORD + argument;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return resultArg.replace(\",\", \" \" + PREFIX_MEDICAL_RECORD).trim();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            throw new Error(UNEXPECTED_SCENARIO_MESSAGE);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public boolean isArgumentValid(List\u003cString\u003e arguments, int argumentIndex, String userInput) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        switch (argumentIndex) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case FIND_SEARCH_FIELDS_INDEX:"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            String appearedValues \u003d \"\";"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            for (String index : userInput.split(\" \")) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                if (!StringUtil.isNonZeroUnsignedInteger(index)"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                        || Integer.valueOf(index) \u003e\u003d FIND_MAX_ARGUMENTS) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                if (appearedValues.contains(index)) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                appearedValues +\u003d index;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public String retrieveInvalidArgumentExceptionMessage(List\u003cString\u003e arguments, int argumentIndex) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        switch (argumentIndex) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case FIND_SEARCH_FIELDS_INDEX:"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return String.format(FIND_INVALID_FIELDS_MESSAGE,"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                    FIND_GLOBAL_INDEX,"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                    FIND_MEDICAL_RECORD_INDEX);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            throw new Error(UNEXPECTED_SCENARIO_MESSAGE);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public boolean isCurrentFieldSkippable(int argumentIndex) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public String getArgumentManagerType() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return FindCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tristonpang": 303
    }
  },
  {
    "path": "src/main/java/seedu/address/model/argumentmanagers/ScheduleArgumentManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "package seedu.address.model.argumentmanagers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DOCTOR_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DOCTOR_NRIC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PATIENT_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PATIENT_NRIC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.person.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tristonpang"
        },
        "content": " * ArgumentManager that handles management and recording of arguments for an intuitive \u0027schedule\u0027 command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tristonpang"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "public class ScheduleArgumentManager extends ArgumentManager {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String SCHEDULE_TARGET_INSTRUCTION \u003d \"Please the enter the index of the person to \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"schedule an appointment for (can be patient or doctor)\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String SCHEDULE_DATE_INSTRUCTION \u003d \"Please enter the date of the appointment to be scheduled\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String SCHEDULE_START_TIME_INSTRUCTION \u003d \"Please enter the start time of the appointment\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String SCHEDULE_END_TIME_INSTRUCTION \u003d \"Please enter the end time of the appointment\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String SCHEDULE_DOCTOR_NAME_INSTRUCTION \u003d \"Please enter the doctor\u0027s name\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String SCHEDULE_DOCTOR_NRIC_INSTRUCTION \u003d \"Please enter the doctor\u0027s NRIC\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String SCHEDULE_PATIENT_NAME_INSTRUCTION \u003d \"Please enter the patient\u0027s name\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String SCHEDULE_PATIENT_NRIC_INSTRUCTION \u003d \"Please enter the patient\u0027s NRIC\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String SCHEDULE_INVALID_INDEX_MESSAGE \u003d \"Index must be a non-zero positive integer\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String SCHEDULE_INVALID_DATE_MESSAGE \u003d \"Invalid date. Please enter an existing date \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"in the format DD.MM.YYYY\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String SCHEDULE_INVALID_START_TIME_MESSAGE \u003d \"Invalid time. Please enter a valid \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"24-hour clock time (e.g. 1500)\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String SCHEDULE_INVALID_END_TIME_MESSAGE \u003d \"Invalid time. Please enter a valid \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"24-hour clock time and ensure that it is after %1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int SCHEDULE_MAX_ARGUMENTS \u003d 8;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int SCHEDULE_TARGET_INDEX \u003d 0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int SCHEDULE_DATE_INDEX \u003d 1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int SCHEDULE_START_TIME_INDEX \u003d 2;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int SCHEDULE_END_TIME_INDEX \u003d 3;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int SCHEDULE_DOCTOR_NAME_INDEX \u003d 4;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int SCHEDULE_DOCTOR_NRIC_INDEX \u003d 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int SCHEDULE_PATIENT_NAME_INDEX \u003d 6;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int SCHEDULE_PATIENT_NRIC_INDEX \u003d 7;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public int addArgumentForCommand(List\u003cString\u003e arguments, int argumentIndex, String userInput) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        arguments.add(userInput);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return argumentIndex + 1;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public String retrieveInstruction(List\u003cString\u003e arguments, int argumentIndex) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        switch (argumentIndex) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_TARGET_INDEX:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return SCHEDULE_TARGET_INSTRUCTION;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_DATE_INDEX:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return SCHEDULE_DATE_INSTRUCTION;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_START_TIME_INDEX:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return SCHEDULE_START_TIME_INSTRUCTION;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_END_TIME_INDEX:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return SCHEDULE_END_TIME_INSTRUCTION;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_DOCTOR_NAME_INDEX:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return SCHEDULE_DOCTOR_NAME_INSTRUCTION;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_DOCTOR_NRIC_INDEX:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return SCHEDULE_DOCTOR_NRIC_INSTRUCTION;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_PATIENT_NAME_INDEX:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return SCHEDULE_PATIENT_NAME_INSTRUCTION;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_PATIENT_NRIC_INDEX:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return SCHEDULE_PATIENT_NRIC_INSTRUCTION;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_MAX_ARGUMENTS:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return COMMAND_COMPLETE_MESSAGE;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            throw new Error(UNEXPECTED_SCENARIO_MESSAGE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public int removeArgumentForCommand(List\u003cString\u003e arguments, int argumentIndex) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        arguments.remove(argumentIndex - 1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return argumentIndex - 1;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public int getMaximumArguments() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return SCHEDULE_MAX_ARGUMENTS;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public String prepareArguments(List\u003cString\u003e arguments) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        StringBuilder preparedString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        preparedString.append(ScheduleCommand.COMMAND_WORD + \" \");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        int index \u003d MIN_ARGUMENT_INDEX;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        for (String argument : arguments) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            if (argument.isEmpty()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            preparedString.append(prefixScheduleArgument(index, argument));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            preparedString.append(\" \");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return preparedString.toString().trim();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Given an argument and an index that represents which field this argument belongs to in the \u0027schedule\u0027 command,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * prefix and return the edited argument."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @param index    the index that represents which field the argument belongs to in the \u0027schedule\u0027 command"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @param argument the specified argument"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @return the prefixed argument"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private String prefixScheduleArgument(int index, String argument) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        switch (index) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_TARGET_INDEX:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return argument;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_DATE_INDEX:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return PREFIX_DATE + argument;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_START_TIME_INDEX:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return PREFIX_START_TIME + argument;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_END_TIME_INDEX:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return PREFIX_END_TIME + argument;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_DOCTOR_NAME_INDEX:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return PREFIX_DOCTOR_NAME + argument;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_DOCTOR_NRIC_INDEX:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return PREFIX_DOCTOR_NRIC + argument;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_PATIENT_NAME_INDEX:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return PREFIX_PATIENT_NAME + argument;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_PATIENT_NRIC_INDEX:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return PREFIX_PATIENT_NRIC + argument;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            throw new Error(UNEXPECTED_SCENARIO_MESSAGE);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public boolean isArgumentValid(List\u003cString\u003e arguments, int argumentIndex, String userInput) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        switch (argumentIndex) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_TARGET_INDEX:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return StringUtil.isNonZeroUnsignedInteger(userInput);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_DATE_INDEX:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            return (new Date(userInput)).isValid();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_START_TIME_INDEX:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            return new Time(userInput).isValidTime();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_END_TIME_INDEX:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            Time startTime \u003d new Time(arguments.get(SCHEDULE_START_TIME_INDEX));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            Time endTime \u003d new Time(userInput);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            return (new Time(userInput)).isValidTime() \u0026\u0026 startTime.comesStrictlyBefore(endTime);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_DOCTOR_NAME_INDEX: case SCHEDULE_PATIENT_NAME_INDEX:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return Name.isValidName(userInput);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_DOCTOR_NRIC_INDEX: case SCHEDULE_PATIENT_NRIC_INDEX:"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return Nric.isValidNric(userInput);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            throw new Error(UNEXPECTED_SCENARIO_MESSAGE);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public String retrieveInvalidArgumentExceptionMessage(List\u003cString\u003e arguments, int argumentIndex) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        switch (argumentIndex) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_TARGET_INDEX:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return SCHEDULE_INVALID_INDEX_MESSAGE;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_DATE_INDEX:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return SCHEDULE_INVALID_DATE_MESSAGE;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_START_TIME_INDEX:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return SCHEDULE_INVALID_START_TIME_MESSAGE;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_END_TIME_INDEX:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return String.format(SCHEDULE_INVALID_END_TIME_MESSAGE, arguments.get(SCHEDULE_START_TIME_INDEX));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_DOCTOR_NAME_INDEX:"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_PATIENT_NAME_INDEX:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_DOCTOR_NRIC_INDEX:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case SCHEDULE_PATIENT_NRIC_INDEX:"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return Nric.MESSAGE_NRIC_CONSTRAINTS;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            throw new Error(UNEXPECTED_SCENARIO_MESSAGE);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public boolean isCurrentFieldSkippable(int argumentIndex) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public String getArgumentManagerType() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return ScheduleCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tristonpang": 235,
      "GaryGohYP": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/argumentmanagers/UpdateArgumentManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "package seedu.address.model.argumentmanagers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMMENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DIAGNOSIS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TREATMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.patient.Diagnosis;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.patient.Treatment;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.person.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tristonpang"
        },
        "content": " * ArgumentManager that handles management and recording of arguments for an intuitive \u0027update\u0027 command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tristonpang"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "public class UpdateArgumentManager extends ArgumentManager {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String UPDATE_TARGET_INSTRUCTION \u003d \"Please enter the index of the patient whose medical record \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            + \"will be updated\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String UPDATE_DATE_INSTRUCTION \u003d \"Please enter the date of the medical record entry\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String UPDATE_DIAGNOSIS_INSTRUCTION \u003d \"Please enter the patient\u0027s diagnosis\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String UPDATE_TREATMENT_INSTRUCTION \u003d \"Please enter the patient\u0027s treatment\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String UPDATE_COMMENTS_INSTRUCTION \u003d \"Please enter any comments for this medical record entry\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String UPDATE_INVALID_INDEX_MESSAGE \u003d \"Index must be a non-zero positive integer\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String UPDATE_INVALID_DIAGNOSIS_MESSAGE \u003d \"Invalid diagnosis. Diagnosis cannot be blank\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public static final String UPDATE_INVALID_TREATMENT_MESSAGE \u003d \"Invalid treatment. Treatment cannot be blank\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int UPDATE_MAX_ARGUMENTS \u003d 5;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int UPDATE_TARGET_INDEX \u003d 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int UPDATE_DATE_INDEX \u003d 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int UPDATE_DIAGNOSIS_INDEX \u003d 2;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int UPDATE_TREATMENT_INDEX \u003d 3;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static final int UPDATE_COMMENTS_INDEX \u003d 4;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private static String UPDATE_INVALID_DATE_MESSAGE;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public int addArgumentForCommand(List\u003cString\u003e arguments, int argumentIndex, String userInput) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        arguments.add(userInput);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return argumentIndex + 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public String retrieveInstruction(List\u003cString\u003e arguments, int argumentIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        switch (argumentIndex) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case UPDATE_TARGET_INDEX:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return UPDATE_TARGET_INSTRUCTION;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case UPDATE_DATE_INDEX:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return UPDATE_DATE_INSTRUCTION;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case UPDATE_DIAGNOSIS_INDEX:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return UPDATE_DIAGNOSIS_INSTRUCTION;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case UPDATE_TREATMENT_INDEX:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return UPDATE_TREATMENT_INSTRUCTION;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case UPDATE_COMMENTS_INDEX:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return UPDATE_COMMENTS_INSTRUCTION;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case UPDATE_MAX_ARGUMENTS:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return COMMAND_COMPLETE_MESSAGE;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            throw new Error(UNEXPECTED_SCENARIO_MESSAGE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public int removeArgumentForCommand(List\u003cString\u003e arguments, int argumentIndex) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        arguments.remove(argumentIndex - 1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return argumentIndex - 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public int getMaximumArguments() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return UPDATE_MAX_ARGUMENTS;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public String prepareArguments(List\u003cString\u003e arguments) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        StringBuilder preparedString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        preparedString.append(UpdateCommand.COMMAND_WORD + \" \");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        int index \u003d MIN_ARGUMENT_INDEX;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        for (String argument : arguments) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            if (argument.isEmpty()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            preparedString.append(prefixUpdateArgument(index, argument));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            preparedString.append(\" \");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return preparedString.toString().trim();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Given an argument and an index that represents which field this argument belongs to in the \u0027schedule\u0027 command,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * prefix and return the edited argument."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @param index    the index that represents which field the argument belongs to in the \u0027schedule\u0027 command"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @param argument the specified argument"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * @return the prefixed argument"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private String prefixUpdateArgument(int index, String argument) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        switch (index) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case UPDATE_TARGET_INDEX:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return argument;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case UPDATE_DATE_INDEX:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return PREFIX_DATE + argument;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case UPDATE_DIAGNOSIS_INDEX:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return PREFIX_DIAGNOSIS + argument;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case UPDATE_TREATMENT_INDEX:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return PREFIX_TREATMENT + argument;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case UPDATE_COMMENTS_INDEX:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            String resultArg \u003d PREFIX_COMMENT + argument;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return resultArg.replace(\",\", \" \" + PREFIX_COMMENT).trim();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            throw new Error(UNEXPECTED_SCENARIO_MESSAGE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public boolean isArgumentValid(List\u003cString\u003e arguments, int argumentIndex, String userInput) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        switch (argumentIndex) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case UPDATE_TARGET_INDEX:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return StringUtil.isNonZeroUnsignedInteger(userInput);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case UPDATE_DATE_INDEX:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            Date date \u003d new Date(userInput);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            if (!date.isValid()) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                UPDATE_INVALID_DATE_MESSAGE \u003d date.getInvalidReason();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case UPDATE_DIAGNOSIS_INDEX:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return new Diagnosis(userInput).isValid();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case UPDATE_TREATMENT_INDEX:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return new Treatment(userInput).isValid();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case UPDATE_COMMENTS_INDEX:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            throw new Error(UNEXPECTED_SCENARIO_MESSAGE);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public String retrieveInvalidArgumentExceptionMessage(List\u003cString\u003e arguments, int argumentIndex) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        switch (argumentIndex) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case UPDATE_TARGET_INDEX:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return UPDATE_INVALID_INDEX_MESSAGE;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case UPDATE_DATE_INDEX:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return UPDATE_INVALID_DATE_MESSAGE;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case UPDATE_DIAGNOSIS_INDEX:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return UPDATE_INVALID_DIAGNOSIS_MESSAGE;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case UPDATE_TREATMENT_INDEX:"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            return UPDATE_INVALID_TREATMENT_MESSAGE;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            throw new Error(UNEXPECTED_SCENARIO_MESSAGE);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public boolean isCurrentFieldSkippable(int argumentIndex) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return argumentIndex \u003d\u003d UPDATE_COMMENTS_INDEX;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public String getArgumentManagerType() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        return UpdateCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tristonpang": 203
    }
  },
  {
    "path": "src/main/java/seedu/address/model/doctor/Doctor.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package seedu.address.model.doctor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.AppointmentManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.storage.XmlAdaptedDoctor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.storage.XmlAdaptedPerson;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * Represents a Doctor in the address book."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class Doctor extends Person {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String IS_AVAILABLE \u003d \"AVAILABLE\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String NOT_AVAILABLE \u003d \"BUSY\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private final MedicalDepartment dept;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Creates a new Doctor object based on given details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * All field must be present and non-null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public Doctor(Name name, Nric nric, Phone phone, Email email, Address address, Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                  MedicalDepartment dept) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        super(name, nric, phone, email, address, tags);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        requireAllNonNull(dept);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.dept \u003d dept;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Creates a new Doctor object based on given details."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * All field must be present and non-null."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public Doctor(Name name, Nric nric, Phone phone, Email email, Address address, Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                  ArrayList\u003cAppointment\u003e appointmentList, MedicalDepartment modelMedicalDept) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        super(name, nric, phone, email, address, tags, appointmentList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        requireAllNonNull(modelMedicalDept);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.dept \u003d modelMedicalDept;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Creates a new Doctor object based on given details."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * All field must be present and non-null."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public Doctor(Name name, Nric nric, Phone phone, Email email, Address address, Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                  Appointment appointment, MedicalDepartment modelMedicalDept) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        super(name, nric, phone, email, address, tags, appointment);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        requireAllNonNull(modelMedicalDept);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.dept \u003d modelMedicalDept;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Returns Medical Department of this doctor."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public MedicalDepartment getMedicalDepartment() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return this.dept;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Returns the availability status of the Doctor, whether free or busy at the moment."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public String currentAvailStatus() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (AppointmentManager.isAnyAppointmentOngoing(this.getAppointmentList())) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return NOT_AVAILABLE;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return IS_AVAILABLE;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (obj instanceof Doctor) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            Doctor otherDoctor \u003d (Doctor) obj;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return super.equals(otherDoctor) \u0026\u0026 otherDoctor.getMedicalDepartment().equals(getMedicalDepartment());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return Objects.hash(getName(), getNric(), getPhone(), getEmail(), getAddress(), dept, getTags());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(\" NRIC: \")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(getNric())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(\" Medical Department: \")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(getMedicalDepartment())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(\" Latest Appointment: \")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(getAppointment())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(\" AppointmentList: \")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(getAppointmentList())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Returns a Xml Adapted version of this doctor object."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Overwrites the method in the super class, {@code Person}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Asserts that this person is an instance of a Doctor."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public XmlAdaptedPerson toXmlVersion(Person source) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assert source instanceof Doctor;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return XmlAdaptedDoctor.adaptToXml((Doctor) source);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 125,
      "nelvintan": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/doctor/MedicalDepartment.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package seedu.address.model.doctor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * Represents a Doctor\u0027s Medical Department in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class MedicalDepartment {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String MESSAGE_DEPTNAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            \"Medical Department should only contain alphabetic characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String DEPTNAME_VALIDATION_REGEX \u003d \"[\\\\p{Alpha}][\\\\p{Alpha} ]*\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public final String deptName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Constructs a {@code MedicalDepartment}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @param deptName A valid medical department."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public MedicalDepartment(String deptName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        requireNonNull(deptName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        checkArgument(isValidMedDept(deptName), MESSAGE_DEPTNAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.deptName \u003d deptName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Checks if the string is a valid medical department name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @param medDept Medical Department name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @return True if it is a valid name as a medical department."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static boolean isValidMedDept(String medDept) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return medDept.matches(DEPTNAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (obj instanceof MedicalDepartment) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            MedicalDepartment department \u003d (MedicalDepartment) obj;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return (department.deptName.equalsIgnoreCase(this.deptName));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        return deptName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 1,
      "guestuser0123": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/Diagnosis.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": " * Represents a diagnosis in a medical record."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "public class Diagnosis {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * The first character of the diagnosis must not be a whitespace,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public static final String DIAGNOSIS_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public static final String MESSAGE_DIAGNOSIS_CONSTRAINTS \u003d \"Diagnosis can take any values, \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            + \"and should not be blank.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    /** String representation of the diagnosis */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private String diagnosis;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public Diagnosis (String diagnosis) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        this.diagnosis \u003d diagnosis;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * @return whether this diagnosis is a valid diagnosis."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public boolean isValid() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return this.diagnosis.matches(DIAGNOSIS_VALIDATION_REGEX) \u0026\u0026 !MedicalRecord.hasInvalidPrefix(this.diagnosis);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public String getInvalidReason() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (!this.diagnosis.matches(DIAGNOSIS_VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            return MESSAGE_DIAGNOSIS_CONSTRAINTS;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        } else if (MedicalRecord.hasInvalidPrefix(this.diagnosis)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            return MedicalRecord.MESSAGE_INVALID_PREFIX_USED;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            return \"Diagnosis is valid\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (obj instanceof Diagnosis) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            Diagnosis otherDiagnosis \u003d (Diagnosis) obj;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            return diagnosis.equals(otherDiagnosis.diagnosis);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return this.diagnosis;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GaryGohYP": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/MedicalRecord.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.model.person.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.model.person.DisplayableAttribute;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": " * Represents a Person\u0027s Medical Record in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "public class MedicalRecord extends DisplayableAttribute {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public static final String MESSAGE_MEDICAL_RECORD_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            \"Person medical record can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public static final String MESSAGE_INVALID_PREFIX_USED \u003d \"Only prefixes dg/, tr/ and c/ should be used for \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            + \"diagnosis, treatment, and comments respectively. Diagnosis:, Treatment: and Comments: are invalid.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public static final MedicalRecord DEFAULT_MEDICAL_RECORD \u003d new MedicalRecord(\"\", \"\", \"\", \"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public final Date date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public final Diagnosis diagnosis;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public final Treatment treatment;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public final String comments;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * Creates a medical record with the given string. Used when converting an XmlAdaptedMedicalRecord into a"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * MedicalRecord or in JUnit testing."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public MedicalRecord(String medicalRecord) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        requireNonNull(medicalRecord);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        this.value \u003d medicalRecord;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        List\u003cString\u003e valueList \u003d Arrays.asList(value.split(\"(, Diagnosis: |, Treatment: |, Comments: )\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        this.date \u003d new Date(valueList.get(0));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        this.diagnosis \u003d new Diagnosis(valueList.get(1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        this.treatment \u003d new Treatment(valueList.get(2));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        this.comments \u003d valueList.get(3);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * Creates a medical record with the specified inputs. Used when taking in inputs from parser."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public MedicalRecord(String date, String diagnosis, String treatment, String comments) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        requireAllNonNull(date, diagnosis, treatment);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        String actualComments \u003d comments;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (actualComments \u003d\u003d null || actualComments.equals(\"\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            actualComments \u003d \"-\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        this.date \u003d new Date(date);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        this.diagnosis \u003d new Diagnosis(diagnosis);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        this.treatment \u003d new Treatment(treatment);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        this.comments \u003d actualComments;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        this.value \u003d date + \",\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                + \" Diagnosis: \" + diagnosis + \",\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                + \" Treatment: \" + treatment + \",\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                + \" Comments: \" + actualComments;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * Checks if the user has input invalid prefix as a value for a field."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * @param value the value of the field to be checked."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * @return true if an invalid prefix is used in a value for a field. Otherwise return false."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public static boolean hasInvalidPrefix(String value) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return value.contains(\"Diagnosis:\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                || value.contains(\"Treatment:\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                || value.contains(\"Comments:\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private boolean hasValidDate() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return this.date.isValid();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private boolean hasValidDiagnosis() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return this.diagnosis.isValid();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private boolean hasValidTreatment() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return this.treatment.isValid();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private boolean hasValidComments() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return !hasInvalidPrefix(comments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public boolean isValidNewMedicalRecord() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return hasValidDate()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                \u0026\u0026 hasValidDiagnosis()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                \u0026\u0026 hasValidTreatment()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                \u0026\u0026 hasValidComments();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public String getInvalidReason() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (!hasValidDate()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            return this.date.getInvalidReason();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        } else if (!hasValidDiagnosis()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            return diagnosis.getInvalidReason();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        } else if (!hasValidTreatment()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            return treatment.getInvalidReason();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        } else if (!hasValidComments()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            return MESSAGE_INVALID_PREFIX_USED;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            return \"Medical record is valid.\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return this.date.toString();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public String getDiagnosis() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return this.diagnosis.toString();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public String getTreatment() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return this.treatment.toString();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public String getComments() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return this.comments;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public boolean isValidPreviousMedicalRecord() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return this.value !\u003d null;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                || (other instanceof MedicalRecord // instanceof handles nulls"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                \u0026\u0026 this.value.equals(((MedicalRecord) other).value)); // state check"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 1,
      "guestuser0123": 2,
      "GaryGohYP": 146
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/Patient.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.storage.XmlAdaptedPatient;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.storage.XmlAdaptedPerson;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * Represents a Patient in the address book."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class Patient extends Person {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private ArrayList\u003cMedicalRecord\u003e medicalRecordLibrary \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private MedicalRecord latestMedicalRecord;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Creates a new Patient object based on given details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * An empty {@code MedicalRecord} will be created by default for the patient."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * All field must be present and non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public Patient(Name name, Nric nric, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        super(name, nric, phone, email, address, tags);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        this.latestMedicalRecord \u003d MedicalRecord.DEFAULT_MEDICAL_RECORD;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        this.medicalRecordLibrary \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * Creates a Patient object based on given details."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * All field must be present and non-null."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public Patient(Name name, Nric nric, Phone phone, Email email, Address address, Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                   ArrayList\u003cAppointment\u003e appointmentList, MedicalRecord medicalRecord) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        super(name, nric, phone, email, address, tags, appointmentList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        this.latestMedicalRecord \u003d medicalRecord;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (!latestMedicalRecord.equals(MedicalRecord.DEFAULT_MEDICAL_RECORD)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            this.medicalRecordLibrary.add(medicalRecord);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public Patient(Name name, Nric nric, Phone phone, Email email, Address address, Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                   MedicalRecord medicalRecord) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        super(name, nric, phone, email, address, tags);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.latestMedicalRecord \u003d medicalRecord;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (!latestMedicalRecord.equals(MedicalRecord.DEFAULT_MEDICAL_RECORD)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            this.medicalRecordLibrary.add(medicalRecord);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public Patient(Name name, Nric nric, Phone phone, Email email, Address address, Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                   ArrayList\u003cAppointment\u003e appointmentList, MedicalRecord medicalRecord,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                   ArrayList\u003cMedicalRecord\u003e medicalRecordLibrary) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        super(name, nric, phone, email, address, tags, appointmentList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        this.latestMedicalRecord \u003d medicalRecord;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        this.medicalRecordLibrary \u003d medicalRecordLibrary;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public Patient(Name name, Nric nric, Phone phone, Email email, Address address, Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                   ArrayList\u003cAppointment\u003e appointmentList, ArrayList\u003cMedicalRecord\u003e medicalRecordLibrary) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        super(name, nric, phone, email, address, tags, appointmentList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        this.medicalRecordLibrary \u003d medicalRecordLibrary;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (!medicalRecordLibrary.isEmpty()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            latestMedicalRecord \u003d medicalRecordLibrary.get(0);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            latestMedicalRecord \u003d MedicalRecord.DEFAULT_MEDICAL_RECORD;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public Patient(Name name, Nric nric, Phone phone, Email email, Address address, Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                   ArrayList\u003cMedicalRecord\u003e medicalRecordLibrary) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        super(name, nric, phone, email, address, tags);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.medicalRecordLibrary \u003d medicalRecordLibrary;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (!medicalRecordLibrary.isEmpty()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            latestMedicalRecord \u003d medicalRecordLibrary.get(0);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            latestMedicalRecord \u003d MedicalRecord.DEFAULT_MEDICAL_RECORD;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Creates a new Patient object based on given details."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * All field must be present and non-null."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public Patient(Name name, Nric nric, Phone phone, Email email, Address address, Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                   Appointment appointment, MedicalRecord medicalRecord) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        super(name, nric, phone, email, address, tags, appointment);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        this.latestMedicalRecord \u003d medicalRecord;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        this.medicalRecordLibrary \u003d new ArrayList\u003c\u003e(Arrays.asList(medicalRecord));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public MedicalRecord getMedicalRecord() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return this.latestMedicalRecord;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public ArrayList\u003cMedicalRecord\u003e getMedicalRecordLibrary() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return this.medicalRecordLibrary;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "     * Creates a keyword array for the {@code Patient}\u0027s {@code MedicalRecord} that lists all the relevant details."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "     * For use in {@code PersonContainsKeywordPredicate}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "    public ArrayList\u003cString\u003e getMedicalRecordKeywords() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        ArrayList\u003cString\u003e keywordsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        for (MedicalRecord record : this.medicalRecordLibrary) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "            keywordsList.add(record.getDate());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "            keywordsList.add(record.getDiagnosis());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "            keywordsList.add(record.getTreatment());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "            keywordsList.add(record.getComments());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        return keywordsList;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Check if the patient is the same as other patient."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @param otherPatient The other patient to compare to."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @return True if the two patient are the same."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public boolean isSamePerson(Patient otherPatient) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (otherPatient \u003d\u003d this) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            return otherPatient !\u003d null \u0026\u0026 otherPatient.getNric().equals(getNric());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (obj instanceof Patient) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            Patient otherPatient \u003d (Patient) obj;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return super.equals(otherPatient);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return Objects.hash(getName(), getNric(), getPhone(), getEmail(), getAddress(), getMedicalRecord(),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                getMedicalRecordLibrary(), getTags());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(\" NRIC: \")"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(getNric())"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(\" Medical Records: \")"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(getMedicalRecord())"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(\" Latest Appointment: \")"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(getAppointment())"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(\" AppointmentList: \")"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(getAppointmentList())"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Returns a Xml Adapted version of this patient object."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Overwrites the method in the super class, {@code Person}."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Asserts that this person is an instance of a Patient."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public XmlAdaptedPerson toXmlVersion(Person source) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assert source instanceof Patient;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return XmlAdaptedPatient.adaptToXml((Patient) source);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 16,
      "guestuser0123": 107,
      "GaryGohYP": 42,
      "nelvintan": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/Treatment.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": " * Represents a diagnosis in a medical record."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "public class Treatment {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * The first character of the treatment must not be a whitespace,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public static final String TREATMENT_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public static final String MESSAGE_TREATMENT_CONSTRAINTS \u003d \"Treatments can take any values, \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            + \"and should not be blank.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    /** String representation of the treatment */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private String treatment;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public Treatment (String treatment) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        this.treatment \u003d treatment;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * @return whether this treatment is a valid treatment."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public boolean isValid() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return this.treatment.matches(TREATMENT_VALIDATION_REGEX) \u0026\u0026 !MedicalRecord.hasInvalidPrefix(this.treatment);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public String getInvalidReason() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (!this.treatment.matches(TREATMENT_VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            return MESSAGE_TREATMENT_CONSTRAINTS;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        } else if (MedicalRecord.hasInvalidPrefix(this.treatment)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            return MedicalRecord.MESSAGE_INVALID_PREFIX_USED;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            return \"Treatment is valid.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (obj instanceof Treatment) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            Treatment otherTreatment \u003d (Treatment) obj;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            return treatment.equals(otherTreatment.treatment);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return this.treatment;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GaryGohYP": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Appointment.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * Represents a Person\u0027s Appointment in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "public class Appointment extends DisplayableAttribute {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /** Number of parts of an appointment */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private static int numberOfParts \u003d 7;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /** String value of whole appointment **/"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /** Date of appointment */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /** Starting time of appointment */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private Time startTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /** Ending time of appointment */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private Time endTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /** Name of doctor */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private Name doctorName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /** Medical department of doctorName */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private Nric doctorNric;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /** Name of patient */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private Name patientName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /** nric of patient */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private Nric patientNric;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    // Constructor used during junit testing."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public Appointment(String appointment) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        requireNonNull(appointment);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        value \u003d appointment;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        String[] parts \u003d value.split(\",\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (parts.length \u003d\u003d numberOfParts) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            date \u003d new Date(parts[0].trim());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            startTime \u003d new Time(parts[1].trim());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            endTime \u003d new Time(parts[2].trim());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            doctorName \u003d new Name(parts[3].trim());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            doctorNric \u003d new Nric(parts[4].trim());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            patientName \u003d new Name(parts[5].trim());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            patientNric \u003d new Nric(parts[6].trim());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public Appointment(Date date, Time startTime, Time endTime, Name doctorName, Nric doctorNric, Name patientName,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                       Nric patientNric) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.doctorName \u003d doctorName;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.doctorNric \u003d doctorNric;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.patientName \u003d patientName;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.patientNric \u003d patientNric;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        value \u003d date.toString() + \",\" + startTime.toString() + \",\" + endTime.toString()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + \",\" + doctorName.toString() + \",\" + doctorNric.toString() + \",\" + patientName.toString()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + \",\" + patientNric.toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    // Constructor used when taking in inputs from parser."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public Appointment(String date, String startTime, String endTime,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                       String doctorName, String doctorNric, String patientName, String patientNric) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        value \u003d date + \",\" + startTime + \",\" + endTime"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                + \",\" + doctorName + \",\" + doctorNric + \",\" + patientName + \",\" + patientNric;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.date \u003d new Date(date);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.startTime \u003d new Time(startTime);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.endTime \u003d new Time(endTime);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.doctorName \u003d new Name(doctorName);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.doctorNric \u003d new Nric(doctorNric);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.patientName \u003d new Name(patientName);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.patientNric \u003d new Nric(patientNric);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public String getDateString() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return date.toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public String getStartTimeString() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return startTime.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public String getEndTimeString() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return endTime.toString();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public String getDoctorNameString() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return doctorName.toString();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public String getDoctorNricString() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return doctorNric.toString();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public Time getStartTime() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public Time getEndTime() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public Name getDoctorName() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return doctorName;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public Nric getDoctorNric() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return doctorNric;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public String getPatientNameString() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return patientName.toString();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public Name getPatientName() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return patientName;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public Nric getPatientNric() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return patientNric;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public String getPatientNricString() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return patientNric.toString();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Checks if there are any clashes between another appointment"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * compared to this appointment."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param otherAppointment another appointment"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @return Boolean if there is any clash."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public boolean isClash(Appointment otherAppointment) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // different date means definitely no clash"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (!date.equals(otherAppointment.date)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Time otherStartTime \u003d otherAppointment.startTime;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Time otherEndTime \u003d otherAppointment.endTime;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // 3 Cases where other appointment clashes with current appointment"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (otherStartTime.comesBefore(startTime) \u0026\u0026 otherEndTime.comesAfter(endTime)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            // Case 1: other appointment\u0027s start time is before current appointment\u0027s start time"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            // and other appointment\u0027s end time is after current appointment\u0027s end time"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        } else if (otherStartTime.comesAfter(startTime) \u0026\u0026 otherStartTime.comesBefore(endTime)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            // Case 2: other appointment\u0027s start time is after current appointment\u0027s start time"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            // and before current appointment\u0027s end time"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        } else if (otherEndTime.comesBefore(endTime) \u0026\u0026 otherEndTime.comesAfter(startTime)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            // Case 3: Other appointment\u0027s end time is before current appointment\u0027s end time"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            // and after current appointment\u0027s start time"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param time a given time input"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @return whether the appointment is ongoing at the given date and time."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public boolean isOngoing(String date, String time) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // If different date, we know for sure Appointment is not ongoing."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (!this.date.equals(new Date(date))) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Time givenTime \u003d new Time(time);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return (givenTime.comesAfter(startTime) \u0026\u0026 givenTime.comesBefore(endTime));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Returns true if instance is a valid Appointment object."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public boolean isOfCorrectNumberOfParts() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        String[] parts \u003d value.split(\",\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return (\"\".equals(value) || parts.length \u003d\u003d Appointment.numberOfParts);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param person to be tested"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @return boolean on whether the person is a valid doctor."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public boolean hasValidDoctor(Person person) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Doctor doctor \u003d (Doctor) person;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Name name \u003d doctor.getName();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Nric doctorNric \u003d doctor.getNric();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return doctorName.equals(name) \u0026\u0026 this.doctorNric.equals(doctorNric);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param person to be tested."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @return boolean on whether the person is a valid patient."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public boolean hasValidPatient(Person person) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Patient patient \u003d (Patient) person;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Name name \u003d patient.getName();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Nric nric \u003d patient.getNric();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return patientName.equals(name) \u0026\u0026 patientNric.equals(nric);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @return boolean on whether the start time comes strictly before end time."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public boolean hasValidStartandEndTime() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return (startTime.comesStrictlyBefore(endTime));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Check only used in junit testing."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @return whether an appointment is valid or not."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public boolean isValidAppointment() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return isOfCorrectNumberOfParts() \u0026\u0026 hasValidStartandEndTime();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (obj instanceof Appointment) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            Appointment appointment \u003d (Appointment) obj;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return appointment.value.toUpperCase().equals(this.value.toUpperCase());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 30,
      "GaryGohYP": 1,
      "nelvintan": 223
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/AppointmentManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * Manages {@code Appointment} objects to check for clashes."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "public class AppointmentManager {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String PSEUDO_DOCTOR_NAME \u003d \"JOHN DOE\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String PSEUDO_DOCTOR_NRIC \u003d \"S2401932B\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String PSEUDO_PATIENT_NAME \u003d \"BOB\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String PSEUDO_PATIENT_NRIC \u003d \"S8758412G\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Checks if there are any clashes between another appointment"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * compared to all the appoinments in the appointment list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param appointmentList list of appointments"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param otherAppointment  another appointment"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @return Boolean if there is any clash between other appointment and the list of appointments."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static boolean isClash(ArrayList\u003cAppointment\u003e appointmentList, Appointment otherAppointment) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        for (Appointment currentAppointment : appointmentList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            if (currentAppointment.isClash(otherAppointment)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Checks if there are any clashes between another appointment."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @param appointment current appointment"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @param otherAppointment  another appointment"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @return Boolean if there is any clash between other appointment and current appointment"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static boolean isClash(Appointment appointment, Appointment otherAppointment) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return appointment.isClash(otherAppointment);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Adds an appointment to a list of appointments."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param appointmentList list of appointments"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param appointment  another appointment"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @return appointment list with the new appointment added."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static ArrayList\u003cAppointment\u003e add(ArrayList\u003cAppointment\u003e appointmentList, Appointment appointment) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointmentList.add(appointment);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return appointmentList;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Deletes an appointment from a list of appointments if it"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * matches any appointment in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param appointmentList list of appointments"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param appointment  another appointment"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @return appointment list without the matched appointment if it is found."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static ArrayList\u003cAppointment\u003e delete(ArrayList\u003cAppointment\u003e appointmentList, Appointment appointment) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointmentList.remove(appointment);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return appointmentList;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param appointmentList a list of Appointments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @return a boolean stating if there exists any appointment ongoing at the current datetime."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static boolean isAnyAppointmentOngoing(ArrayList\u003cAppointment\u003e appointmentList) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (appointmentList \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // We first retrieve the current date and time in the same format as Appointment\u0027s."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        String[] dateAndTime \u003d getCurrentDateAndTime().split(\",\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        String currentDate \u003d dateAndTime[0];"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        String currentTime \u003d dateAndTime[1];"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // System.out.println(currentDate + \" \" + currentTime);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // We check if the current time lies in the time interval of any Appointment."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        for (Appointment appt : appointmentList) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            if (appt.value.equals(\"\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            } else if (appt.isOngoing(currentDate, currentTime)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @param appointmentList a list of Appointments."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @return a boolean stating if there exists any appointment ongoing base on given date time."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static boolean isAnyAppointmentOngoing(ArrayList\u003cAppointment\u003e appointmentList, Date date, Time startTime,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                                                  Time endTime) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (appointmentList \u003d\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // System.out.println(currentDate + \" \" + currentTime);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // We check if the current time lies in the time interval of any Appointment."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        for (Appointment appt : appointmentList) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            if (appt.value.equals(\"\")) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            } else if (appt.isClash(new Appointment(date.toString(), startTime.toString(), endTime.toString(),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    PSEUDO_DOCTOR_NAME, PSEUDO_DOCTOR_NRIC, PSEUDO_PATIENT_NAME, PSEUDO_PATIENT_NRIC))) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param patientNric Nric of patient."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param appointmentList Appointment List to be processed."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @return a new appointment list where all the appointments"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * with a patient that has the same Nric as input will be removed."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static ArrayList\u003cAppointment\u003e removeAppointmentsOfPatient(Nric patientNric,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                                                                     ArrayList\u003cAppointment\u003e appointmentList) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assert Nric.isValidNric(patientNric.toString()) : \"patient\u0027s nric should be valid\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ArrayList\u003cAppointment\u003e resultList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        for (Appointment appt : appointmentList) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            if (!appt.getPatientNric().equals(patientNric)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                resultList.add(appt);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return resultList;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param doctorNric Nric of doctor."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param appointmentList Appointment List to be processed."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @return a new appointment list where all the appointments"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * with a doctor that has the same Nric as input will be removed."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static ArrayList\u003cAppointment\u003e removeAppointmentsOfDoctor(Nric doctorNric,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                                                                    ArrayList\u003cAppointment\u003e appointmentList) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assert Nric.isValidNric(doctorNric.toString()) : \"doctor\u0027s nric should be valid\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ArrayList\u003cAppointment\u003e resultList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        for (Appointment appt : appointmentList) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            if (!appt.getDoctorNric().equals(doctorNric)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                resultList.add(appt);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return resultList;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param oldPatientName Name of patient before change."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param oldPatientNric Nric of patient before change."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param newPatientName Name of patient after change."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param newPatientNric Nric of patient after change."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param appointmentList Appointment List of the patient."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @return a new Appointment List where the appointments with the previous"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * patient\u0027s name and nric will be updated to reflect the new change."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static ArrayList\u003cAppointment\u003e changePatientNameAndNric(Name oldPatientName, Nric oldPatientNric,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                                                                  Name newPatientName, Nric newPatientNric,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                                                                  ArrayList\u003cAppointment\u003e appointmentList) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assert Name.isValidName(oldPatientName.toString()) : \"old patient\u0027s name should be valid\";"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assert Name.isValidName(newPatientName.toString()) : \"new patient\u0027s name should be valid\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assert Nric.isValidNric(oldPatientNric.toString()) : \"old patient\u0027s nric should be valid\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assert Nric.isValidNric(newPatientNric.toString()) : \"new patient\u0027s nric should be valid\";"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ArrayList\u003cAppointment\u003e newAppointmentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        for (Appointment appt : appointmentList) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            if (appt.getPatientName().equals(oldPatientName) \u0026\u0026 appt.getPatientNric().equals(oldPatientNric)) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                Appointment newAppt \u003d new Appointment(appt.getDate(), appt.getStartTime(), appt.getEndTime(),"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                        appt.getDoctorName(), appt.getDoctorNric(), newPatientName, newPatientNric);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                newAppointmentList.add(newAppt);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                newAppointmentList.add(appt);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return newAppointmentList;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param oldDoctorName Name of doctor before change."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param oldDoctorNric Nric of doctor before change."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param newDoctorName Name of doctor after change."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param newDoctorNric Nric of doctor after change."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param appointmentList Appointment List of the doctor."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @return a new Appointment List where the appointments with the previous"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * doctor\u0027s name and nric will be updated to reflect the new change."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static ArrayList\u003cAppointment\u003e changeDoctorNameAndNric(Name oldDoctorName, Nric oldDoctorNric,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                                                                  Name newDoctorName, Nric newDoctorNric,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                                                                  ArrayList\u003cAppointment\u003e appointmentList) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assert Name.isValidName(oldDoctorName.toString()) : \"old doctor\u0027s name should be valid\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assert Name.isValidName(newDoctorName.toString()) : \"new doctor\u0027s name should be valid\";"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assert Nric.isValidNric(oldDoctorNric.toString()) : \"old doctor\u0027s nric should be valid\";"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assert Nric.isValidNric(newDoctorNric.toString()) : \"new doctor\u0027s nric should be valid\";"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ArrayList\u003cAppointment\u003e newAppointmentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        for (Appointment appt : appointmentList) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            if (appt.getDoctorName().equals(oldDoctorName) \u0026\u0026 appt.getDoctorNric().equals(oldDoctorNric)) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                Appointment newAppt \u003d new Appointment(appt.getDate(), appt.getStartTime(), appt.getEndTime(),"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                        newDoctorName, newDoctorNric, appt.getPatientName(), appt.getPatientNric());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                newAppointmentList.add(newAppt);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                newAppointmentList.add(appt);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return newAppointmentList;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Extracts the current date and time from the java API for Singapore\u0027s timezone."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Afterwards, format of date and time will be changed to that of Appointment\u0027s for easy comparison."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @return a String containing the current date and time that aligns with the same format as Appointment."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private static String getCurrentDateAndTime() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return Date.getCurrentDate().toString() + \",\" + Time.getCurrentTime().toString();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 52,
      "nelvintan": 176
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Date.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import java.time.ZonedDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": " * Represents a date in the address book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * Dates should be in DD.MM.YYYY format. Date and month can be 1 or 2 digits long"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private static final String DATE_VALIDATION_REGEX \u003d \"^\\\\d{1,2}\\\\.\\\\d{1,2}\\\\.\\\\d{4}\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private static final String MESSAGE_DATE_INVALID_FORMAT_CONSTRAINTS \u003d \"Dates should be entered in \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            + \"DD.MM.YYYY format. Date and month can have 1 or 2 digits, but the year must be 4 digits.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private static final String MESSAGE_DATE_INVALID_IN_THE_PAST \u003d \"This date is in the past and not in the future: \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private static final String MESSAGE_DATE_INVALID_DOES_NOT_EXIST \u003d \"This date does not exist: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final ArrayList\u003cInteger\u003e monthsWithThirtyOneDays \u003d new ArrayList\u003c\u003e(Arrays.asList(1, 3, 5, 7, 8, 10,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            12));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final ArrayList\u003cInteger\u003e monthsWithThirtyDays \u003d new ArrayList\u003c\u003e(Arrays.asList(4, 6, 9, 11));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    /** String representation of the date */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public Date(String date) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * Checks if the date is a valid date."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * @return whether this date is a valid date."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public boolean isValid() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return isCorrectFormat()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                \u0026\u0026 doesExist()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                \u0026\u0026 !isInThePast();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private boolean isCorrectFormat() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return date.matches(DATE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * Checks if a given date in the correct format exists."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * @return whether given date exists."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private boolean doesExist() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (!isCorrectFormat()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        boolean result \u003d true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        List\u003cString\u003e valueList \u003d Arrays.asList(date.split(\"\\\\.\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        int date \u003d Integer.parseInt(valueList.get(0));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        int month \u003d Integer.parseInt(valueList.get(1));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        int year \u003d Integer.parseInt(valueList.get(2));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (date \u003c 1) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            result \u003d false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        } else if (monthsWithThirtyDays.contains(month) \u0026\u0026 (date \u003e 30)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            result \u003d false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        } else if (monthsWithThirtyOneDays.contains(month) \u0026\u0026 (date \u003e 31)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            result \u003d false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        } else if (month \u003d\u003d 2 \u0026\u0026 isLeapYear(year) \u0026\u0026 (date \u003e 29)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            result \u003d false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        } else if (month \u003d\u003d 2 \u0026\u0026 !isLeapYear(year) \u0026\u0026 (date \u003e 28)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            result \u003d false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        } else if (month \u003e 12) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Checks if the given date is in the past based on current date in Singapore\u0027s time zone."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @return whether the given date is in the past."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private boolean isInThePast() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ZonedDateTime zonedDateTime \u003d ZonedDateTime.now(ZoneId.of(\"Asia/Singapore\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        String stringZonedDateTime \u003d zonedDateTime.toString();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // Splitting output from API into a date part and a time part."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        String[] dateAndTimeParts \u003d stringZonedDateTime.split(\"T\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // Reformatting the order of the date."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        String currentDate \u003d dateAndTimeParts[0];"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        String[] dateParts \u003d currentDate.split(\"-\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        String year \u003d dateParts[0];"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        String month \u003d dateParts[1];"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        String day \u003d dateParts[2];"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        currentDate \u003d day + \".\" + month + \".\" + year;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return (isBefore(currentDate, date));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Checks if the given date is strictly before the current date."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * @param currentDate the current date."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @return whether the given date comes before the current date."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static boolean isBefore(String currentDate, String givenDate) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        List\u003cString\u003e dateParts \u003d Arrays.asList(givenDate.split(\"\\\\.\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        int givenDay \u003d Integer.parseInt(dateParts.get(0));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        int givenMonth \u003d Integer.parseInt(dateParts.get(1));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        int givenYear \u003d Integer.parseInt(dateParts.get(2));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        List\u003cString\u003e currentDateParts \u003d Arrays.asList(currentDate.split(\"\\\\.\"));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        int currentDay \u003d Integer.parseInt(currentDateParts.get(0));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        int currentMonth \u003d Integer.parseInt(currentDateParts.get(1));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        int currentYear \u003d Integer.parseInt(currentDateParts.get(2));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (givenYear \u003c currentYear) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        } else if (givenYear \u003e currentYear) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        } else if (givenMonth \u003c currentMonth) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        } else if (givenMonth \u003e currentMonth) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        } else if (givenDay \u003c currentDay) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static boolean isLeapYear(int year) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return (year % 4 \u003d\u003d 0) \u0026\u0026 (year % 100 !\u003d 0 || year % 400 \u003d\u003d 0);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public String getInvalidReason() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (isValid()) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            return \"Date is valid.\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        String reason;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (!isCorrectFormat()) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            reason \u003d MESSAGE_DATE_INVALID_FORMAT_CONSTRAINTS;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        } else if (isInThePast()) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            reason \u003d MESSAGE_DATE_INVALID_IN_THE_PAST + date;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            reason \u003d MESSAGE_DATE_INVALID_DOES_NOT_EXIST + date;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return reason;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static Date getCurrentDate() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        ZonedDateTime zonedDateTime \u003d ZonedDateTime.now(ZoneId.of(\"Asia/Singapore\"));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String stringZonedDateTime \u003d zonedDateTime.toString();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // Splitting output from API into a date part and a time part."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String[] dateAndTimeParts \u003d stringZonedDateTime.split(\"T\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // Reformatting the order of the date."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String currentDate \u003d dateAndTimeParts[0];"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String[] dateParts \u003d currentDate.split(\"-\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String year \u003d dateParts[0];"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String month \u003d dateParts[1];"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String day \u003d dateParts[2];"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        currentDate \u003d day + \".\" + month + \".\" + year;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return new Date(currentDate);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (obj instanceof Date) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            Date otherDate \u003d (Date) obj;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            return date.equals(otherDate.date);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 30,
      "GaryGohYP": 106,
      "nelvintan": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/DisplayableAttribute.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": " * Classes that extend this class can be displayed on the display panel"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "public abstract class DisplayableAttribute {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    //No fields yet, may want to consider adding fields and methods."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "GaryGohYP": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Nric.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * Represents a Patient\u0027s NRIC in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class Nric {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String MESSAGE_NRIC_INVALID_LENGTH \u003d \"NRIC length is invalid. It should only contain 9 \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + \"alphanumeric characters\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String MESSAGE_NRIC_INVALID \u003d \"NRIC is provided is invalid/does not exist. Please check again.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String MESSAGE_NRIC_CONSTRAINTS \u003d \"NRIC should contain only alphanumeric \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + \"characters, beginning with [S,T,F,G] characters followed by a 7 digits and ending with another \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + \"character\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String NRIC_VALIDATION_REGEX \u003d \"(?i)^[STFG]\\\\d{7}[A-Z]\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final int NRIC_LENGTH \u003d 9;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public final String code;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Constructs a {@code NRIC}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @param code A NRIC with valid format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public Nric(String code) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        requireNonNull(code);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        checkArgument(isValidNric(code));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Checks that the given {@code code} is a valid nric code."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static boolean isValidNric(String code) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String checkCode \u003d code.toUpperCase();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return hasValidLength(checkCode) \u0026\u0026 hasValidFormat(checkCode) \u0026\u0026 passCheckSumAlgo(checkCode);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Helper method to check if the {@code code} has a valid nric length."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static boolean hasValidLength(String code) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (code.length() !\u003d NRIC_LENGTH) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new IllegalArgumentException(MESSAGE_NRIC_INVALID_LENGTH);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Helper method to check if the {@code code} has a valid nric format."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static boolean hasValidFormat(String code) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (!code.matches(NRIC_VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new IllegalArgumentException(MESSAGE_NRIC_CONSTRAINTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Helper method to validate the last char of the nric code to ensure that it is a valid nric code."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static boolean passCheckSumAlgo(String code) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        char firstLetter \u003d code.charAt(0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        int firstDigit \u003d code.charAt(1) - \u00270\u0027;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        int secondDigit \u003d code.charAt(2) - \u00270\u0027;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        int thirdDigit \u003d code.charAt(3) - \u00270\u0027;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        int fourthDigit \u003d code.charAt(4) - \u00270\u0027;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        int fifthDigit \u003d code.charAt(5) - \u00270\u0027;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        int sixthDigit \u003d code.charAt(6) - \u00270\u0027;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        int seventhDigit \u003d code.charAt(7) - \u00270\u0027;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        char lastLetter \u003d code.charAt(8);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        int sum \u003d firstDigit * 2 + secondDigit * 7 + thirdDigit * 6 + fourthDigit * 5 + fifthDigit * 4"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + sixthDigit * 3 + seventhDigit * 2;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        switch (firstLetter) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        case \u0027T\u0027: case \u0027G\u0027:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            sum +\u003d 4;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        int remainder \u003d sum % 11;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (!hasValidLastChar(lastLetter, remainder, firstLetter)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new IllegalArgumentException(MESSAGE_NRIC_INVALID);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Helper method to match the last character base on the evaluated remainder using the checkSumAlgo."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static boolean hasValidLastChar(char toCompare, int remainder, char firstChar) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (firstChar \u003d\u003d \u0027S\u0027 || firstChar \u003d\u003d \u0027T\u0027) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            // 0\u003dJ, 1\u003dZ, 2\u003dI, 3\u003dH, 4\u003dG, 5\u003dF, 6\u003dE, 7\u003dD, 8\u003dC, 9\u003dB, 10\u003dA"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            switch (remainder) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            case 0:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                return toCompare \u003d\u003d \u0027J\u0027;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                return toCompare \u003d\u003d \u0027Z\u0027;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                return toCompare \u003d\u003d \u0027I\u0027;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            case 3:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                return toCompare \u003d\u003d \u0027H\u0027;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            case 4:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                return toCompare \u003d\u003d \u0027G\u0027;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            case 5:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                return toCompare \u003d\u003d \u0027F\u0027;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            case 6:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                return toCompare \u003d\u003d \u0027E\u0027;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            case 7:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                return toCompare \u003d\u003d \u0027D\u0027;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            case 8:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                return toCompare \u003d\u003d \u0027C\u0027;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            case 9:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                return toCompare \u003d\u003d \u0027B\u0027;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            case 10:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                return toCompare \u003d\u003d \u0027A\u0027;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            assert firstChar \u003d\u003d \u0027F\u0027 || firstChar \u003d\u003d \u0027G\u0027;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            // 0\u003dX, 1\u003dW, 2\u003dU, 3\u003dT, 4\u003dR, 5\u003dQ, 6\u003dP, 7\u003dN, 8\u003dM, 9\u003dL, 10\u003dK"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            switch (remainder) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            case 0:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                return toCompare \u003d\u003d \u0027X\u0027;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                return toCompare \u003d\u003d \u0027W\u0027;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                return toCompare \u003d\u003d \u0027U\u0027;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            case 3:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                return toCompare \u003d\u003d \u0027T\u0027;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            case 4:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                return toCompare \u003d\u003d \u0027R\u0027;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            case 5:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                return toCompare \u003d\u003d \u0027Q\u0027;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            case 6:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                return toCompare \u003d\u003d \u0027P\u0027;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            case 7:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                return toCompare \u003d\u003d \u0027N\u0027;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            case 8:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                return toCompare \u003d\u003d \u0027M\u0027;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            case 9:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                return toCompare \u003d\u003d \u0027L\u0027;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            case 10:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                return toCompare \u003d\u003d \u0027K\u0027;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Helper method to generate a valid NRIC code base on the given {@code codeNumber}. Returns a valid NRIC."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Prerequisites: Only used for generating NRIC beginning with char \u0027S\u0027."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Used only for JUnit Tests."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static String generateCode(int codeNumber) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        char lastChar \u003d \u0027A\u0027;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String code \u003d Integer.toString(codeNumber);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        int firstDigit \u003d code.charAt(0) - \u00270\u0027;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        int secondDigit \u003d code.charAt(1) - \u00270\u0027;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        int thirdDigit \u003d code.charAt(2) - \u00270\u0027;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        int fourthDigit \u003d code.charAt(3) - \u00270\u0027;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        int fifthDigit \u003d code.charAt(4) - \u00270\u0027;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        int sixthDigit \u003d code.charAt(5) - \u00270\u0027;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        int seventhDigit \u003d code.charAt(6) - \u00270\u0027;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        int sum \u003d firstDigit * 2 + secondDigit * 7 + thirdDigit * 6 + fourthDigit * 5 + fifthDigit * 4"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + sixthDigit * 3 + seventhDigit * 2;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        int remainder \u003d sum % 11;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // 0\u003dJ, 1\u003dZ, 2\u003dI, 3\u003dH, 4\u003dG, 5\u003dF, 6\u003dE, 7\u003dD, 8\u003dC, 9\u003dB, 10\u003dA"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        switch (remainder) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        case 0:"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            lastChar \u003d \u0027J\u0027;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            lastChar \u003d \u0027Z\u0027;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            lastChar \u003d \u0027I\u0027;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            lastChar \u003d \u0027H\u0027;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        case 4:"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            lastChar \u003d \u0027G\u0027;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        case 5:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            lastChar \u003d \u0027F\u0027;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        case 6:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            lastChar \u003d \u0027E\u0027;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        case 7:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            lastChar \u003d \u0027D\u0027;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        case 8:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            lastChar \u003d \u0027C\u0027;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        case 9:"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            lastChar \u003d \u0027B\u0027;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        case 10:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            lastChar \u003d \u0027A\u0027;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return codeNumber + \"\" + lastChar;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return this.code;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return obj \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                || (obj instanceof Nric // instanceof handles nulls"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \u0026\u0026 code.equalsIgnoreCase(((Nric) obj).code)); // state check"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return code.hashCode();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 238
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.storage.XmlAdaptedPerson;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private final Nric nric;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    // Common Data fields"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private Appointment appointment \u003d new Appointment(\"\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private ArrayList\u003cAppointment\u003e appointmentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * An empty {@code Appointment} will be created by default."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public Person(Name name, Nric nric, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        requireAllNonNull(name, phone, email, address, nric, tags);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public Person(Name name, Nric nric, Phone phone, Email email, Address address, Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                  Appointment appointment) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags, nric, appointment);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.appointment \u003d appointment;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointmentList.add(appointment);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public Person(Name name, Nric nric, Phone phone, Email email, Address address,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                  Set\u003cTag\u003e tags, ArrayList\u003cAppointment\u003e appointmentList) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags, appointmentList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.appointmentList \u003d appointmentList;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // Set appointment to be the last scheduled appointment"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (!this.appointmentList.isEmpty()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            appointment \u003d this.appointmentList.get(this.appointmentList.size() - 1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public Nric getNric() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return nric;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public Appointment getAppointment() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return appointment;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public ArrayList\u003cAppointment\u003e getAppointmentList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return appointmentList;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Empties out the AppointmentList to assist junit testing."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * This prevents appointments collected from different tests to clash."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void clearAppointmentList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointmentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Checks for clash with the appointment that is to be scheduled."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public boolean hasClash(Appointment newAppointment) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return AppointmentManager.isClash(appointmentList, newAppointment);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return otherPerson !\u003d null \u0026\u0026 otherPerson.getNric().equals(this.getNric());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Returns an Xml version of this Person instance."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * This method is to be overwritten by {@code Patient} and {@code Doctor} class."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public XmlAdaptedPerson toXmlVersion(Person source) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return XmlAdaptedPerson.adaptToXml(source);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \u0026\u0026 otherPerson.getNric().equals(getNric())"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return Objects.hash(name, phone, email, address, nric, tags, appointmentList);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(\" NRIC: \")"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(getNric())"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(\" Latest Appointment: \")"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(getAppointment())"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(\" Appointment List: \")"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(getAppointmentList())"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 36,
      "-": 121,
      "nelvintan": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/PersonContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GLOBAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL_DEPARTMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL_RECORD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": " * Tests that a {@code Person}\u0027s attributes matches any of the keywords given."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "public class PersonContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e personSearchKeywords;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public PersonContainsKeywordsPredicate(Map\u003cPrefix, List\u003cString\u003e\u003e personSearchKeywords) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.personSearchKeywords \u003d personSearchKeywords;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        builder.append(person.getName()).append(\" \")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .append(person.getNric()).append(\" \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                .append(person.getPhone()).append(\" \")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                .append(person.getEmail()).append(\" \")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                .append(person.getAddress().toString().replaceAll(\",\", \"\")).append(\" \")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                .append(person.getClass().getSimpleName()).append(\" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .map(x -\u003e x.toString().replaceAll(\"[\\\\[\\\\]]\", \"\"))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                .map(x -\u003e x + \" \")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .forEach(builder::append);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        if (person instanceof Doctor) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "            builder.append(((Doctor) person).getMedicalDepartment()).append(\" \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        } else if (person instanceof Patient) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "            builder.append(person.getNric()).append(\" \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "            for (String s : ((Patient) person).getMedicalRecordKeywords()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                builder.append(s + \" \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        boolean isAnyKeywordMatch \u003d personSearchKeywords.get(PREFIX_GLOBAL) \u003d\u003d null"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                || personSearchKeywords.get(PREFIX_GLOBAL).stream().anyMatch(keyword -\u003e {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                    return StringUtil.containsQueryIgnoreCase(builder.toString().replaceAll(\",\", \" \"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                            keyword);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                });"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        boolean isAnyNameMatch \u003d personSearchKeywords.get(PREFIX_NAME) \u003d\u003d null"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                || personSearchKeywords.get(PREFIX_NAME).stream()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                .anyMatch(name -\u003e StringUtil.containsQueryIgnoreCase(person.getName().toString(), name));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        boolean isAnyNricMatch \u003d personSearchKeywords.get(PREFIX_NRIC) \u003d\u003d null"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                || personSearchKeywords.get(PREFIX_NRIC).stream()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                .anyMatch(nric -\u003e StringUtil.containsQueryIgnoreCase(person.getNric().toString(), nric));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        boolean isAnyPhoneMatch \u003d personSearchKeywords.get(PREFIX_PHONE) \u003d\u003d null"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                || personSearchKeywords.get(PREFIX_PHONE).stream()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                .anyMatch(phone -\u003e StringUtil.containsQueryIgnoreCase(person.getPhone().toString(), phone));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        boolean isAnyEmailMatch \u003d personSearchKeywords.get(PREFIX_EMAIL) \u003d\u003d null"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                || personSearchKeywords.get(PREFIX_EMAIL).stream()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                .anyMatch(email -\u003e StringUtil.containsQueryIgnoreCase(person.getEmail().toString(), email));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        boolean isAnyAddressMatch \u003d personSearchKeywords.get(PREFIX_ADDRESS) \u003d\u003d null"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                || personSearchKeywords.get(PREFIX_ADDRESS).stream()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                .anyMatch(address -\u003e StringUtil.containsQueryIgnoreCase(person.getAddress().toString(), address));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        boolean isAnyRoleMatch \u003d personSearchKeywords.get(PREFIX_ROLE) \u003d\u003d null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                || personSearchKeywords.get(PREFIX_ROLE).stream()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                .anyMatch(role -\u003e StringUtil.containsQueryIgnoreCase(person.getClass().getSimpleName(), role));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        boolean isAnyTagMatch \u003d personSearchKeywords.get(PREFIX_TAG) \u003d\u003d null"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                || personSearchKeywords.get(PREFIX_TAG).stream()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                .anyMatch(tag -\u003e StringUtil.containsQueryIgnoreCase(person.getTags().toString(), tag));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        boolean isAnyMedicalDepartmentMatch \u003d personSearchKeywords.get(PREFIX_MEDICAL_DEPARTMENT) \u003d\u003d null"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                || person instanceof Doctor \u0026\u0026 personSearchKeywords.get(PREFIX_MEDICAL_DEPARTMENT).stream()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .anyMatch(medicalDepartment -\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                        StringUtil.containsQueryIgnoreCase(((Doctor) person).getMedicalDepartment().toString(),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                                medicalDepartment));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        boolean isAnyMedicalRecordMatch \u003d personSearchKeywords.get(PREFIX_MEDICAL_RECORD) \u003d\u003d null;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        if (person instanceof Patient \u0026\u0026 personSearchKeywords.get(PREFIX_MEDICAL_RECORD) !\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "            for (String keywords : personSearchKeywords.get(PREFIX_MEDICAL_RECORD)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                for (String medicalRecord : ((Patient) person).getMedicalRecordKeywords()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                    isAnyMedicalRecordMatch \u003d isAnyMedicalRecordMatch"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                            || StringUtil.containsQueryIgnoreCase(medicalRecord, keywords);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return isAnyKeywordMatch"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                \u0026\u0026 isAnyNameMatch"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                \u0026\u0026 isAnyNricMatch"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                \u0026\u0026 isAnyPhoneMatch"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                \u0026\u0026 isAnyEmailMatch"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                \u0026\u0026 isAnyAddressMatch"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                \u0026\u0026 isAnyRoleMatch"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                \u0026\u0026 isAnyTagMatch"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                \u0026\u0026 isAnyMedicalDepartmentMatch"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                \u0026\u0026 isAnyMedicalRecordMatch;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                || (other instanceof PersonContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \u0026\u0026 personSearchKeywords.equals(((PersonContainsKeywordsPredicate) other)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .personSearchKeywords)); // state check"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 91,
      "guestuser0123": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Role.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * Represents the roles that a person can be, i.e. Either a Patient or a Doctor."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public enum Role {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    DOCTOR,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    PATIENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String MESSAGE_ROLE_CONSTRAINTS \u003d \"Role should only be \u0027Doctor\u0027 or \u0027Patient\u0027\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Checks that the given string is a valid {@code Role}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @param role Given input to check."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @return True if given string is a valid role (case-insensitive)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static boolean isValidRole(String role) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return Arrays.stream(Role.values()).anyMatch(modelRole -\u003e modelRole.toString().equalsIgnoreCase(role));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Time.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.time.ZonedDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nelvintan"
        },
        "content": " * Represents a time in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nelvintan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "public class Time {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * Time should be in 24 hour format, HHMM."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public static final String TIME_VALIDATION_REGEX \u003d \"^\\\\d{4}\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static final String MESSAGE_TIME_INVALID_FORMAT_CONSTRAINTS \u003d \"Time should be entered in 24 hr clock format.\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + \" e.g. 1330 represents 1:30 pm. \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static final String MESSAGE_TIME_INVALID_DOES_NOT_EXIST \u003d \"This time does not exist: \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    /** String representation of the time **/"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public Time(String time) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Checks loosely if current time is before other time."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Loosely means if the 2 times are equal, the method will still"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * return true."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param otherTiming"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @return boolean stating if current time comes before otherTiming"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public boolean comesBefore(Time otherTiming) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        int currentTime \u003d Integer.parseInt(time.trim());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        int otherTime \u003d Integer.parseInt(otherTiming.time.trim());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return (currentTime \u003c\u003d otherTime);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Checks loosely if current time is after other time."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Loosely means if the 2 times are equal, the method will still"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * return true."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param otherTiming"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @return oolean stating if current time comes after otherTiming"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public boolean comesAfter(Time otherTiming) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        int currentTime \u003d Integer.parseInt(time.trim());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        int otherTime \u003d Integer.parseInt(otherTiming.time.trim());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return (currentTime \u003e\u003d otherTime);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Checks strictly if current time is before other time."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Strictly means current time must be strictly less than other time"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * for the method to return true."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param otherTiming"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @return boolean stating if current time comes before otherTiming"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public boolean comesStrictlyBefore(Time otherTiming) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        int currentTime \u003d Integer.parseInt(time.trim());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        int otherTime \u003d Integer.parseInt(otherTiming.time.trim());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return (currentTime \u003c otherTime);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @return whether this time is a valid time."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public boolean isValidTime() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return isCorrectFormat() \u0026\u0026 doesExist();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private boolean isCorrectFormat() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return time.matches(TIME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * Checks if a given time in the correct format exists."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * @return whether the given time exists."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private boolean doesExist() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (!isCorrectFormat()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        boolean result \u003d true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        int hour \u003d Integer.parseInt(time.substring(0, 2));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        int minute \u003d Integer.parseInt(time.substring(2));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (hour \u003c 0 || minute \u003c 0) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            result \u003d false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        } else if (hour \u003e 23 || minute \u003e 59) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            result \u003d false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public String getFailureReason() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (isValidTime()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return \"Time is valid.\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        String reason;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (!isCorrectFormat()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            reason \u003d MESSAGE_TIME_INVALID_FORMAT_CONSTRAINTS;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            reason \u003d MESSAGE_TIME_INVALID_DOES_NOT_EXIST + time;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return reason;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static Time getCurrentTime() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        ZonedDateTime zonedDateTime \u003d ZonedDateTime.now(ZoneId.of(\"Asia/Singapore\"));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String stringZonedDateTime \u003d zonedDateTime.toString();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // Splitting output from API into a date part and a time part."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String[] dateAndTimeParts \u003d stringZonedDateTime.split(\"T\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // Reformatting the oder of the time."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String currentTime \u003d dateAndTimeParts[1];"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String[] currentTimeParts \u003d currentTime.split(\":\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String hour \u003d currentTimeParts[0];"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String minute \u003d currentTimeParts[1];"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        currentTime \u003d hour + minute;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return new Time(currentTime);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (obj instanceof Time) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            Time otherTime \u003d (Time) obj;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return time.equals(otherTime.time);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 23,
      "GaryGohYP": 35,
      "nelvintan": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Returns true if the list contains a person with such parameters."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public boolean hasSuchPerson(Name name, Nric nric) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        requireAllNonNull(name, nric);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return internalList.stream().anyMatch(person -\u003e person.getName().equals(name) \u0026\u0026 person.getNric().equals(nric));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Returns true if the list contains a Patient with such parameters."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public boolean hasSuchPatient(Name name, Nric nric) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        requireAllNonNull(name, nric);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return internalList.stream().anyMatch(person -\u003e person.getName().equals(name)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                \u0026\u0026 person.getNric().equals(nric) \u0026\u0026 (person instanceof Patient));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Returns true if the list contains a Doctor with such parameters."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public boolean hasSuchDoctor(Name name, Nric nric) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        requireAllNonNull(name, nric);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return internalList.stream().anyMatch(person -\u003e person.getName().equals(name)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                \u0026\u0026 person.getNric().equals(nric) \u0026\u0026 (person instanceof Doctor));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Returns an {@code Optional\u003cPerson\u003e} with the given {@code nric}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public Optional\u003cPerson\u003e getPerson(Nric nric) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        requireNonNull(nric);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return internalList.stream().filter(person -\u003e person.getNric().equals(nric)).findAny();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 17,
      "-": 135,
      "nelvintan": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_TAG_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String TAG_VALIDATION_REGEX \u003d \"[\\\\p{Alnum} ]+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(TAG_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.doctor.MedicalDepartment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.MedicalRecord;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    // NOTE: Error when whitespace inserted Appointment"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static final ArrayList\u003cAppointment\u003e SAMPLE_APPOINTMENT_LIST_A \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    new Appointment(\"22.11.2018,1300,1400,Bernice Yu,S2810085Z,Alex Yeoh,S3038746E\")));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static final ArrayList\u003cAppointment\u003e SAMPLE_APPOINTMENT_LIST_B \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    new Appointment(\"22.11.2018,1300,1400,Bernice Yu,S2810085Z,Alex Yeoh,S3038746E\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    new Appointment(\"22.11.2018,1401,1430,Bernice Yu,S2810085Z,Charlotte Oliveiro,S1861343C\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    new Appointment(\"22.11.2018,1431,1445,Bernice Yu,S2810085Z,David Li,S3860937H\")));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static final ArrayList\u003cAppointment\u003e SAMPLE_APPOINTMENT_LIST_C \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    new Appointment(\"22.11.2018,1401,1430,Bernice Yu,S2810085Z,Charlotte Oliveiro,S1861343C\")));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static final ArrayList\u003cAppointment\u003e SAMPLE_APPOINTMENT_LIST_D \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    new Appointment(\"22.11.2018,1431,1445,Bernice Yu,S2810085Z,David Li,S3860937H\")));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            new Patient(new Name(\"Alex Yeoh\"), new Nric(\"S3038746E\"), new Phone(\"87438807\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    new Email(\"alexyeoh@example.com\"), new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    getTagSet(\"hokkien only\"), SAMPLE_APPOINTMENT_LIST_A,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    new MedicalRecord(\"12.12.2018\", \"flu\", \"tamiflu\", \"\")),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            new Doctor(new Name(\"Bernice Yu\"), new Nric(\"S2810085Z\"), new Phone(\"99272758\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    new Email(\"berniceyu\" + \"@example.com\"), new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    getTagSet(\"colleagues\", \"friends\"), SAMPLE_APPOINTMENT_LIST_B,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    new MedicalDepartment(\"Neurology\")),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            new Patient(new Name(\"Charlotte Oliveiro\"), new Nric(\"S1861343C\"), new Phone(\"93210283\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    new Email(\"charlotte@example.com\"), new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    getTagSet(\"neighbours\"), SAMPLE_APPOINTMENT_LIST_C,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    new MedicalRecord(\"22.22.2017\", \"cough\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                            \"Dextromethorphan\", \"take thrice a day\")),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            new Patient(new Name(\"David Li\"), new Nric(\"S3860937H\"), new Phone(\"91031282\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    new Email(\"lidavid@example.com\"), new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    getTagSet(\"family\"), SAMPLE_APPOINTMENT_LIST_D,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    new MedicalRecord(\"20.10.2018\", \"Stage 3 testicular cancer\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                            \"Orchiectomy for both testicles\", \"15% chance of survival\")),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            new Doctor(new Name(\"Irfan Ibrahim\"), new Nric(\"S1536921C\"), new Phone(\"92492021\"), new Email(\"irfan\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    + \"@example.com\"), new Address(\"Blk 47 Tampines Street 20, #17-35\"), getTagSet(\"classmates\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new MedicalDepartment(\"Obstetrics\")),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            new Doctor(new Name(\"Roy Balakrishnan\"), new Nric(\"S2271707C\"), new Phone(\"92624417\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new Email(\"royb@example.com\"), new Address(\"Blk 45 Bishan Street 14, #11-31\"),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    getTagSet(\"colleagues\"), new MedicalDepartment(\"Cardiology\")),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            new Doctor(new Name(\"House\"), new Nric(\"S7166195D\"), new Phone(\"92623317\"),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new Email(\"house@example.com\"), new Address(\"Blk 46 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    getTagSet(\"colleagues\"), new MedicalDepartment(\"Cardiology\")),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            new Doctor(new Name(\"Jay Cutler\"), new Nric(\"S7400037A\"), new Phone(\"93324417\"),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new Email(\"jay@example.com\"), new Address(\"Blk 47 Lorang Chuan Street 12, #11-31\"),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    getTagSet(\"colleagues\"), new MedicalDepartment(\"Heart\")),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            new Doctor(new Name(\"Cristiano Ronaldo\"), new Nric(\"S0928611Z\"), new Phone(\"92644178\"),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new Email(\"cr7@example.com\"), new Address(\"Blk 48 Seletar Street 85, #11-31\"),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    getTagSet(\"colleagues\"), new MedicalDepartment(\"Sports\")),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            new Patient(new Name(\"Kenneth Goh\"), new Nric(\"S2967846D\"), new Phone(\"88438807\"),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new Email(\"kennethgoh@example.com\"), new Address(\"Blk 31 Hougang Street 29, #30-40\"),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    getTagSet(\"english only\"),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new MedicalRecord(\"12.12.2018\", \"flu\", \"tamiflu\", \"\")),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            new Patient(new Name(\"Kenneth Yeoh\"), new Nric(\"S9254631D\"), new Phone(\"87438807\"),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new Email(\"neth@example.com\"), new Address(\"Blk 32 Serangoon Street 29, #29-40\"),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    getTagSet(\"hokkien only\"),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new MedicalRecord(\"12.12.2018\", \"flu\", \"tamiflu\", \"\")),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            new Patient(new Name(\"Nelvin Tan\"), new Nric(\"S4485446E\"), new Phone(\"87538807\"),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new Email(\"nelvin@example.com\"), new Address(\"Blk 33 Sengkang Street 29, #28-40\"),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    getTagSet(\"english only\"),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new MedicalRecord(\"12.12.2018\", \"flu\", \"tamiflu\", \"\")),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            new Patient(new Name(\"Nelvin Yeoh\"), new Nric(\"S1968289G\"), new Phone(\"87538807\"),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new Email(\"nelvinyeoh@example.com\"), new Address(\"Blk 34 Changi Street 29, #27-40\"),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    getTagSet(\"chinese only\"),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new MedicalRecord(\"12.12.2018\", \"flu\", \"tamiflu\", \"\")),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            new Patient(new Name(\"Gary Goh\"), new Nric(\"S6837870B\"), new Phone(\"87938807\"),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new Email(\"ggyp@example.com\"), new Address(\"Blk 35 Punggol Street 29, #26-40\"),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    getTagSet(\"hokkien only\"),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new MedicalRecord(\"12.12.2018\", \"flu\", \"tamiflu\", \"\")),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            new Patient(new Name(\"Gary Zuo\"), new Nric(\"S9887917Z\"), new Phone(\"87438817\"),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new Email(\"garyzuo@example.com\"), new Address(\"Blk 36 Sengkang Street 29, #25-40\"),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    getTagSet(\"chinese only\"),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new MedicalRecord(\"12.12.2018\", \"flu\", \"tamiflu\", \"\")),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            new Patient(new Name(\"Triston Pang\"), new Nric(\"S8447383I\"), new Phone(\"87438827\"),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new Email(\"trist@example.com\"), new Address(\"Blk 37 Buangkok Street 29, #24-40\"),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    getTagSet(\"english only\"),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new MedicalRecord(\"12.12.2018\", \"flu\", \"tamiflu\", \"\")),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            new Patient(new Name(\"Triston Yap\"), new Nric(\"S6376673I\"), new Phone(\"87438837\"),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new Email(\"tristonyap@example.com\"), new Address(\"Blk 38 Hougang Street 29, #23-40\"),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    getTagSet(\"chinese only\"),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new MedicalRecord(\"12.12.2018\", \"flu\", \"tamiflu\", \"\")),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            new Patient(new Name(\"Selene Yeoh\"), new Nric(\"S3024786H\"), new Phone(\"87438847\"),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new Email(\"seleneyeoh@example.com\"), new Address(\"Blk 39 Serangoon Street 29, #22-40\"),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    getTagSet(\"hokkien only\"),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new MedicalRecord(\"12.12.2018\", \"flu\", \"tamiflu\", \"\")),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            new Patient(new Name(\"Celine Lim\"), new Nric(\"S1942538Z\"), new Phone(\"87438857\"),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new Email(\"celinelim@example.com\"), new Address(\"Blk 40 Punggol Street 29, #21-40\"),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    getTagSet(\"hokkien only\"),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new MedicalRecord(\"12.12.2018\", \"flu\", \"tamiflu\", \"\")),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            new Patient(new Name(\"Priscilia Goh\"), new Nric(\"S7467468B\"), new Phone(\"87438867\"),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new Email(\"prisciliahere@example.com\"), new Address(\"Blk 41 Sengkang Street 29, #20-40\"),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    getTagSet(\"chinese only\"),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new MedicalRecord(\"12.12.2018\", \"flu\", \"tamiflu\", \"\")),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            new Patient(new Name(\"Priscilla Yeoh\"), new Nric(\"S4873782Z\"), new Phone(\"87438877\"),"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new Email(\"prissh@example.com\"), new Address(\"Blk 42 Buangkok Street 29, #19-40\"),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    getTagSet(\"hokkien only\"),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new MedicalRecord(\"12.12.2018\", \"flu\", \"tamiflu\", \"\")),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            new Patient(new Name(\"Elaine Yeoh\"), new Nric(\"S5436755D\"), new Phone(\"87438887\"),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new Email(\"elaineyeoh@example.com\"), new Address(\"Blk 43 Hougang Street 29, #18-40\"),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    getTagSet(\"english only\"),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new MedicalRecord(\"12.12.2018\", \"flu\", \"tamiflu\", \"\")),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            new Patient(new Name(\"Sophia Tan\"), new Nric(\"S9105236I\"), new Phone(\"87438897\"),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new Email(\"sophiatan@example.com\"), new Address(\"Blk 44 Kovan Street 29, #17-40\"),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    getTagSet(\"chinese only\"),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new MedicalRecord(\"12.12.2018\", \"flu\", \"tamiflu\", \"\")),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            new Patient(new Name(\"Daisy Lim\"), new Nric(\"S9049716B\"), new Phone(\"87431807\"),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new Email(\"daisylim@example.com\"), new Address(\"Blk 45 Serangoon Street 29, #16-40\"),"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    getTagSet(\"hokkien only\"),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new MedicalRecord(\"12.12.2018\", \"flu\", \"tamiflu\", \"\")),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            new Patient(new Name(\"Anna Tan\"), new Nric(\"S6122266I\"), new Phone(\"87432807\"),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new Email(\"annatan@example.com\"), new Address(\"Blk 46 Punggol Street 29, #15-40\"),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    getTagSet(\"english only\"),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new MedicalRecord(\"12.12.2018\", \"flu\", \"tamiflu\", \"\")),"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            new Patient(new Name(\"Anne Yeoh\"), new Nric(\"S0142243Z\"), new Phone(\"87433807\"),"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new Email(\"anneyeoh@example.com\"), new Address(\"Blk 47 Sengkang Street 29, #14-40\"),"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    getTagSet(\"chinese only\"),"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new MedicalRecord(\"12.12.2018\", \"flu\", \"tamiflu\", \"\")),"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            new Patient(new Name(\"Alexander Pham\"), new Nric(\"S1127477C\"), new Phone(\"87434807\"),"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new Email(\"alexpham@example.com\"), new Address(\"Blk 48 Buangkok Street 29, #13-40\"),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    getTagSet(\"hokkien only\"),"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new MedicalRecord(\"12.12.2018\", \"flu\", \"tamiflu\", \"\")),"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            new Patient(new Name(\"Alexandra Yeoh\"), new Nric(\"S9185653J\"), new Phone(\"87435807\"),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new Email(\"alexyeoh@example.com\"), new Address(\"Blk 49 Hougang Street 29, #12-40\"),"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    getTagSet(\"english only\"),"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new MedicalRecord(\"12.12.2018\", \"flu\", \"tamiflu\", \"\")),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            new Patient(new Name(\"Mary Yeoh\"), new Nric(\"S7883647D\"), new Phone(\"87436807\"),"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new Email(\"maryyeoh@example.com\"), new Address(\"Blk 50 Kovan Street 29, #11-40\"),"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    getTagSet(\"chinese only\"),"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new MedicalRecord(\"12.12.2018\", \"flu\", \"tamiflu\", \"\")),"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            new Patient(new Name(\"Jane Pham\"), new Nric(\"S0924992C\"), new Phone(\"87437807\"),"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new Email(\"janepham@example.com\"), new Address(\"Blk 51 Serangoon Street 29, #10-40\"),"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    getTagSet(\"hokkien only\"),"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new MedicalRecord(\"12.12.2018\", \"flu\", \"tamiflu\", \"\")),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            new Patient(new Name(\"Harry Yeoh\"), new Nric(\"S8836116D\"), new Phone(\"87439807\"),"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new Email(\"harryyeoh@example.com\"), new Address(\"Blk 52 Punggol Street 29, #09-40\"),"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    getTagSet(\"english only\"),"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new MedicalRecord(\"12.12.2018\", \"flu\", \"tamiflu\", \"\")),"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            new Patient(new Name(\"Wu Yayi\"), new Nric(\"S0595823G\"), new Phone(\"87938807\"),"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new Email(\"wuyayi@example.com\"), new Address(\"Blk 53 Sengkang Street 29, #08-40\"),"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    getTagSet(\"chinese only\"),"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new MedicalRecord(\"12.12.2018\", \"flu\", \"tamiflu\", \"\")),"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            new Patient(new Name(\"Megan Fox\"), new Nric(\"S9476463G\"), new Phone(\"87938807\"),"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new Email(\"meganfox@example.com\"), new Address(\"Blk 54 Hougang Street 29, #07-40\"),"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    getTagSet(\"english only\"),"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    new MedicalRecord(\"12.12.2018\", \"flu\", \"tamiflu\", \"\"))"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Returns an Appointment list containing the list of strings given."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static ArrayList\u003cAppointment\u003e getAppointmentsList(String... strings) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                .map(Appointment::new)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 30,
      "-": 42,
      "nelvintan": 132
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedAppointment.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * JAXB-friendly adapted version of the Appointment."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "@XmlRootElement(name \u003d \"appointments\")"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class XmlAdaptedAppointment {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private String appointment;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Constructs an XmlAdaptedAppointment."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public XmlAdaptedAppointment() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Constructs an {@code XmlAdaptedAppointment} with the given appointment details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public XmlAdaptedAppointment(String appointment) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.appointment \u003d appointment;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Converts a given Appointment into this class for JAXB use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param appointment future changes to this will not affect the created"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public XmlAdaptedAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        String value \u003d appointment.toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.appointment \u003d value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Converts this jaxb-friendly adapted appointment object into the model\u0027s Appointment object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted appointment."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public String toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (!new Appointment(appointment).isValidAppointment()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new IllegalValueException(\"Invalid Appointment Format\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return appointment;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (!(other instanceof XmlAdaptedAppointment)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return appointment.equals(((XmlAdaptedAppointment) other).appointment);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 53,
      "nelvintan": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedDoctor.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.doctor.MedicalDepartment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * JAXB-friendly version of the Doctor."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class XmlAdaptedDoctor extends XmlAdaptedPerson {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Constructs an {@code XmlAdaptedDoctor} with the given doctor details."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public XmlAdaptedDoctor(Doctor source) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        super(source);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        medicalDepartment \u003d source.getMedicalDepartment().deptName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Constructs an {@code XmlAdaptedPatient} with the given person details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public XmlAdaptedDoctor(String name, String nric, String phone, String email, String address,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                            List\u003cXmlAdaptedTag\u003e tags, String appointment, String medicalDepartment) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        super(name, nric, phone, email, address, tags, appointment);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.medicalDepartment \u003d medicalDepartment;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.role \u003d \"Doctor\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Overwritten method to convert doctor into this class for JAXB use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @param source Doctor object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @return Xml Adapted version of the given Doctor object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static XmlAdaptedDoctor adaptToXml(Doctor source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return new XmlAdaptedDoctor(source);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Converts this jaxb-friendly adapted doctor object into the model\u0027s Doctor object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static Doctor convertToDoctorModelType (Person source, String medicalDept) throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Person modelPerson \u003d source;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (medicalDept \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    MedicalDepartment.class.getSimpleName()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (!MedicalDepartment.isValidMedDept(medicalDept)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new IllegalValueException(MedicalDepartment.MESSAGE_DEPTNAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        final MedicalDepartment modelMedicalDept \u003d new MedicalDepartment(medicalDept);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return new Doctor(modelPerson.getName(), modelPerson.getNric(), modelPerson.getPhone(), modelPerson.getEmail(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                modelPerson.getAddress(), modelPerson.getTags(), modelPerson.getAppointmentList(), modelMedicalDept);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (!(other instanceof XmlAdaptedDoctor)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedDoctor otherDoctor \u003d (XmlAdaptedDoctor) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return Objects.equals(name, otherDoctor.name)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \u0026\u0026 Objects.equals(nric, otherDoctor.nric)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \u0026\u0026 Objects.equals(phone, otherDoctor.phone)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \u0026\u0026 Objects.equals(email, otherDoctor.email)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \u0026\u0026 Objects.equals(address, otherDoctor.address)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \u0026\u0026 tagged.equals(otherDoctor.tagged)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \u0026\u0026 Objects.equals(appointmentList, otherDoctor.appointmentList)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \u0026\u0026 Objects.equals(medicalDepartment, otherDoctor.medicalDepartment);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 82,
      "nelvintan": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedMedicalRecord.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.model.patient.MedicalRecord;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": " * JAXB-friendly adapted version of the MedicalRecord."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "@XmlRootElement(name \u003d \"medicalRecords\")"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "public class XmlAdaptedMedicalRecord {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private String medicalRecord;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * Constructs an XmlAdaptedMedicalRecord."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public XmlAdaptedMedicalRecord() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * Constructs an {@code XmlAdaptedMedicalRecord} with the given medical record details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public XmlAdaptedMedicalRecord(String medicalRecord) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        String value \u003d medicalRecord;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        this.medicalRecord \u003d value;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * Converts a given medicalRecord into this class for JAXB use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * @param medicalRecord future changes to this will not affect the created"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public XmlAdaptedMedicalRecord(MedicalRecord medicalRecord) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        this.medicalRecord \u003d medicalRecord.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * Converts this jaxb-friendly adapted medicalRecord object into the model\u0027s Appointment object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted appointment."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public String toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (!new MedicalRecord(medicalRecord).isValidPreviousMedicalRecord()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            throw new IllegalValueException(\"Invalid Medical Record\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return medicalRecord;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (!(other instanceof XmlAdaptedMedicalRecord)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return medicalRecord.equals(((XmlAdaptedMedicalRecord) other).medicalRecord);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GaryGohYP": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedPatient.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.MedicalRecord;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * JAXB-friendly version of the Patient."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class XmlAdaptedPatient extends XmlAdaptedPerson {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Constructs an {@code XmlAdaptedPatient} with the given patient details."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public XmlAdaptedPatient(Patient source) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        super(source);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        nric \u003d source.getNric().code;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        medicalRecord \u003d source.getMedicalRecord().value;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        medicalRecordLibrary \u003d source.getMedicalRecordLibrary().stream()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                .map(XmlAdaptedMedicalRecord::new)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Constructs an {@code XmlAdaptedPatient} with the given patient details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public XmlAdaptedPatient(String name, String nric, String phone, String email, String address,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                             String medicalRecord, List\u003cXmlAdaptedTag\u003e tags, String appointment) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        super(name, nric, phone, email, address, tags, appointment);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.medicalRecord \u003d medicalRecord;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        this.medicalRecordLibrary.add(new XmlAdaptedMedicalRecord(medicalRecord));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.role \u003d \"Patient\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Overwritten method to convert patient into this class for JAXB use."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @param source Patient object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @return Xml Adapted version of the given Patient object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static XmlAdaptedPatient adaptToXml(Patient source) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return new XmlAdaptedPatient(source);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Converts this jaxb-friendly adapted patient object into the model\u0027s Patient object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted patient"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public static Patient convertToPatientModelType(Person source, String medicalRecords,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                                                    ArrayList\u003cMedicalRecord\u003e medicalRecordLibrary) throws"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            IllegalValueException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        Person person \u003d source;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (medicalRecords \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                    MedicalRecord.class.getSimpleName()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (!(new MedicalRecord(medicalRecords)).isValidPreviousMedicalRecord()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            throw new IllegalValueException(MedicalRecord.MESSAGE_MEDICAL_RECORD_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        final MedicalRecord modelMedicalRecords \u003d new MedicalRecord(medicalRecords);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        final ArrayList\u003cMedicalRecord\u003e modelMedicalRecordLibrary \u003d new ArrayList\u003c\u003e (medicalRecordLibrary);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return new Patient(person.getName(), person.getNric(), person.getPhone(), person.getEmail(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                person.getAddress(), person.getTags(), person.getAppointmentList(), modelMedicalRecords,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                modelMedicalRecordLibrary);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (!(other instanceof XmlAdaptedPatient)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedPatient otherPatient \u003d (XmlAdaptedPatient) other;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return Objects.equals(name, otherPatient.name)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \u0026\u0026 Objects.equals(nric, otherPatient.nric)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \u0026\u0026 Objects.equals(phone, otherPatient.phone)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \u0026\u0026 Objects.equals(email, otherPatient.email)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \u0026\u0026 Objects.equals(address, otherPatient.address)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \u0026\u0026 tagged.equals(otherPatient.tagged)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \u0026\u0026 Objects.equals(appointmentList, otherPatient.appointmentList)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \u0026\u0026 Objects.equals(medicalRecord, otherPatient.medicalRecord);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 68,
      "GaryGohYP": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.model.patient.MedicalRecord;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Role;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly version of the Person."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPerson {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    protected String role;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    protected String nric;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    protected String phone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    protected String email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    protected String address;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    protected List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    protected String medicalRecord;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    protected List\u003cXmlAdaptedMedicalRecord\u003e medicalRecordLibrary \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    protected String medicalDepartment;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    protected String appointment;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    protected List\u003cXmlAdaptedAppointment\u003e appointmentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedPerson."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson() {}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code XmlAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public XmlAdaptedPerson(String name, String nric, String phone, String email, String address,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                            List\u003cXmlAdaptedTag\u003e tagged, String appointment) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.appointment \u003d appointment;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointmentList.add(new XmlAdaptedAppointment(appointment));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Person into this class for JAXB use."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedPerson"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        role \u003d source.getClass().getSimpleName();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        nric \u003d source.getNric().code;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointment \u003d source.getAppointment().value;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointmentList \u003d source.getAppointmentList().stream()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                .map(XmlAdaptedAppointment::new)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged \u003d source.getTags().stream()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Converts given person into this class for JAXB use."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * This method is to be overwritten by {@code XmlAdaptedPatient} and {@code XmlAdaptedDoctor} class."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static XmlAdaptedPerson adaptToXml(Person source) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return new XmlAdaptedPerson(source);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (role \u003d\u003d null) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Role.class.getSimpleName()));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (!Role.isValidRole(role)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new IllegalValueException(Role.MESSAGE_ROLE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        final Role modelRole \u003d Role.valueOf(role.toUpperCase());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (nric \u003d\u003d null) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName()));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (!Nric.isValidNric(nric)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new IllegalValueException(Nric.MESSAGE_NRIC_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        final Nric modelNric \u003d new Nric(nric);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (appointment \u003d\u003d null) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    Appointment.class.getSimpleName()));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        final ArrayList\u003cAppointment\u003e modelApptList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        for (XmlAdaptedAppointment appt : this.appointmentList) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                modelApptList.add(new Appointment(appt.toModelType()));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                throw e;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        final ArrayList\u003cMedicalRecord\u003e modelMedicalRecordLibrary \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        for (XmlAdaptedMedicalRecord medicalRecord : this.medicalRecordLibrary) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                modelMedicalRecordLibrary.add(new MedicalRecord(medicalRecord.toModelType()));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                throw e;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (modelRole.equals(Role.DOCTOR)) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return XmlAdaptedDoctor.convertToDoctorModelType(new Person(modelName, modelNric, modelPhone, modelEmail,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    modelAddress, modelTags, modelApptList), medicalDepartment);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            assert modelRole.equals(Role.PATIENT); // person must be a patient if he/she is not a doctor."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return XmlAdaptedPatient.convertToPatientModelType(new Person(modelName, modelNric, modelPhone, modelEmail,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                    modelAddress, modelTags, modelApptList), medicalRecord, modelMedicalRecordLibrary);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedPerson)) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(name, otherPerson.name)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \u0026\u0026 Objects.equals(nric, otherPerson.nric)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(email, otherPerson.email)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(address, otherPerson.address)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagged.equals(otherPerson.tagged);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 62,
      "GaryGohYP": 12,
      "-": 132,
      "nelvintan": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to XML format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@XmlRootElement(name \u003d \"addressbook\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlSerializableAddressBook {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedPerson\u003e persons;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an empty XmlSerializableAddressBook."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlSerializableAddressBook() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        persons.addAll(src.getPersonList().stream().map(person -\u003e person.toXmlVersion(person))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this addressbook into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code XmlAdaptedPerson}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedPerson p : persons) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d p.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlSerializableAddressBook)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.equals(((XmlSerializableAddressBook) other).persons);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 2,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.ListElementPointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(Logic logic) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        case ESCAPE:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            handleCommandCancelled();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            // process result of the command"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            // handle command failure"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandTextField.getText());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new NewResultAvailableEvent(e.getMessage()));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     * Handles the escape button pressed event"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private void handleCommandCancelled() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        String feedbackToUser \u003d logic.cancelCommand();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        logger.info(\"Escape key pressed, command cancelled\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        raise(new NewResultAvailableEvent(feedbackToUser));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tristonpang": 15,
      "-": 151
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DisplayPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.commons.events.model.PersonChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.commons.events.ui.DisplayPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.model.patient.MedicalRecord;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.model.person.DisplayableAttribute;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": " * Panel containing the list of displayable attributes."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "public class DisplayPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static Person personOnDisplay;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private static final String FXML \u003d \"DisplayPanel.fxml\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DisplayPanel.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private ListView\u003cDisplayableAttribute\u003e displayableAppointmentsListView;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private ListView\u003cDisplayableAttribute\u003e displayableMedicalRecordsListView;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public DisplayPanel() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        showDefaultDisplayPanel();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private void setAppointmentsConnections(ObservableList\u003cDisplayableAttribute\u003e displayableList) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        displayableAppointmentsListView.setItems(displayableList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        displayableAppointmentsListView.setCellFactory(listView -\u003e new DisplayPanel.DisplayableListViewCell());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private void setMedicalRecordsConnections(ObservableList\u003cDisplayableAttribute\u003e displayableList) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        displayableMedicalRecordsListView.setItems(displayableList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        displayableMedicalRecordsListView.setCellFactory(listView -\u003e new DisplayPanel.DisplayableListViewCell());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private void handlePersonChangedEvent(PersonChangedEvent event) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (event.editedPerson \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            showDefaultDisplayPanel(); // if person is deleted or database has been cleared, show the default scene"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        } else if (!event.originalPerson.equals(personOnDisplay)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return; // if person updated in the event is not related to this person being displayed on the UI"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        updateScene(event.editedPerson);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Person selectedPerson \u003d event.getNewSelection();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        updateScene(selectedPerson);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Default setting for display panel upon start up of application."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void showDefaultDisplayPanel() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            personOnDisplay \u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            displayableAppointmentsListView.setItems(new FilteredList\u003c\u003e(FXCollections.observableArrayList()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            displayableMedicalRecordsListView.setItems(new FilteredList\u003c\u003e(FXCollections.observableArrayList()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        });"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Helper method to update the UI display base on the details of the {@person}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private void updateScene(Person updatedPerson) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        personOnDisplay \u003d updatedPerson;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (updatedPerson instanceof Patient) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            ArrayList\u003cMedicalRecord\u003e selectedPersonMedicalRecordLibrary \u003d ((Patient) updatedPerson)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                    .getMedicalRecordLibrary();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            //Collections.reverse(selectedPersonMedicalRecordLibrary);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            ArrayList\u003cAppointment\u003e selectedPersonAppointmentList \u003d updatedPerson.getAppointmentList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            ArrayList\u003cDisplayableAttribute\u003e displayableMedicalRecordsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            ArrayList\u003cDisplayableAttribute\u003e displayableAppointmentsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            for (MedicalRecord medicalRecord : selectedPersonMedicalRecordLibrary) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                displayableMedicalRecordsList.add((DisplayableAttribute) medicalRecord);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            for (Appointment appointment : selectedPersonAppointmentList) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                displayableAppointmentsList.add((DisplayableAttribute) appointment);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            setAppointmentsConnections("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    new FilteredList\u003c\u003e(FXCollections.observableArrayList(displayableAppointmentsList)));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            setMedicalRecordsConnections("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    new FilteredList\u003c\u003e(FXCollections.observableArrayList(displayableMedicalRecordsList)));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            assert updatedPerson instanceof Doctor;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            ArrayList\u003cAppointment\u003e selectedPersonAppointmentList \u003d updatedPerson.getAppointmentList();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            setAppointmentsConnections("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    new FilteredList\u003c\u003e(FXCollections.observableArrayList(selectedPersonAppointmentList)));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            setMedicalRecordsConnections("
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    new FilteredList\u003c\u003e(FXCollections.observableArrayList()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        displayableAppointmentsListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                        logger.fine(\"Selection in displayable attribute list panel changed to : \u0027\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                                + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                        raise(new DisplayPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                });"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        displayableMedicalRecordsListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                        logger.fine(\"Selection in displayable attribute list panel changed to : \u0027\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                                + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                        raise(new DisplayPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                });"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code DisplayableAttribute}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * using a {@code DisplayableAttributeCard}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    class DisplayableListViewCell extends ListCell\u003cDisplayableAttribute\u003e {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        protected void updateItem(DisplayableAttribute displayableAttribute, boolean empty) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            Platform.runLater(()-\u003e {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                super.updateItem(displayableAttribute, empty);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                if (empty || displayableAttribute \u003d\u003d null) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                    setGraphic(null);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                    setText(null);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                    setGraphic(new DisplayableAttributeCard(displayableAttribute, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            });"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 79,
      "GaryGohYP": 69,
      "nelvintan": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DisplayableAttributeCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.model.patient.MedicalRecord;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.model.person.DisplayableAttribute;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": " * A UI component that displays information of a {@code DisplayableAttribute}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "public class DisplayableAttributeCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private static final String FXML \u003d \"DisplayableAttributeCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public final DisplayableAttribute displayableAttribute;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private Label displayableField1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private Label displayableField2;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private Label displayableField3;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public DisplayableAttributeCard(DisplayableAttribute displayableAttribute, int displayedIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        this.displayableAttribute \u003d displayableAttribute;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (displayableAttribute instanceof MedicalRecord) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            date.setText(((MedicalRecord) displayableAttribute).getDate());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            displayableField1.setText(\"Diagnosis: \" + ((MedicalRecord) displayableAttribute).getDiagnosis());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            displayableField2.setText(\"Treatment: \" + ((MedicalRecord) displayableAttribute).getTreatment());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            displayableField3.setText(\"Comments: \" + ((MedicalRecord) displayableAttribute).getComments());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        } else if (displayableAttribute instanceof Appointment) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            if (((Appointment) displayableAttribute).value.equals(\"\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            Appointment appointment \u003d (Appointment) displayableAttribute;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            date.setText(appointment.getDateString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            displayableField1.setText(\"Start Time: \" + appointment.getStartTimeString()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                    + \"\\t\\tEnd Time: \" + appointment.getEndTimeString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            displayableField2.setText(\"Doctor Name: \" + appointment.getDoctorNameString()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                    + \" (\" + appointment.getDoctorNricString() + \")\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            displayableField3.setText(\"Patient Name: \" + appointment.getPatientNameString()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                    + \" (\" + appointment.getPatientNricString() + \")\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        if (!(other instanceof DisplayableAttributeCard)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        DisplayableAttributeCard card \u003d (DisplayableAttributeCard) other;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                \u0026\u0026 displayableAttribute.equals(card.displayableAttribute);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 4,
      "GaryGohYP": 59,
      "nelvintan": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import java.awt.AWTException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import java.awt.Robot;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private DisplayPanel displayPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private StackPane displayPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private StackPane personProfilePagePlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        displayPanel \u003d new DisplayPanel();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        displayPlaceholder.getChildren().add(displayPanel.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        PersonProfilePage personProfilePage \u003d new PersonProfilePage();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        personProfilePagePlaceholder.getChildren().add(personProfilePage.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        commandBoxPlaceholder.requestFocus();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "            Robot robot \u003d new Robot();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "            robot.keyPress(KeyCode.TAB.getCode());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "            robot.keyRelease(KeyCode.TAB.getCode());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        } catch (AWTException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void releaseResources() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        displayPanel.showDefaultDisplayPanel();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 11,
      "guestuser0123": 12,
      "-": 197
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * A UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private Label role;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private Label nric;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        nric.setText(person.getNric().code);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        role.setText(person.getClass().getSimpleName());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 7,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.commons.events.model.DatabaseChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cPerson\u003e personListView;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        setConnections(personList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setConnections(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(personList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                        logger.fine(\"Selection in person list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                        raise(new PersonPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                });"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Scrolls to the {@code PersonCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            personListView.scrollTo(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            personListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private void handleDatabaseChangedEvent(DatabaseChangedEvent event) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            personListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        });"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 9,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonProfilePage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import javafx.animation.AnimationTimer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.commons.events.model.PersonChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * A UI component that displays full information of a {@code Person}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class PersonProfilePage extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static AnimationTimer animationTimer;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static Person personOnDisplay;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String EMPTY_VALUE \u003d \"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String FXML \u003d \"PersonProfilePage.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DisplayPanel.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private Text name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private Text nric;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private Text labelNric;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private Text phone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private Text labelPhone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private Text address;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private Text labelAddress;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private Text email;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private Text labelEmail;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private Text availCheckTime;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private Label availability;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private Text availabilityLabel;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private Text dept;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private Text labelDept;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public PersonProfilePage() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        animationTimer \u003d new AnimationTimer() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            public void handle(long now) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                setAvailabilityOfDoctor();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        };"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private void handlePersonChangedEvent(PersonChangedEvent event) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (event.editedPerson \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            Platform.runLater(()-\u003e {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                showDefaultProfilePage(); // if person is deleted of database is cleared, display the default scene."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            });"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        } else if (!event.originalPerson.equals(personOnDisplay)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return; // if the person updated is not the person that is being displayed on the UI."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Person updatedPerson \u003d event.editedPerson;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        updateScene(updatedPerson);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Person selectedPerson \u003d event.getNewSelection();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        updateScene(selectedPerson);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Helper method to update the contents of the profile ui base on the details of the {@code person}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private void updateScene(Person person) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        showLabels();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        personOnDisplay \u003d person;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        nric.setText(person.getNric().code);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        tags.getChildren().clear();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        person.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // Updates availability badge of doctor every minute to reflect real time status."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (person instanceof Doctor) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            setAvailabilityOfDoctor();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            animationTimer.start();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            assert person instanceof Patient;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            animationTimer.stop();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            hideDoctorFields();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Updates the contents of the ui to be empty"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private void showDefaultProfilePage() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        personOnDisplay \u003d null;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        name.setText(EMPTY_VALUE);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        nric.setText(EMPTY_VALUE);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        phone.setText(EMPTY_VALUE);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        address.setText(EMPTY_VALUE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        email.setText(EMPTY_VALUE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        tags.getChildren().clear();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        hideDoctorFields();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        hideLabels();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Helper method to display the labels for each {@person}\u0027s field."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private void showLabels() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        labelAddress.setVisible(true);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        labelDept.setVisible(true);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        labelEmail.setVisible(true);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        labelPhone.setVisible(true);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        labelNric.setVisible(true);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Helper method to hide all labels."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private void hideLabels() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        labelAddress.setVisible(false);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        labelDept.setVisible(false);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        labelEmail.setVisible(false);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        labelPhone.setVisible(false);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        labelNric.setVisible(false);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Helper method that sets the availability labels of the doctor."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private void setAvailabilityOfDoctor() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Doctor doctor \u003d (Doctor) personOnDisplay;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        labelDept.setVisible(true);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        dept.setText(doctor.getMedicalDepartment().deptName);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        availability.setVisible(true);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        availabilityLabel.setVisible(true);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        availCheckTime.setVisible(true);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        availability.setText(doctor.currentAvailStatus());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        availCheckTime.setText(\"last updated:  \" + Date.getCurrentDate() + \",\" + Time.getCurrentTime());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (doctor.currentAvailStatus().equals(doctor.IS_AVAILABLE)) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            availability.setStyle(\"-fx-background-color: #33ff77\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            availability.setStyle(\"-fx-background-color: #ff4d4d\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Helper method that sets the visibility of the labels (that are applicable to Doctors only) to false."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private void hideDoctorFields() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        animationTimer.stop();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        dept.setText(EMPTY_VALUE);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        labelDept.setVisible(false);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        availability.setVisible(false);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        availCheckTime.setVisible(false);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        availabilityLabel.setVisible(false);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 195
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager extends ComponentManager implements Ui {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/one_life_icon.png\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic, Config config, UserPrefs prefs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.hide();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.releaseResources();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        final String content \u003d details + \":\\n\" + cause.toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                event.exception);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GaryGohYP": 1,
      "-": 119
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    -fx-background-color: #cad8ff;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    -fx-background-color: #92afff;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    -fx-border-color: black;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ".scroll-pane \u003e .viewport {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "   -fx-background-color: transparent;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ".menu:hover {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    -fx-background-color: #92afff;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ".menu-item:focused {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     -fx-background-color: #92afff;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    -fx-background-color: transparent, white, transparent, white;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    -fx-background-color: #0011ff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 2,
      "GaryGohYP": 33,
      "-": 222
    }
  },
  {
    "path": "src/main/resources/view/DisplayPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    \u003cLabel text\u003d\"Appointments\" styleClass\u003d\"Name\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    \u003cListView fx:id\u003d\"displayableAppointmentsListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    \u003cLabel/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    \u003cLabel text\u003d\"MedicalRecords\" styleClass\u003d\"Name\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    \u003cListView fx:id\u003d\"displayableMedicalRecordsListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 13
    }
  },
  {
    "path": "src/main/resources/view/DisplayableAttributeCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"100\" prefWidth\u003d\"550\" maxWidth\u003d\"-Infinity\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                        \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                                \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                                \u003cPane HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                        \u003cLabel fx:id\u003d\"displayableField1\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$displayableField1\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                        \u003cLabel fx:id\u003d\"displayableField2\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$displayableField2\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                        \u003cLabel fx:id\u003d\"displayableField3\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$displayableField3\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 2,
      "GaryGohYP": 43,
      "nelvintan": 3
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "         minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    \u003cImage url\u003d\"@/images/one_life_icon.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "          \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"400\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "          \u003cVBox fx:id\u003d\"profilePage\" minWidth\u003d\"450.0\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            \u003cScrollPane style\u003d\"-fx-background-color: transparent;\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \u003cInsets top\u003d\"50\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "              \u003cStackPane fx:id\u003d\"personProfilePagePlaceholder\"/\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "          \u003cVBox fx:id\u003d\"displayPanelPlace\" minWidth\u003d\"400\" prefWidth\u003d\"900\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            \u003cStackPane fx:id\u003d\"displayPlaceholder\"/\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 12,
      "GaryGohYP": 14,
      "-": 53
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003c?import javafx.scene.text.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003c?import javafx.geometry.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                        \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                                \u003cLabel fx:id\u003d\"role\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$role\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                                \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                                \u003cPane HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                  \u003cHBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                        \u003cText strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"NRIC: \" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                              \u003cLabel fx:id\u003d\"nric\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$nric\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                  \u003cHBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                        \u003cText strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"H/P: \" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                              \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 32,
      "-": 24
    }
  },
  {
    "path": "src/main/resources/view/PersonProfilePage.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003c?import javafx.geometry.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003c?import javafx.scene.text.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003cPane maxHeight\u003d\"700.0\" maxWidth\u003d\"500.0\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"550.0\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \u003cText fx:id\u003d\"name\" fill\u003d\"black\" layoutX\u003d\"40.0\" layoutY\u003d\"103.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            wrappingWidth\u003d\"450.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            \u003cFont size\u003d\"45.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \u003c/Text\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \u003cText fx:id\u003d\"nric\" fill\u003d\"black\" layoutX\u003d\"151.0\" layoutY\u003d\"213.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \u003c/Text\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \u003cText fx:id\u003d\"phone\" fill\u003d\"black\" layoutX\u003d\"150.0\" layoutY\u003d\"244.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \u003c/Text\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \u003cText fx:id\u003d\"email\" fill\u003d\"black\" layoutX\u003d\"149.0\" layoutY\u003d\"277.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \u003c/Text\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \u003cText fx:id\u003d\"address\" fill\u003d\"black\" layoutX\u003d\"150.0\" layoutY\u003d\"309.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            wrappingWidth\u003d\"229.0\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \u003c/Text\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \u003cText fx:id\u003d\"dept\" fill\u003d\"black\" layoutX\u003d\"151.0\" layoutY\u003d\"368.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \u003c/Text\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" layoutX\u003d\"45.0\" layoutY\u003d\"160.0\" prefHeight\u003d\"21.0\" prefWidth\u003d\"283.0\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \u003cText fx:id\u003d\"availabilityLabel\" fill\u003d\"#616161\" layoutX\u003d\"39.0\" layoutY\u003d\"399.0\" strokeType\u003d\"OUTSIDE\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            strokeWidth\u003d\"0.0\" text\u003d\"STATUS:\" visible\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            \u003cFont size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \u003c/Text\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \u003cLabel fx:id\u003d\"availability\" layoutX\u003d\"149.0\" layoutY\u003d\"382.0\" text\u003d\"dfsdf\" textFill\u003d\"black\" visible\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            \u003cFont size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            \u003cInsets left\u003d\"5.0\" right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \u003cText fx:id\u003d\"availCheckTime\" fill\u003d\"black\" layoutX\u003d\"150.0\" layoutY\u003d\"420.0\" strokeType\u003d\"OUTSIDE\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            strokeWidth\u003d\"0.0\" visible\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            \u003cFont name\u003d\"System Italic\" size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \u003c/Text\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \u003cText fx:id\u003d\"labelNric\" fill\u003d\"#616161\" layoutX\u003d\"39.0\" layoutY\u003d\"211.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            text\u003d\"NRIC:\" visible\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \u003c/Text\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \u003cText fx:id\u003d\"labelPhone\" fill\u003d\"#616161\" layoutX\u003d\"40.0\" layoutY\u003d\"244.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            text\u003d\"H/P:\" visible\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            \u003cFont size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \u003c/Text\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \u003cText fx:id\u003d\"labelEmail\" fill\u003d\"#616161\" layoutX\u003d\"39.0\" layoutY\u003d\"277.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            text\u003d\"EMAIL:\" visible\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            \u003cFont size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \u003c/Text\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \u003cText fx:id\u003d\"labelAddress\" fill\u003d\"#616161\" layoutX\u003d\"39.0\" layoutY\u003d\"310.0\" strokeType\u003d\"OUTSIDE\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            strokeWidth\u003d\"0.0\" text\u003d\"ADDRESS:\" visible\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            \u003cFont size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \u003c/Text\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \u003cText fx:id\u003d\"labelDept\" fill\u003d\"#616161\" layoutX\u003d\"38.0\" layoutY\u003d\"369.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            text\u003d\"DEPARTMENT:\" visible\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            \u003cFont size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "      \u003c/Text\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003c/Pane\u003e"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 95
    }
  },
  {
    "path": "src/main/resources/view/ProfilePage.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003c?import java.util.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003cAnchorPane xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            fx:controller\u003d\"view.ProfilePage\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 14
    }
  },
  {
    "path": "src/main/resources/view/default.html",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!DOCTYPE html\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chtml\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chead\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003clink rel\u003d\"stylesheet\" href\u003d\"DarkTheme.css\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/head\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbody class\u003d\"background\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    \u003cdiv\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/body\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/html\u003e"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 1,
      "-": 9
    }
  },
  {
    "path": "src/test/data/XmlAddressBookStorageTest/invalidAndValidPersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Valid Person --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003crole\u003ePatient\u003c/role\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cnric\u003eS9299074E\u003c/nric\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cmedicalRecord\u003e, Diagnosis: , Treatment: , Comments: -\u003c/medicalRecord\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cappointment isPrivate\u003d\"false\"\u003e\u003c/appointment\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with invalid phone field --\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003crole\u003ePatient\u003c/role\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cnric\u003eS9299074E\u003c/nric\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e948asdf2424\u003c/phone\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cmedicalRecord\u003e, Diagnosis: , Treatment: , Comments: -\u003c/medicalRecord\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cappointment isPrivate\u003d\"false\"\u003e\u003c/appointment\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 8,
      "-": 17
    }
  },
  {
    "path": "src/test/data/XmlAddressBookStorageTest/invalidPersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with invalid name field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003crole\u003ePatient\u003c/role\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHa!ns Mu@ster\u003c/name\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cnric\u003eS9299074E\u003c/nric\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        \u003cmedicalRecord\u003e\u003c/medicalRecord\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cappointment\u003e\u003c/appointment\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 3,
      "GaryGohYP": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/duplicatePersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003crole\u003ePatient\u003c/role\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cnric\u003eS3305985Z\u003c/nric\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        \u003cmedicalRecord\u003e , Diagnosis: , Treatment: , Comments: -\u003c/medicalRecord\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment\u003e\u003c/appointment\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with same identity as Alice Pauline --\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003crole\u003ePatient\u003c/role\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cnric\u003eS3305985Z\u003c/nric\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003epauline@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        \u003cmedicalRecord\u003e , Diagnosis: , Treatment: , Comments: -\u003c/medicalRecord\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment\u003e\u003c/appointment\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 4,
      "GaryGohYP": 2,
      "-": 20,
      "nelvintan": 2
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/invalidPersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with invalid email field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003crole\u003ePatient\u003c/role\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cnric\u003eS9234567A\u003c/nric\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@exam!32ple\u003c/email\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        \u003cmedicalRecord\u003e\u003c/medicalRecord\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cappointment\u003e\u003c/appointment\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 3,
      "GaryGohYP": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/typicalPersonsAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook() --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003crole\u003ePatient\u003c/role\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cnric\u003eS3305985Z\u003c/nric\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cmedicalRecord\u003e , Diagnosis: , Treatment: , Comments: -\u003c/medicalRecord\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment\u003e\u003c/appointment\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003crole\u003ePatient\u003c/role\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eBenson Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cnric\u003eS1215130F\u003c/nric\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e98765432\u003c/phone\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ejohnd@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e311, Clementi Ave 2, #02-25\u003c/address\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cmedicalRecord\u003e , Diagnosis: , Treatment: , Comments: -\u003c/medicalRecord\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment\u003e\u003c/appointment\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003eowesMoney\u003c/tagged\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003crole\u003ePatient\u003c/role\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCarl Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cnric\u003eS7426958C\u003c/nric\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cmedicalRecord\u003e , Diagnosis: , Treatment: , Comments: -\u003c/medicalRecord\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment\u003e\u003c/appointment\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003crole\u003ePatient\u003c/role\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eDaniel Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cnric\u003eS8066331E\u003c/nric\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        \u003cphone\u003e87652599\u003c/phone\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cmedicalRecord\u003e , Diagnosis: , Treatment: , Comments: -\u003c/medicalRecord\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment\u003e\u003c/appointment\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003crole\u003eDoctor\u003c/role\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eElle Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cnric\u003eS6977714G\u003c/nric\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cmedicalDepartment\u003eOncology\u003c/medicalDepartment\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment\u003e\u003c/appointment\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003crole\u003eDoctor\u003c/role\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cnric\u003eS5319783C\u003c/nric\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eFiona Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cmedicalDepartment\u003eCardiology\u003c/medicalDepartment\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment\u003e\u003c/appointment\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003crole\u003eDoctor\u003c/role\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eGeorge Best\u003c/name\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cnric\u003eS5882198E\u003c/nric\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cmedicalDepartment\u003eNeurology\u003c/medicalDepartment\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cappointment\u003e\u003c/appointment\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 22,
      "GaryGohYP": 1,
      "-": 49,
      "nelvintan": 6
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/invalidPersonField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- Person with an invalid phone field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    \u003crole\u003ePatient\u003c/role\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    \u003cnric\u003eS9299074E\u003c/nric\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482asf424\u003c/phone\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    \u003cmedicalRecord\u003e\u003c/medicalRecord\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    \u003cappointment\u003e23.11.2018,1130,1300,AMY,JAKE\u003c/appointment\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 3,
      "GaryGohYP": 1,
      "-": 9
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/missingPersonField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- Person with missing name field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    \u003crole\u003ePatient\u003c/role\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    \u003cnric\u003eS9299074E\u003c/nric\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    \u003cmedicalRecord\u003e \u003c/medicalRecord\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 2,
      "GaryGohYP": 1,
      "-": 8
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003crole\u003ePatient\u003c/role\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cnric\u003eS9299074E\u003c/nric\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        \u003cmedicalRecord isPrivate\u003d\"false\"\u003e12.12.2018, Diagnosis: flu, Treatment: tamiflu, Comments: -\u003c/medicalRecord\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment isPrivate\u003d\"false\"\u003e\u003c/appointment\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003crole\u003ePatient\u003c/role\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eRuth Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cnric\u003eS5727680J\u003c/nric\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87249245\u003c/phone\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eruth@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e81th street\u003c/address\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        \u003cmedicalRecord isPrivate\u003d\"false\"\u003e12.12.2018, Diagnosis: flu, Treatment: tamiflu, Comments: -\u003c/medicalRecord\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment isPrivate\u003d\"false\"\u003e\u003c/appointment\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003crole\u003ePatient\u003c/role\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHeinz Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cnric\u003eS1030476H\u003c/nric\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        \u003cmedicalRecord isPrivate\u003d\"false\"\u003e12.12.2018, Diagnosis: flu, Treatment: tamiflu, Comments: -\u003c/medicalRecord\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment isPrivate\u003d\"false\"\u003e\u003c/appointment\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003crole\u003ePatient\u003c/role\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCornelia Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cnric\u003eS0875111J\u003c/nric\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        \u003cmedicalRecord isPrivate\u003d\"false\"\u003e12.12.2018, Diagnosis: flu, Treatment: tamiflu, Comments: -\u003c/medicalRecord\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment isPrivate\u003d\"false\"\u003eLikes to eat\u003c/appointment\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003crole\u003ePatient\u003c/role\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eWerner Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cnric\u003eS9961059Z\u003c/nric\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        \u003cmedicalRecord isPrivate\u003d\"false\"\u003e12.12.2018, Diagnosis: flu, Treatment: tamiflu, Comments: -\u003c/medicalRecord\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment isPrivate\u003d\"false\"\u003e\u003c/appointment\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003crole\u003eDoctor\u003c/role\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eLydia Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cnric\u003eS6251115Z\u003c/nric\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cmedicalDepartment\u003eNeurology\u003c/medicalDepartment\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment isPrivate\u003d\"false\"\u003e\u003c/appointment\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003crole\u003eDoctor\u003c/role\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAnna Best\u003c/name\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cnric\u003eS1016311J\u003c/nric\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cmedicalDepartment\u003eObstetrics\u003c/medicalDepartment\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment isPrivate\u003d\"false\"\u003e\u003c/appointment\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003crole\u003eDoctor\u003c/role\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eStefan Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cnric\u003eS0743717Z\u003c/nric\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003estefan@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle india\u003c/address\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cmedicalDepartment\u003ePhysiology\u003c/medicalDepartment\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment isPrivate\u003d\"false\"\u003eSmart friend\u003c/appointment\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003crole\u003eDoctor\u003c/role\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eMartin Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cnric\u003eS3608025F\u003c/nric\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482131\u003c/phone\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003echicago ave\u003c/address\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        \u003cmedicalDepartment\u003eCardiology\u003c/medicalDepartment\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment isPrivate\u003d\"false\"\u003e\u003c/appointment\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 22,
      "GaryGohYP": 5,
      "-": 57,
      "nelvintan": 9
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validPerson.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    \u003crole\u003ePatient\u003c/role\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    \u003cnric\u003eS9299074E\u003c/nric\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    \u003cmedicalRecord\u003e\u003c/medicalRecord\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    \u003cappointment\u003e23.11.2018,1130,1300,AMY,JAKE\u003c/appointment\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 3,
      "GaryGohYP": 1,
      "-": 8
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private final PersonListPanelHandle personListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private final PersonProfilePageHandle personProfilePage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanelHandle(getChildNode(PersonListPanelHandle.PERSON_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        personProfilePage \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new PersonProfilePageHandle(getChildNode(PersonProfilePageHandle.PERSON_PROFILE_PAGE_ID));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public PersonProfilePageHandle getPersonProfilePage() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return personProfilePage;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 5,
      "-": 47
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle to a person card in the person list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String NRIC_FIELD_ID \u003d \"#nric\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String ROLE_FIELD_ID \u003d \"#role\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label addressLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private final Label nricLabel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private final Label roleLabel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        roleLabel \u003d getChildNode(ROLE_FIELD_ID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        nricLabel \u003d getChildNode(NRIC_FIELD_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressLabel.getText();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public String getRole() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return roleLabel.getText();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public String getNric() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return nricLabel.getText();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if this handle contains {@code person}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Person person) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return getName().equals(person.getName().fullName)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \u0026\u0026 getRole().equalsIgnoreCase(person.getClass().getSimpleName())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \u0026\u0026 getNric().equals(person.getNric().code)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getAddress().equals(person.getAddress().value)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getPhone().equals(person.getPhone().value)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(person.getTags().stream()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                        .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                        .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 12,
      "-": 83
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonProfilePageHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * A handle for the {@code PersonProfilePageHandle} in the GUI."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class PersonProfilePageHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String PERSON_PROFILE_PAGE_ID \u003d \"#personListView\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public PersonProfilePageHandle(Node personProfilePageNode) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        super(personProfilePageNode);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String APP_TITLE \u003d \"Test App\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            createDataFileWithData(new XmlSerializableAddressBook(this.initialDataSupplier.get()),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.saveFileLocation);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(APP_TITLE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the address book data stored inside the storage file."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook readStorageAddressBook() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook(storage.readAddressBook().get());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Data is not in the AddressBook format.\", dce);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return storage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Model copy \u003d new ModelManager((model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredPersonList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an XML file at the {@code filePath} with the {@code data}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private \u003cT\u003e void createDataFileWithData(T data, Path filePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(filePath, data);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 1,
      "-": 120
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        String defaultConfigAsString \u003d \"App title : One Life App\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GaryGohYP": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/one_life_icon.png\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.getImage(null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(errorMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false, errorMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GaryGohYP": 1,
      "-": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/XmlUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedPerson;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedTag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtilTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlUtilTest\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path EMPTY_FILE \u003d TEST_DATA_FOLDER.resolve(\"empty.xml\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_FILE \u003d TEST_DATA_FOLDER.resolve(\"missing.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path VALID_FILE \u003d TEST_DATA_FOLDER.resolve(\"validAddressBook.xml\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_PERSON_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"missingPersonField.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonField.xml\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path VALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"validPerson.xml\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEMP_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"9482asf424\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String VALID_APPOINTMENT \u003d \"\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Hans Muster\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String VALID_NRIC \u003d \"S9299074E\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"9482424\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"hans@example\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"4th street\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(null, AddressBook.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_validFile_validResult() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(9, dataFromFile.getPersonList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                null, VALID_NRIC, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_APPOINTMENT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                VALID_NAME, VALID_NRIC, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_APPOINTMENT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                VALID_NAME, VALID_NRIC, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_APPOINTMENT);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(null, new AddressBook());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_validFile_dataSaved() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(TEMP_FILE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        dataToWrite \u003d new XmlSerializableAddressBook("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                builder.withPerson(new PersonBuilder().build()).build());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * objects."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlRootElement(name \u003d \"person\")"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 5,
      "-": 143
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Person validPerson \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model, commandHistory,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, commandHistory,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 2,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.testutil.DoctorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Person validPerson \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Person validPerson \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        /** Test case for Patient **/"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Person alice \u003d new PatientBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Person bob \u003d new PatientBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        /** Test case for Doctor **/"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Person jim \u003d new DoctorBuilder().withName(\"Jim\").build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Person brock \u003d new DoctorBuilder().withName(\"Brock\").build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        AddCommand addJimCommand \u003d new AddCommand(jim);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        AddCommand addBrockCommand \u003d new AddCommand(brock);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        AddCommand addJimCommandCopy \u003d new AddCommand(jim);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(addJimCommand.equals(addJimCommandCopy));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(addJimCommand.equals(1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(addJimCommand.equals(null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(addJimCommand.equals(addBrockCommand));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        public void changeDatabase(Predicate\u003cPerson\u003e filer, String role) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        public void clearActiveDatabase() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        public String getCurrentDatabase() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        public boolean hasSuchPerson(Name name, Nric nric) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        public boolean hasSuchPatient(Name name, Nric nric) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        public boolean hasSuchDoctor(Name name, Nric nric) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        public Optional\u003cPerson\u003e getPerson(Nric nric) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        public String addIntuitiveEntry(String entry) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        public String removeIntuitiveEntry() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        public boolean isIntuitiveMode() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        public boolean areIntuitiveArgsAvailable() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        public String retrieveIntuitiveArguments() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        public void cancelIntuitiveCommand() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tristonpang": 29,
      "guestuser0123": 57,
      "-": 199,
      "nelvintan": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearallCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class ClearallCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertCommandSuccess(new ClearallCommand(), model, commandHistory, ClearallCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.resetData(new AddressBook());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertCommandSuccess(new ClearallCommand(), model, commandHistory, ClearallCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 6,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL_DEPARTMENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL_RECORD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import seedu.address.model.person.PersonContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String VALID_MEDICAL_RECORD_AMY \u003d \"12.12.2018, Diagnosis: cough, \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + \"Treatment: dextromethorphan, Comments: -\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String VALID_MEDICAL_RECORD_BOB \u003d \"12.12.2018, Diagnosis: flu, Treatment: tamiflu, Comments: -\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String VALID_SCHEDULE_AMY \u003d \"22.11.2018,1300,1400,Alice,S4612750A,Amy,S8998334G\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String VALID_SCHEDULE_BOB \u003d \"22.11.2018,1300,1400,Jack,S1249482C,Bob,S0529160G\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String VALID_ROLE_DOCTOR \u003d \"doctor\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String VALID_ROLE_PATIENT \u003d \"patient\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String VALID_MEDICAL_DEPARTMENT \u003d \"Dermatology\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String VALID_NRIC_AMY \u003d \"S8998334G\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String VALID_NRIC_BOB \u003d \"S0529160G\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String NRIC_DESC_AMY \u003d \" \" + PREFIX_NRIC + VALID_NRIC_AMY;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String NRIC_DESC_BOB \u003d \" \" + PREFIX_NRIC + VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String MEDICAL_RECORD_DESC_AMY \u003d \" \" + PREFIX_MEDICAL_RECORD + VALID_MEDICAL_RECORD_AMY;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String MEDICAL_RECORD_DESC_BOB \u003d \" \" + PREFIX_MEDICAL_RECORD + VALID_MEDICAL_RECORD_BOB;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String MEDICAL_DEPARTMENT_DESC \u003d \" \" + PREFIX_MEDICAL_DEPARTMENT + VALID_MEDICAL_DEPARTMENT;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String ROLE_DOCTOR_DESC \u003d \" \" + PREFIX_ROLE + VALID_ROLE_DOCTOR;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String ROLE_PATIENT_DESC \u003d \" \" + PREFIX_ROLE + VALID_ROLE_PATIENT;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String INVALID_NRIC_DESC \u003d \" \" + PREFIX_NRIC + \"JB123456A\"; // cant start with 2 letters"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String INVALID_ROLE_DESC \u003d \" \" + PREFIX_ROLE + \"teacher\"; // not a valid role"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String INVALID_MEDICAL_DEPARTMENT_DESC \u003d \" \" + PREFIX_MEDICAL_DEPARTMENT + \"HE12RT\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    // numbers not allowed"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String VALID_DATE \u003d \"23.11.2019\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String VALID_DATE_SECOND \u003d \"11.11.3011\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String DATE_DESC \u003d \" \" + PREFIX_DATE + VALID_DATE;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String SECOND_DATE_DESC \u003d \" \" + PREFIX_DATE + VALID_DATE_SECOND;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String VALID_START_TIME \u003d \"1500\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String VALID_END_TIME \u003d \"1600\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String VALID_TIME \u003d \"0800\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String START_TIME_DESC \u003d \" \" + PREFIX_START_TIME + VALID_START_TIME;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String END_TIME_DESC \u003d \" \" + PREFIX_END_TIME + VALID_END_TIME;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String SECOND_START_TIME_DESC \u003d \" \" + PREFIX_START_TIME + VALID_TIME;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String SECOND_END_TIME_DESC \u003d \" \" + PREFIX_END_TIME + VALID_TIME;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String INVALID_DATE_DESC \u003d \" \" + PREFIX_DATE + \"23.13\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String INVALID_START_TIME_DESC \u003d \" \" + PREFIX_START_TIME + \"111111\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String INVALID_END_TIME_DESC \u003d \" \" + PREFIX_END_TIME + \"111111\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                                            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book and the filtered person list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                                            String expectedMessage) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        model.updateFilteredPersonList(new PersonContainsKeywordsPredicate(Map.of(PREFIX_NAME,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new ArrayList\u003c\u003e(Arrays.asList(splitName[0])))));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(firstPerson);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 1,
      "guestuser0123": 48,
      "-": 138
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.testutil.DoctorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient editedPerson \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        DoctorBuilder personInList \u003d new DoctorBuilder((Doctor) lastPerson);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Person editedPerson \u003d new PatientBuilder((Patient) personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient editedPerson \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e first person edited"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person edited again"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Edits a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient editedPerson \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e edits second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), personToEdit);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e edits same second person in unfiltered person list"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 9,
      "-": 242
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GLOBAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import seedu.address.model.person.PersonContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        PersonContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                new PersonContainsKeywordsPredicate(Map.of(PREFIX_GLOBAL, new ArrayList\u003c\u003e(Arrays.asList(\"first\"))));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        PersonContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                new PersonContainsKeywordsPredicate(Map.of(PREFIX_GLOBAL, new ArrayList\u003c\u003e(Arrays.asList(\"second\"))));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        PersonContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        PersonContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "     * Parses {@code userInput} into a {@code PersonContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "    private PersonContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        return new PersonContainsKeywordsPredicate(Map.of(PREFIX_GLOBAL,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                new ArrayList\u003c\u003e(Arrays.asList(userInput.split(\"\\\\s+\")))));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 15,
      "-": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ScheduleCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHEDULE_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHEDULE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nelvintan"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ScheduleCommand."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nelvintan"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "public class ScheduleCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String SCHEDULE_STUB \u003d \"23.11.2018,1300,1400,Elle Meyer,S6977714G,Alice Pauline,S3305985Z\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void execute_addScheduleUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient firstPerson \u003d (Patient) model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        firstPerson.clearAppointmentList(); // This prevents appointments collected from different tests to clash."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient editedPerson \u003d new PatientBuilder(firstPerson).withAppointment(SCHEDULE_STUB).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        ScheduleCommand scheduleCommand \u003d new ScheduleCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new Appointment(editedPerson.getAppointment().value));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        String expectedMessage \u003d String.format(ScheduleCommand.MESSAGE_SCHEDULE_APPOINTMENT_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        expectedModel.updatePerson(firstPerson, editedPerson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertCommandSuccess(scheduleCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void execute_deleteScheduleUnfilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient firstPerson \u003d (Patient) model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        firstPerson.clearAppointmentList(); // This prevents appointments collected from different tests to clash."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Patient editedPerson \u003d new PatientBuilder(firstPerson)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .withAppointment(\"22.11.2018,1300,1400,Elle Meyer,S6977714G,\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                        + firstPerson.getName().toString()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                        + \",\" + firstPerson.getNric().toString()).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ScheduleCommand scheduleCommand \u003d new ScheduleCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                new Appointment(editedPerson.getAppointment().toString()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        String expectedMessage \u003d String.format(ScheduleCommand.MESSAGE_SCHEDULE_APPOINTMENT_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        expectedModel.updatePerson(firstPerson, editedPerson);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertCommandSuccess(scheduleCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient firstPerson \u003d (Patient) model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        firstPerson.clearAppointmentList(); // This prevents appointments collected from different tests to clash."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient editedPerson \u003d new PatientBuilder((Patient) model.getFilteredPersonList()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .get(INDEX_FIRST_PERSON.getZeroBased()))"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                .withAppointment(SCHEDULE_STUB).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        ScheduleCommand scheduleCommand \u003d new ScheduleCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new Appointment(editedPerson.getAppointment().value));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        String expectedMessage \u003d String.format(ScheduleCommand.MESSAGE_SCHEDULE_APPOINTMENT_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        expectedModel.updatePerson(firstPerson, editedPerson);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertCommandSuccess(scheduleCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ScheduleCommand scheduleCommand \u003d new ScheduleCommand(outOfBoundIndex, new Appointment(VALID_SCHEDULE_BOB));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertCommandFailure(scheduleCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ScheduleCommand scheduleCommand \u003d new ScheduleCommand(outOfBoundIndex, new Appointment(VALID_SCHEDULE_BOB));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertCommandFailure(scheduleCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient personToModify \u003d (Patient) model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        personToModify.clearAppointmentList(); // This prevents appointments collected from different tests to clash."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient modifiedPerson \u003d new PatientBuilder(personToModify).withAppointment(SCHEDULE_STUB).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        String[] parts \u003d SCHEDULE_STUB.split(\",\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ScheduleCommand scheduleCommand \u003d new ScheduleCommand(INDEX_FIRST_PERSON, new Appointment(parts[0],"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                parts[1], parts[2], parts[3], parts[4],"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                personToModify.getName().toString(), personToModify.getNric().toString()));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        expectedModel.updatePerson(personToModify, modifiedPerson);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // schedule -\u003e first person schedule changed"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        scheduleCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // redo -\u003e same first person modified again"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ScheduleCommand scheduleCommand \u003d new ScheduleCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new Appointment(\"22.11.2018,1300,1400,Alice,S3305985Z,Benson Meier,S8234567A\"));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertCommandFailure(scheduleCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * 1. Modifies {@code Person#Appointment} from a filtered list."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * 2. Undo the modification."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously modified person in the"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * 4. Redo the modification. This ensures {@code RedoCommand} modifies the person object regardless of indexing."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ScheduleCommand scheduleCommand \u003d new ScheduleCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new Appointment(\"22.11.2018,1300,1400,Elle Meyer,S6977714G,\""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                        + \"Benson Meier\""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                        + \",\" + \"S1215130F\"));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient personToModify \u003d (Patient) model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        personToModify.clearAppointmentList(); // This prevents appointments collected from different tests to clash."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Patient modifiedPerson \u003d new PatientBuilder(personToModify)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .withAppointment(\"22.11.2018,1300,1400,Elle Meyer,S6977714G,\""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                        + personToModify.getName().toString() + \",\""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                        + personToModify.getNric().toString())"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        expectedModel.updatePerson(personToModify, modifiedPerson);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // schedule -\u003e modifies second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        scheduleCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // redo -\u003e modifies same second person in unfiltered person list"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        final ScheduleCommand standardCommand \u003d new ScheduleCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new Appointment(VALID_SCHEDULE_AMY));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        ScheduleCommand commandWithSameValues \u003d new ScheduleCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new Appointment(VALID_SCHEDULE_AMY));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(standardCommand.equals(new ScheduleCommand(INDEX_SECOND_PERSON,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new Appointment(VALID_SCHEDULE_AMY))));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // different appointment -\u003e returns false"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(standardCommand.equals(new ScheduleCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new Appointment(VALID_SCHEDULE_BOB))));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 36,
      "nelvintan": 190
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UpdateCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MEDICAL_RECORD_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MEDICAL_RECORD_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIFTH_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.MedicalRecord;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "public class UpdateCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public void execute_updateMedicalRecord_success() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient editedPatient \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new PatientBuilder((Patient) model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                        .withMedicalRecord(\"13.12.2018, Diagnosis: flu, Treatment: tamiflu, Comments: -\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(INDEX_FIRST_PERSON, editedPatient.getMedicalRecord());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_UPDATE_MEDICAL_RECORD_SUCCESS, editedPatient);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPatient);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        assertCommandSuccess(updateCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public void execute_filteredList_success() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient personInFilteredList \u003d (Patient) model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient editedPerson \u003d new PatientBuilder(personInFilteredList)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                .withMedicalRecord(\"12.12.2018, Diagnosis: flu, Treatment: tamiflu, Comments: -\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(INDEX_FIRST_PERSON, editedPerson.getMedicalRecord());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_UPDATE_MEDICAL_RECORD_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        assertCommandSuccess(updateCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(outOfBoundIndex, new MedicalRecord(VALID_MEDICAL_RECORD_BOB));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        assertCommandFailure(updateCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(outOfBoundIndex, new MedicalRecord(VALID_MEDICAL_RECORD_BOB));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        assertCommandFailure(updateCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Edit filtered list where the user tries to edit medical records of a Doctor,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * which is not allowed."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void execute_invalidDoctorFilterList_failure() throws Exception {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(INDEX_FIFTH_PERSON,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new MedicalRecord(VALID_MEDICAL_RECORD_BOB));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertCommandFailure(updateCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_CHOSEN);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        final UpdateCommand standardCommand \u003d new UpdateCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new MedicalRecord(VALID_MEDICAL_RECORD_AMY));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        UpdateCommand commandWithSameValues \u003d new UpdateCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new MedicalRecord(VALID_MEDICAL_RECORD_AMY));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(standardCommand.equals(new UpdateCommand(INDEX_SECOND_PERSON,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new MedicalRecord(VALID_MEDICAL_RECORD_AMY))));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        // different medical records -\u003e returns false"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(standardCommand.equals(new UpdateCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new MedicalRecord(VALID_MEDICAL_RECORD_BOB))));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 31,
      "GaryGohYP": 98,
      "nelvintan": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NRIC_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ROLE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ROLE_DOCTOR_DESC;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ROLE_PATIENT_DESC;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ROLE_PATIENT;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Role;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient expectedPerson \u003d new PatientBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + ROLE_PATIENT_DESC + NAME_DESC_BOB"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + NRIC_DESC_BOB,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseSuccess(parser, ROLE_PATIENT_DESC + NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + NRIC_DESC_BOB, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // multiple nric - last nric accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseSuccess(parser, ROLE_PATIENT_DESC + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                        + ADDRESS_DESC_AMY + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + NRIC_DESC_AMY + NRIC_DESC_BOB,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseSuccess(parser, ROLE_PATIENT_DESC + NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + NRIC_DESC_BOB, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseSuccess(parser, ROLE_PATIENT_DESC + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + NRIC_DESC_BOB, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseSuccess(parser, ROLE_PATIENT_DESC + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + ADDRESS_DESC_AMY + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + NRIC_DESC_BOB,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // multiple roles - last role accepted"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseSuccess(parser, ROLE_DOCTOR_DESC + ROLE_PATIENT_DESC + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                        + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + NRIC_DESC_BOB,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PatientBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseSuccess(parser, ROLE_PATIENT_DESC + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + NRIC_DESC_BOB, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient expectedPerson \u003d new PatientBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseSuccess(parser, ROLE_PATIENT_DESC + NAME_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                        + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NRIC_DESC_AMY, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_GENERAL_USAGE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // missing role prefix"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser, VALID_ROLE_PATIENT + VALID_NAME_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser, ROLE_PATIENT_DESC + VALID_NAME_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // missing nric prefix"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser, ROLE_PATIENT_DESC + NAME_DESC_BOB + VALID_NRIC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser, ROLE_PATIENT_DESC + NAME_DESC_BOB + NRIC_DESC_BOB + VALID_PHONE_BOB"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser, ROLE_PATIENT_DESC + NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + VALID_EMAIL_BOB + ADDRESS_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser, ROLE_PATIENT_DESC + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + VALID_ADDRESS_BOB, expectedMessage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser, VALID_ROLE_PATIENT + VALID_NAME_BOB + NRIC_DESC_BOB + VALID_PHONE_BOB"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + VALID_EMAIL_BOB + VALID_ADDRESS_BOB, expectedMessage);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // invalid role"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser, INVALID_ROLE_DESC + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + NRIC_DESC_BOB"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Role.MESSAGE_ROLE_CONSTRAINTS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser, ROLE_PATIENT_DESC + INVALID_NAME_DESC + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + NRIC_DESC_BOB"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser, ROLE_PATIENT_DESC + NAME_DESC_BOB"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + INVALID_PHONE_DESC + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + ADDRESS_DESC_BOB + NRIC_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser, ROLE_PATIENT_DESC + NAME_DESC_BOB"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + PHONE_DESC_BOB + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + ADDRESS_DESC_BOB + NRIC_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser, ROLE_PATIENT_DESC + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC + TAG_DESC_HUSBAND + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + NRIC_DESC_BOB, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser, ROLE_PATIENT_DESC + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + NRIC_DESC_BOB"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // invalid NRIC"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser, ROLE_PATIENT_DESC + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + ADDRESS_DESC_BOB + INVALID_NRIC_DESC, Nric.MESSAGE_NRIC_CONSTRAINTS);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser, ROLE_PATIENT_DESC + INVALID_NAME_DESC + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC + NRIC_DESC_BOB, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                PREAMBLE_NON_EMPTY + ROLE_PATIENT_DESC + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + NRIC_DESC_BOB,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_GENERAL_USAGE));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 88,
      "-": 102
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DIAGNOSIS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DOCTOR_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DOCTOR_NRIC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GLOBAL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PATIENT_NAME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PATIENT_NRIC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TREATMENT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.MedicalRecord;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import seedu.address.model.person.PersonContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.testutil.DoctorBuilder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.testutil.DoctorUtil;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.testutil.PatientUtil;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient patient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PatientUtil.getAddCommand(patient));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertEquals(new AddCommand(patient), command);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Doctor doctor \u003d new DoctorBuilder().build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d (AddCommand) parser.parseCommand(DoctorUtil.getAddCommand(doctor));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertEquals(new AddCommand(doctor), command);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient patient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(patient).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PatientUtil.getEditPatientDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void parseCommand_schedule() throws Exception {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        final Appointment appointment \u003d new Appointment(\"22.11.2018,1300,1400,Alice,S3305985Z,Betty,S8581745J\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        final String testAppointment \u003d PREFIX_DATE + \"22.11.2018 \""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                + PREFIX_START_TIME + \"1300 \""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                + PREFIX_END_TIME + \"1400 \""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                + PREFIX_DOCTOR_NAME + \"Alice \""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + PREFIX_DOCTOR_NRIC + \"S3305985Z \""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                + PREFIX_PATIENT_NAME + \"Betty \""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + PREFIX_PATIENT_NRIC + \"S8581745J \";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ScheduleCommand command \u003d (ScheduleCommand) parser.parseCommand(ScheduleCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + testAppointment);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertEquals(new ScheduleCommand(INDEX_FIRST_PERSON, appointment), command);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Map\u003cPrefix, List\u003cString\u003e\u003e keywords \u003d Map.of(PREFIX_GLOBAL, new ArrayList\u003c\u003e(Arrays.asList(\"foo\", \"bar\", \"baz\")));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand(FindCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + keywords.get(PREFIX_GLOBAL).stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        assertEquals(new FindCommand(new PersonContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + \" \" + PREFIX_ROLE + \"DOCTOR\") instanceof ListCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + \" \" + PREFIX_ROLE + \"PATIENT\") instanceof ListCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public void parseCommand_updateCommandWord_returnsUpdateCommand() throws Exception {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        final MedicalRecord medicalRecordWithoutComment \u003d new MedicalRecord(\"22.11.2018\", \"flu\","
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                \"tamiflu\", \"\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        final String testMedicalRecordWithoutComment \u003d PREFIX_DATE + \"22.11.2018 \""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                + PREFIX_DIAGNOSIS + \"flu \""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                + PREFIX_TREATMENT + \"tamiflu\";"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        UpdateCommand commandWithoutComment \u003d (UpdateCommand) parser.parseCommand(UpdateCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + testMedicalRecordWithoutComment);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        assertEquals(new UpdateCommand(INDEX_FIRST_PERSON, medicalRecordWithoutComment), commandWithoutComment);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        final MedicalRecord medicalRecordWithComment \u003d new MedicalRecord(\"22.11.2018\", \"flu\","
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                \"tamiflu\", \"\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        final String testMedicalRecordWithComment \u003d PREFIX_DATE + \"22.11.2018 \""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                + PREFIX_DIAGNOSIS + \"flu \""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                + PREFIX_TREATMENT + \"tamiflu\";"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        UpdateCommand commandWithComment \u003d (UpdateCommand) parser.parseCommand(UpdateCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + testMedicalRecordWithComment);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        assertEquals(new UpdateCommand(INDEX_FIRST_PERSON, medicalRecordWithComment), commandWithComment);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 2,
      "guestuser0123": 33,
      "GaryGohYP": 24,
      "-": 128,
      "nelvintan": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AvailCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.END_TIME_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_END_TIME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_START_TIME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SECOND_DATE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SECOND_END_TIME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SECOND_START_TIME_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.START_TIME_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_SECOND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.logic.commands.AvailCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class AvailCommandSystemTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private AvailCommandParser parser \u003d new AvailCommandParser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + DATE_DESC + START_TIME_DESC + END_TIME_DESC,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new AvailCommand(new Date(VALID_DATE), new Time(VALID_START_TIME), new Time(VALID_END_TIME)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // multiple dates - last date accepted"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseSuccess(parser, DATE_DESC + SECOND_DATE_DESC + START_TIME_DESC + END_TIME_DESC,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new AvailCommand(new Date(VALID_DATE_SECOND), new Time(VALID_START_TIME), new Time(VALID_END_TIME)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // multiple start time - last start time accepted"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseSuccess(parser, DATE_DESC + SECOND_START_TIME_DESC + START_TIME_DESC"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + END_TIME_DESC, new AvailCommand(new Date(VALID_DATE), new Time(VALID_START_TIME),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new Time(VALID_END_TIME)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // multiple end time - last end time accepted"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseSuccess(parser, DATE_DESC + START_TIME_DESC + SECOND_END_TIME_DESC"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + END_TIME_DESC, new AvailCommand(new Date(VALID_DATE), new Time(VALID_START_TIME),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new Time(VALID_END_TIME)));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // no date"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseSuccess(parser, START_TIME_DESC + END_TIME_DESC, new AvailCommand(Date.getCurrentDate(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new Time(VALID_START_TIME), new Time(VALID_END_TIME)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // no start and end time"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseSuccess(parser, DATE_DESC, new AvailCommand(new Date(VALID_DATE), Time.getCurrentTime(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                Time.getCurrentTime()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String expectedMessage \u003d String.format(AvailCommand.MESSAGE_INVALID_TIME_INPUT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // missing end time prefix but start time prefix present"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser, DATE_DESC + START_TIME_DESC, expectedMessage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // missing start time prefix but end time prefix present"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser, DATE_DESC + END_TIME_DESC, expectedMessage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // invalid start time"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        assertParseFailure(parser, DATE_DESC + INVALID_START_TIME_DESC + END_TIME_DESC, (new Time(\"111111\"))"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                .getFailureReason());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // invalid end time"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        assertParseFailure(parser, DATE_DESC + START_TIME_DESC + INVALID_END_TIME_DESC, (new Time(\"111111\"))"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                .getFailureReason());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        assertParseFailure(parser, INVALID_DATE_DESC, (new Date(\"23.13\")).getInvalidReason());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        assertParseFailure(parser, DATE_DESC + INVALID_START_TIME_DESC"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                + INVALID_END_TIME_DESC, (new Time(\"111111\")).getFailureReason());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                PREAMBLE_NON_EMPTY + DATE_DESC + START_TIME_DESC + END_TIME_DESC,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AvailCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 89,
      "GaryGohYP": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + VALID_ADDRESS_AMY + VALID_PHONE_AMY, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND + NRIC_DESC_BOB;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + EMAIL_DESC_AMY + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + ADDRESS_DESC_BOB + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 33,
      "-": 193
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GLOBAL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import seedu.address.model.person.PersonContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        // input between two valid prefixes is empty"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        assertParseFailure(parser, \" n/ p/91919191 \","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        // input after last valid prefix is empty"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        assertParseFailure(parser, \" n/\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "    public void parse_invalidPrefix_throwsParseException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        // prefix not in valid list"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        assertParseFailure(parser, \" role/doctor\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        // mix of valid and invalid prefixes"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        assertParseFailure(parser, \" n/alex role/doctor\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        Map\u003cPrefix, List\u003cString\u003e\u003e testMap \u003d Map.of(PREFIX_GLOBAL, new ArrayList\u003c\u003e(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                new FindCommand(new PersonContainsKeywordsPredicate(testMap));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        testMap \u003d Map.of(PREFIX_NAME, new ArrayList\u003c\u003e(Arrays.asList(\"Alice\", \"Bob\")),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                PREFIX_TAG, new ArrayList\u003c\u003e(Arrays.asList(\"friends\")));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        expectedFindCommand \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                new FindCommand(new PersonContainsKeywordsPredicate(testMap));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        // valid tags in mixed order"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        assertParseSuccess(parser, \" n/Alice t/friends n/Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        // space in between tags and prefixes"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        assertParseSuccess(parser, \" n/ \\n Alice \\n n/ \\t Bob \\t t/friends\", expectedFindCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 40,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ScheduleCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DOCTOR_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DOCTOR_NRIC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PATIENT_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PATIENT_NRIC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "public class ScheduleCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private ScheduleCommandParser parser \u003d new ScheduleCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private final String nonEmptyAppointment \u003d PREFIX_DATE + \"22.11.2018 \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + PREFIX_START_TIME + \"1300 \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + PREFIX_END_TIME + \"1400 \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + PREFIX_DOCTOR_NAME + \"Alice \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + PREFIX_DOCTOR_NRIC + \"S9380791Z \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + PREFIX_PATIENT_NAME + \"Betty \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            + PREFIX_PATIENT_NRIC + \"S6219609B \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void parse_indexSpecified_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // have remark"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + \" \" + nonEmptyAppointment;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ScheduleCommand expectedCommand \u003d new ScheduleCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                new Appointment(\"22.11.2018\", \"1300\", \"1400\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                        \"Alice\", \"S9380791Z\", \"Betty\", \"S6219609B\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // no remark"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + \" \" + nonEmptyAppointment;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        expectedCommand \u003d new ScheduleCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                new Appointment(\"22.11.2018\", \"1300\", \"1400\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Alice\", \"S9380791Z\", \"Betty\", \"S6219609B\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void parse_missingCompulsoryField_failure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // no parameters"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertParseFailure(parser, ScheduleCommand.COMMAND_WORD, expectedMessage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // no index"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertParseFailure(parser, ScheduleCommand.COMMAND_WORD + \" \" + nonEmptyAppointment, expectedMessage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 4,
      "nelvintan": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/UpdateCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DIAGNOSIS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TREATMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.MedicalRecord;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "public class UpdateCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private UpdateCommandParser parser \u003d new UpdateCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public void parse_indexSpecified_failure() throws Exception {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        // medical record without comment"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        final MedicalRecord medicalRecordWithoutComment \u003d new MedicalRecord(\"22.11.2018\", \"flu\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                \"tamiflu\", \"\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        String userInputWithoutComment \u003d targetIndex.getOneBased() + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                + PREFIX_DATE + \"22.11.2018 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                + PREFIX_DIAGNOSIS + \"flu \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                + PREFIX_TREATMENT + \"tamiflu\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        UpdateCommand expectedCommandWithoutComment \u003d new UpdateCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                medicalRecordWithoutComment);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        assertParseSuccess(parser, userInputWithoutComment, expectedCommandWithoutComment);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        // medical record with comment"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        final MedicalRecord medicalRecordWithComment \u003d new MedicalRecord(\"22.11.2018\", \"flu\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                \"tamiflu\", \"Some comment!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        String userInputWithComment \u003d targetIndex.getOneBased() + \" \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                + PREFIX_DATE + \"22.11.2018 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                + PREFIX_DIAGNOSIS + \"flu \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                + PREFIX_TREATMENT + \"tamiflu \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                + PREFIX_COMMENT + \"Some comment!\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        UpdateCommand expectedCommandWithComment \u003d new UpdateCommand(INDEX_FIRST_PERSON, medicalRecordWithComment);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        assertParseSuccess(parser, userInputWithComment, expectedCommandWithComment);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public void parse_noFieldSpecified_failure() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdateCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        // nothing at all"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        assertParseFailure(parser, UpdateCommand.COMMAND_WORD, expectedMessage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 1,
      "GaryGohYP": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.hasPerson(null);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.getPersonList().remove(0);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 4,
      "-": 107
    }
  },
  {
    "path": "src/test/java/seedu/address/model/IntuitivePromptManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.argumentmanagers.AddArgumentManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.argumentmanagers.EditArgumentManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.argumentmanagers.FindArgumentManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "import seedu.address.model.person.Role;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "public class IntuitivePromptManagerTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    private IntuitivePromptManager intuitivePromptManager \u003d new IntuitivePromptManager();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public void isIntuitiveMode_onCreation_returnsFalse() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertFalse(intuitivePromptManager.isIntuitiveMode());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public void addArgument_addCommandWord_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(AddCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertTrue(intuitivePromptManager.isIntuitiveMode());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertFalse(intuitivePromptManager.areArgsAvailable());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public void getInstruction_getNextRequiredAddInstruction_getCorrectInstruction() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(AddCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertEquals(String.format(IntuitivePromptManager.INTUITIVE_MODE_MESSAGE, AddCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                + \"\\n\" + AddArgumentManager.ROLE_INSTRUCTION, intuitivePromptManager.getInstruction());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public void addArgument_addFirstArgument_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(AddCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(AddArgumentManager.PATIENT_ARG_IDENTIFIER);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertTrue(intuitivePromptManager.areArgsAvailable());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public void addArgument_invalidArgument_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(AddCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        thrown.expectMessage(Role.MESSAGE_ROLE_CONSTRAINTS + \"\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                + String.format(IntuitivePromptManager.INTUITIVE_MODE_MESSAGE, AddCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                + \"\\n\" + AddArgumentManager.ROLE_INSTRUCTION);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"!@#$%\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public void addArgument_findCommandWithDuplicateIndex_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(FindCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        thrown.expectMessage(String.format(FindArgumentManager.FIND_INVALID_FIELDS_MESSAGE, 1, 10) + \"\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                + String.format(IntuitivePromptManager.INTUITIVE_MODE_MESSAGE, FindCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                + \"\\n\" + FindArgumentManager.FIND_SEARCH_FIELDS_INSTRUCTION);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"3 3\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public void addArgument_editCommandWithDuplicateIndex_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(EditCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"3\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        thrown.expectMessage(String.format(EditArgumentManager.EDIT_INVALID_FIELDS_MESSAGE, 1, 5)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                + \"\\n\" + String.format(IntuitivePromptManager.INTUITIVE_MODE_MESSAGE, EditCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                + \"\\n\" + EditArgumentManager.EDIT_FIELDS_INSTRUCTION);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"5 5\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    Arguments Retrieval Tests"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public void retrieveArguments_addPatientWithoutTags_successfulRetrieval() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(AddCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(AddArgumentManager.PATIENT_ARG_IDENTIFIER);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"John Doe\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"95592345\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"doe@gmail.com\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"Blk 123 Smith Street\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"//\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        intuitivePromptManager.addArgument(\"S0798129E\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertFalse(intuitivePromptManager.isIntuitiveMode());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        String retrievedArguments \u003d intuitivePromptManager.retrieveArguments();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertEquals(retrievedArguments, AddCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                + PREFIX_ROLE + \"patient \""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                + PREFIX_PHONE + \"95592345 \""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                + PREFIX_EMAIL + \"doe@gmail.com \""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                + PREFIX_ADDRESS + \"Blk 123 Smith Street \""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + PREFIX_NRIC + \"S0798129E\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertFalse(intuitivePromptManager.areArgsAvailable());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public void retrieveArguments_addPatientWithTags_successfulRetrieval() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(AddCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(AddArgumentManager.PATIENT_ARG_IDENTIFIER);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"John Doe\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"95592345\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"doe@gmail.com\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"Blk 123 Smith Street\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"vegetarian,prefersTablets\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        intuitivePromptManager.addArgument(\"S0305372E\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertFalse(intuitivePromptManager.isIntuitiveMode());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        String retrievedArguments \u003d intuitivePromptManager.retrieveArguments();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertEquals(retrievedArguments, AddCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                + PREFIX_ROLE + \"patient \""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                + PREFIX_PHONE + \"95592345 \""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                + PREFIX_EMAIL + \"doe@gmail.com \""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                + PREFIX_ADDRESS + \"Blk 123 Smith Street \""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                + PREFIX_TAG + \"vegetarian \""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                + PREFIX_TAG + \"prefersTablets \""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + PREFIX_NRIC + \"S0305372E\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertFalse(intuitivePromptManager.areArgsAvailable());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public void retrieveArguments_editPerson_successfulRetrieval() throws Exception {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(EditCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"2\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"1 3\"); //edit name and email"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"Jane Watson\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"watson@gmail.com\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertFalse(intuitivePromptManager.isIntuitiveMode());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        String retrievedArguments \u003d intuitivePromptManager.retrieveArguments();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertEquals(retrievedArguments, \"edit 2 n/Jane Watson e/watson@gmail.com\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertFalse(intuitivePromptManager.areArgsAvailable());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public void retrieveArguments_editWithNonAscendingIndexFields_successfulRetrieval() throws Exception {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(EditCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"5\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"5 4 1 3\"); //edit name and email"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"Jane Watson\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"watson@gmail.com\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"Street 123\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"family,friends\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertFalse(intuitivePromptManager.isIntuitiveMode());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        String retrievedArguments \u003d intuitivePromptManager.retrieveArguments();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertEquals(retrievedArguments, \"edit 5 n/Jane Watson e/watson@gmail.com \""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                + \"a/Street 123 t/family t/friends\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertFalse(intuitivePromptManager.areArgsAvailable());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public void retrieveArguments_editClearPersonTags_successfulRetrieval() throws Exception {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(EditCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"2\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"5\"); //edit tags"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(EditArgumentManager.EDIT_CLEAR_TAGS_COMMAND);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertFalse(intuitivePromptManager.isIntuitiveMode());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        String retrievedArguments \u003d intuitivePromptManager.retrieveArguments();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertEquals(retrievedArguments, \"edit 2 t/\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertFalse(intuitivePromptManager.areArgsAvailable());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public void retrieveArguments_deletePerson_successfulRetrieval() throws Exception {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(DeleteCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"3\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertFalse(intuitivePromptManager.isIntuitiveMode());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        String retrievedArguments \u003d intuitivePromptManager.retrieveArguments();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertEquals(retrievedArguments, \"delete 3\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertFalse(intuitivePromptManager.areArgsAvailable());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public void retrieveArguments_scheduleAppointment_successfulRetrieval() throws Exception {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(ScheduleCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"1\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"12.12.2018\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"1500\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"1600\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        //doctor details"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"Jane Smith\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        intuitivePromptManager.addArgument(\"S6219609B\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        //patient details"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"Bob Carpenter\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        intuitivePromptManager.addArgument(\"S5665160H\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertFalse(intuitivePromptManager.isIntuitiveMode());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        String retrievedArguments \u003d intuitivePromptManager.retrieveArguments();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertEquals(retrievedArguments, \"schedule 1 d/12.12.2018 st/1500 et/1600 dn/Jane Smith di/S6219609B \""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + \"pn/Bob Carpenter pi/S5665160H\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertFalse(intuitivePromptManager.areArgsAvailable());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public void retrieveArguments_findPerson_successfulRetrieval() throws Exception {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(FindCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"1 2 3 7 10\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"ang\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"Bob,Charlotte\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"S1111222A,S3332222X\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"patient\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"coughing\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertFalse(intuitivePromptManager.isIntuitiveMode());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        String retrievedArguments \u003d intuitivePromptManager.retrieveArguments();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertEquals(retrievedArguments, \"find ang n/Bob n/Charlotte ic/S1111222A ic/S3332222X \""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                + \"r/patient mr/coughing\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertFalse(intuitivePromptManager.areArgsAvailable());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public void retrieveArguments_findWithNonAscendingIndexFields_successfulRetrieval() throws Exception {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(FindCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"8 9 2\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"Bob,Charlotte\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"friend,family\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"surgery\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertFalse(intuitivePromptManager.isIntuitiveMode());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        String retrievedArguments \u003d intuitivePromptManager.retrieveArguments();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertEquals(retrievedArguments, \"find n/Bob n/Charlotte t/friend t/family md/surgery\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertFalse(intuitivePromptManager.areArgsAvailable());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public void retrieveArguments_updateMedicalRecord_successfulRetrieval() throws Exception {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(UpdateCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"3\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        intuitivePromptManager.addArgument(\"12.11.9999\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"runny nose\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"loratadine\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"mc given for 2 days\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertFalse(intuitivePromptManager.isIntuitiveMode());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        String retrieveArguments \u003d intuitivePromptManager.retrieveArguments();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        assertEquals(retrieveArguments, \"update 3 d/12.11.9999 dg/runny nose tr/loratadine c/mc given for 2 days\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertFalse(intuitivePromptManager.areArgsAvailable());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    Instruction Retrieval Tests"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public void getInstruction_goBackForAddCommand_correctInstruction() throws Exception {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(AddCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(AddArgumentManager.DOCTOR_ARG_IDENTIFIER);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertEquals(intuitivePromptManager.getInstruction(),"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                String.format(IntuitivePromptManager.INTUITIVE_MODE_MESSAGE, AddCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                        + \"\\n\" + AddArgumentManager.NAME_INSTRUCTION);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.removeArgument();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertEquals(intuitivePromptManager.getInstruction(),"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                String.format(IntuitivePromptManager.INTUITIVE_MODE_MESSAGE, AddCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                        + \"\\n\" + AddArgumentManager.ROLE_INSTRUCTION);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public void getInstruction_goBackForEditCommand_correctInstruction() throws Exception {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(EditCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"2\");"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"1 3\"); //edit name and email"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"Jane Watson\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertEquals(intuitivePromptManager.getInstruction(),"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                String.format(IntuitivePromptManager.INTUITIVE_MODE_MESSAGE, EditCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                        + \"\\n\" + EditArgumentManager.EDIT_EMAIL_INSTRUCTION);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.removeArgument();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertEquals(intuitivePromptManager.getInstruction(),"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                String.format(IntuitivePromptManager.INTUITIVE_MODE_MESSAGE, EditCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                        + \"\\n\" + EditArgumentManager.EDIT_FIELDS_INSTRUCTION);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.removeArgument();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertEquals(intuitivePromptManager.getInstruction(),"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                String.format(IntuitivePromptManager.INTUITIVE_MODE_MESSAGE, EditCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                        + \"\\n\" + EditArgumentManager.EDIT_TARGET_INSTRUCTION);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertFalse(intuitivePromptManager.areArgsAvailable());"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    public void getInstruction_goBackForFindCommand_correctInstruction() throws Exception {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(FindCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"1 2 3 7 10\");"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"ang\");"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"Bob,Charlotte\");"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"S1111222A,S3332222X\");"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.addArgument(\"patient\");"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertEquals(intuitivePromptManager.getInstruction(),"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                String.format(IntuitivePromptManager.INTUITIVE_MODE_MESSAGE, FindCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                        + \"\\n\" + FindArgumentManager.FIND_MEDICAL_RECORD_INSTRUCTION);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        intuitivePromptManager.removeArgument();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertEquals(intuitivePromptManager.getInstruction(),"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                String.format(IntuitivePromptManager.INTUITIVE_MODE_MESSAGE, FindCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "                        + \"\\n\" + FindArgumentManager.FIND_SEARCH_FIELDS_INSTRUCTION);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "        assertFalse(intuitivePromptManager.areArgsAvailable());"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "tristonpang"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "tristonpang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 2,
      "tristonpang": 323,
      "guestuser0123": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GLOBAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import seedu.address.model.person.PersonContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.hasPerson(null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        modelManager.updateFilteredPersonList(new PersonContainsKeywordsPredicate(Map.of(PREFIX_GLOBAL,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                new ArrayList\u003c\u003e(Arrays.asList(keywords)))));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 6,
      "-": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/model/doctor/DoctorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package seedu.address.model.doctor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MEDICAL_DEPARTMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.GEORGE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.testutil.DoctorBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class DoctorTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Doctor doctor \u003d new DoctorBuilder().build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        doctor.getTags().remove(0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(FIONA.isSamePerson(FIONA));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(FIONA.isSamePerson(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // different phone and email -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Doctor editedFiona \u003d new DoctorBuilder(FIONA).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(FIONA.isSamePerson(editedFiona));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // different name -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        editedFiona \u003d new DoctorBuilder(FIONA).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(FIONA.isSamePerson(editedFiona));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // different nric -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        editedFiona \u003d new DoctorBuilder(FIONA).withNric(VALID_NRIC_BOB).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(FIONA.isSamePerson(editedFiona));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        editedFiona \u003d new DoctorBuilder(FIONA).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(FIONA.isSamePerson(editedFiona));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        editedFiona \u003d new DoctorBuilder(FIONA).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(FIONA.isSamePerson(editedFiona));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        editedFiona \u003d new DoctorBuilder(FIONA).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(FIONA.isSamePerson(editedFiona));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // different name, different medical department, same attributes -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        editedFiona \u003d new DoctorBuilder(FIONA).withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                .withMedicalDepartment(VALID_MEDICAL_DEPARTMENT).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(FIONA.isSamePerson(editedFiona));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Doctor fionaCopy \u003d new DoctorBuilder(FIONA).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(FIONA.equals(fionaCopy));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(FIONA.equals(FIONA));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(FIONA.equals(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(FIONA.equals(5));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // different patient -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(FIONA.equals(GEORGE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Doctor editedFiona \u003d new DoctorBuilder(FIONA).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(FIONA.equals(editedFiona));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        editedFiona \u003d new DoctorBuilder(FIONA).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(FIONA.equals(editedFiona));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        editedFiona \u003d new DoctorBuilder(FIONA).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(FIONA.equals(editedFiona));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        editedFiona \u003d new DoctorBuilder(FIONA).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(FIONA.equals(editedFiona));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        editedFiona \u003d new DoctorBuilder(FIONA).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(FIONA.equals(editedFiona));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // different medical department -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        editedFiona \u003d new DoctorBuilder(FIONA).withMedicalDepartment(VALID_MEDICAL_DEPARTMENT).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(FIONA.equals(editedFiona));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 114
    }
  },
  {
    "path": "src/test/java/seedu/address/model/doctor/MedicalDepartmentTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package seedu.address.model.doctor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class MedicalDepartmentTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new MedicalDepartment(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void constructor_invalidMedicalDept_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String invalidMedicalDept \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new MedicalDepartment(invalidMedicalDept));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void isValidMedDept() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // null medical department"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e MedicalDepartment.isValidMedDept(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // invalid department"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(MedicalDepartment.isValidMedDept(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(MedicalDepartment.isValidMedDept(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(MedicalDepartment.isValidMedDept(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(MedicalDepartment.isValidMedDept(\"ophthalmology*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(MedicalDepartment.isValidMedDept(\"123456789\")); // only numeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(MedicalDepartment.isValidMedDept(\"heart123\")); // alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // valid medical department"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(MedicalDepartment.isValidMedDept(\"cardiology\")); // alphabets only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(MedicalDepartment.isValidMedDept(\"anatomy and neurobiology  \")); // contains whitespace"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(MedicalDepartment.isValidMedDept(\"Neurology\")); // with capital letters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(MedicalDepartment.isValidMedDept(\"NEUROLOGY\")); // all capital letters"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(MedicalDepartment.isValidMedDept(\"Pulmonary Diseases and Critical Care Medicine\")); // long dept name"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/MedicalRecordTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "public class MedicalRecordTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        MedicalRecord medicalRecord \u003d new MedicalRecord(\"12.12.2018, Diagnosis: flu, Treatment: tamiflu, Comments: -\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        assertTrue(medicalRecord.equals(medicalRecord));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        MedicalRecord medicalRecordCopy \u003d new MedicalRecord(medicalRecord.value);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        assertTrue(medicalRecord.equals(medicalRecordCopy));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        assertFalse(medicalRecord.equals(1));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        assertFalse(medicalRecord.equals(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        MedicalRecord differentMedicalRecord \u003d new MedicalRecord(\"13.13.2018 , Diagnosis: cough,\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "                + \" Treatment: dextromethorphan, Comments: -\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "        assertFalse(medicalRecord.equals(differentMedicalRecord));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 1,
      "GaryGohYP": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/PatientTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class PatientTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient patient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        patient.getTags().remove(0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // different phone and email -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // different name -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // different nric -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withNric(VALID_NRIC_BOB).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient aliceCopy \u003d new PatientBuilder(ALICE).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // different patient -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 25,
      "-": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/AppointmentTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "public class AppointmentTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Appointment appointment \u003d new Appointment(\"22.11.2018,1300,1400,Jill,S6219609B,Jack,S3869036A\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertTrue(appointment.equals(appointment));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment remarkCopy \u003d new Appointment(appointment.value);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertTrue(appointment.equals(remarkCopy));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertFalse(appointment.equals(1));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertFalse(appointment.equals(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // different remark -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Appointment differentRemark \u003d new Appointment(\"22.11.2018,1300,1400,Alice,S6219609B,Bob,S0654313H\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertFalse(appointment.equals(differentRemark));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void addAndDelete_newAppointment_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ArrayList\u003cAppointment\u003e appointmentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Appointment appt1 \u003d new Appointment(\"22.11.2018\", \"1300\", \"1400\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Alice\", \"S6219609B\", \"Bob\", \"S3869036A\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Appointment appt2 \u003d new Appointment(\"22.11.2018\", \"1300\", \"1400\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Jill\", \"S6219609B\", \"Jack\", \"S0654313H\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Appointment appt3 \u003d new Appointment(\"22.11.2018\", \"1300\", \"1400\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Jill\", \"S6219609B\", \"Jack\", \"S0654313H\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointmentList \u003d AppointmentManager.add(appointmentList, appt1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointmentList \u003d AppointmentManager.add(appointmentList, appt2);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointmentList \u003d AppointmentManager.delete(appointmentList, appt3);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ArrayList\u003cAppointment\u003e secondAppointmentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        secondAppointmentList \u003d AppointmentManager.add(appointmentList, appt1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertTrue(appointmentList.equals(secondAppointmentList));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void isClash_appointmentThatClashesWithCurrentAppointments_failure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ArrayList\u003cAppointment\u003e appointmentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // appointment 4 and 5 have different Doctors"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Appointment appt4 \u003d new Appointment(\"22.11.2018\", \"1300\", \"1400\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Alice\", \"S6219609B\", \"Bob\", \"S3869036A\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Appointment appt5 \u003d new Appointment(\"22.11.2018\", \"1300\", \"1400\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Jill\", \"S6219609B\", \"Jack\", \"S0654313H\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // appointment 6 and 7 have different dates"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Appointment appt6 \u003d new Appointment(\"23.11.2018\", \"1300\", \"1400\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Priscilia\", \"S6219609B\", \"Elaine\", \"S3869036A\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appt7 \u003d new Appointment(\"24.11.2018\", \"1300\", \"1400\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Priscilia\", \"S6219609B\", \"Elaine\", \"S3869036A\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // appointment 8 and 9 have different timings that do not clash"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appt8 \u003d new Appointment(\"22.11.2018\", \"1430\", \"1445\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Priscilia\", \"S6219609B\", \"Elaine\", \"S3869036A\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appt9 \u003d new Appointment(\"22.11.2018\", \"1500\", \"1600\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Priscilia\", \"S6219609B\", \"Elaine\", \"S3869036A\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointmentList \u003d AppointmentManager.add(appointmentList, appt4);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointmentList \u003d AppointmentManager.add(appointmentList, appt6);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointmentList \u003d AppointmentManager.add(appointmentList, appt8);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertTrue(AppointmentManager.isClash(appointmentList, appt5));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertFalse(AppointmentManager.isClash(appointmentList, appt7));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertFalse(AppointmentManager.isClash(appointmentList, appt9));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void isClash_appointmentThatClashesWithCurrentAppointmentsBasedOnTimings_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ArrayList\u003cAppointment\u003e appointmentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Appointment appt8 \u003d new Appointment(\"22.11.2018\", \"1300\", \"1400\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Jeff\", \"S6219609B\", \"Seid\", \"S3869036A\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // Case 1: new appointment\u0027s start time is before current appointment\u0027s start time"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // and new appointment\u0027s end time is after current appointment\u0027s end time"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Appointment appt9 \u003d new Appointment(\"22.11.2018\", \"1200\", \"1500\","
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Jeff\", \"S6219609B\", \"Seid\", \"S3869036A\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // Case 2: new appointment\u0027s start time is after current appointment\u0027s start time"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Appointment appt10 \u003d new Appointment(\"22.11.2018\", \"1330\", \"1400\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Jeff\", \"S6219609B\", \"Seid\", \"S3869036A\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // Case 3: new appointment\u0027s end time is after current appointment\u0027s end time"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Appointment appt11 \u003d new Appointment(\"22.11.2018\", \"1200\", \"1330\","
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Jeff\", \"S6219609B\", \"Seid\", \"S3869036A\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // Case 4: new appointment\u0027s start time is current appointment\u0027s end time"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appt12 \u003d new Appointment(\"22.11.2018\", \"1359\", \"1401\","
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Jeff\", \"S6219609B\", \"Seid\", \"S3869036A\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // Case 5: new appointment\u0027s start and end time are exactly the same as current"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appt13 \u003d new Appointment(\"22.11.2018\", \"1300\", \"1400\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Jeff\", \"S6219609B\", \"Seid\", \"S3869036A\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointmentList \u003d AppointmentManager.add(appointmentList, appt8);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertTrue(AppointmentManager.isClash(appointmentList, appt9));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertTrue(AppointmentManager.isClash(appointmentList, appt10));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertTrue(AppointmentManager.isClash(appointmentList, appt11));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertTrue(AppointmentManager.isClash(appointmentList, appt12));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertTrue(AppointmentManager.isClash(appointmentList, appt13));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void isClash_appointmentThatClashesWithCurrentAppointmentsBasedOnMoreTimings_success() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appt1 \u003d new Appointment(\"22.11.2018\", \"1300\", \"1400\","
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Alice\", \"S6219609B\", \"Bob\", \"S3869036A\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appt2 \u003d new Appointment(\"22.11.2018\", \"1401\", \"1405\","
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Alice\", \"S6219609B\", \"Bob\", \"S3869036A\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appt3 \u003d new Appointment(\"22.11.2018\", \"1300\", \"1330\","
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Alice\", \"S6219609B\", \"Bob\", \"S3869036A\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appt4 \u003d new Appointment(\"22.11.2018\", \"1330\", \"1400\","
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Alice\", \"S6219609B\", \"Bob\", \"S3869036A\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ArrayList\u003cAppointment\u003e appointments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointments.add(appt1);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointments.add(appt2);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointments.add(appt3);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertTrue(AppointmentManager.isClash(appointments, appt4));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void isAnyAppointmentOngoing_appointmentList_failure() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appt1 \u003d new Appointment(\"13.10.2018\", \"1300\", \"1400\","
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Alice\", \"S6219609B\", \"Bob\", \"S3869036A\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appt2 \u003d new Appointment(\"13.10.2018\", \"0600\", \"0700\","
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Alice\", \"S6219609B\", \"Bob\", \"S3869036A\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ArrayList\u003cAppointment\u003e appointments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointments.add(appt1);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointments.add(appt2);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // Those appointments are in all in the past."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertFalse(AppointmentManager.isAnyAppointmentOngoing(appointments));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void removeAppointmentsOfDoctor_nricGiven_success() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appt1 \u003d new Appointment(\"22.11.2018\", \"1300\", \"1400\","
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Alice\", \"S6219609B\", \"Bob\", \"S3869036A\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appt2 \u003d new Appointment(\"22.11.2018\", \"1401\", \"1405\","
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Alice\", \"S6219609B\", \"Bob\", \"S3869036A\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appt3 \u003d new Appointment(\"22.11.2018\", \"1300\", \"1330\","
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Alice\", \"S6219609B\", \"Bob\", \"S3869036A\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appt4 \u003d new Appointment(\"22.11.2018\", \"1330\", \"1400\","
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Alice\", \"S6219609B\", \"Bob\", \"S3869036A\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ArrayList\u003cAppointment\u003e appointments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointments.add(appt1);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointments.add(appt2);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointments.add(appt3);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointments.add(appt4);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ArrayList\u003cAppointment\u003e resultAppointments \u003d"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                AppointmentManager.removeAppointmentsOfDoctor(new Nric(\"S6219609B\"), appointments);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertTrue(resultAppointments.isEmpty());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void removeAppointmentsOfPatient_nricGiven_success() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appt1 \u003d new Appointment(\"22.11.2018\", \"1300\", \"1400\","
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Alice\", \"S6219609B\", \"Bob\", \"S3869036A\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appt2 \u003d new Appointment(\"22.11.2018\", \"1401\", \"1405\","
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Alice\", \"S6219609B\", \"Bob\", \"S3869036A\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appt3 \u003d new Appointment(\"22.11.2018\", \"1300\", \"1330\","
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Alice\", \"S6219609B\", \"Bob\", \"S3869036A\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appt4 \u003d new Appointment(\"22.11.2018\", \"1330\", \"1400\","
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Alice\", \"S6219609B\", \"Bob\", \"S3869036A\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ArrayList\u003cAppointment\u003e appointments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointments.add(appt1);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointments.add(appt2);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointments.add(appt3);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointments.add(appt4);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ArrayList\u003cAppointment\u003e resultAppointments \u003d"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                AppointmentManager.removeAppointmentsOfPatient(new Nric(\"S3869036A\"), appointments);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertTrue(resultAppointments.isEmpty());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void changePatientNameAndNric_oldNameAndoldNricAndNewNameAndNewNric_success() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appt1 \u003d new Appointment(\"22.11.2018\", \"1300\", \"1400\","
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Alice\", \"S6219609B\", \"Bob\", \"S3869036A\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appt2 \u003d new Appointment(\"22.11.2018\", \"1401\", \"1405\","
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Alice\", \"S6219609B\", \"Bob\", \"S3869036A\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appt3 \u003d new Appointment(\"22.11.2018\", \"1300\", \"1330\","
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Alice\", \"S6219609B\", \"Bob\", \"S3869036A\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appt4 \u003d new Appointment(\"22.11.2018\", \"1330\", \"1400\","
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Alice\", \"S6219609B\", \"Bob\", \"S3869036A\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ArrayList\u003cAppointment\u003e appointments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointments.add(appt1);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointments.add(appt2);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointments.add(appt3);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointments.add(appt4);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appt5 \u003d new Appointment(\"22.11.2018\", \"1300\", \"1400\","
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Alice\", \"S6219609B\", \"Elaine\", \"S1065265J\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appt6 \u003d new Appointment(\"22.11.2018\", \"1401\", \"1405\","
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Alice\", \"S6219609B\", \"Elaine\", \"S1065265J\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appt7 \u003d new Appointment(\"22.11.2018\", \"1300\", \"1330\","
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Alice\", \"S6219609B\", \"Elaine\", \"S1065265J\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appt8 \u003d new Appointment(\"22.11.2018\", \"1330\", \"1400\","
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Alice\", \"S6219609B\", \"Elaine\", \"S1065265J\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ArrayList\u003cAppointment\u003e testAppointments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        testAppointments.add(appt5);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        testAppointments.add(appt6);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        testAppointments.add(appt7);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        testAppointments.add(appt8);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ArrayList\u003cAppointment\u003e resultAppointments \u003d"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                AppointmentManager.changePatientNameAndNric(new Name(\"Bob\"), new Nric(\"S3869036A\"),"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                        new Name(\"Elaine\"), new Nric(\"S1065265J\"), appointments);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertTrue(resultAppointments.equals(testAppointments));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void changeDoctorNameAndNric_oldNameAndoldNricAndNewNameAndNewNric_success() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appt1 \u003d new Appointment(\"22.11.2018\", \"1300\", \"1400\","
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Alice\", \"S6219609B\", \"Bob\", \"S3869036A\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appt2 \u003d new Appointment(\"22.11.2018\", \"1401\", \"1405\","
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Alice\", \"S6219609B\", \"Bob\", \"S3869036A\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appt3 \u003d new Appointment(\"22.11.2018\", \"1300\", \"1330\","
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Alice\", \"S6219609B\", \"Bob\", \"S3869036A\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appt4 \u003d new Appointment(\"22.11.2018\", \"1330\", \"1400\","
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Alice\", \"S6219609B\", \"Bob\", \"S3869036A\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ArrayList\u003cAppointment\u003e appointments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointments.add(appt1);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointments.add(appt2);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointments.add(appt3);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointments.add(appt4);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appt5 \u003d new Appointment(\"22.11.2018\", \"1300\", \"1400\","
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Elaine\", \"S1065265J\", \"Bob\", \"S3869036A\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appt6 \u003d new Appointment(\"22.11.2018\", \"1401\", \"1405\","
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Elaine\", \"S1065265J\", \"Bob\", \"S3869036A\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appt7 \u003d new Appointment(\"22.11.2018\", \"1300\", \"1330\","
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Elaine\", \"S1065265J\", \"Bob\", \"S3869036A\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appt8 \u003d new Appointment(\"22.11.2018\", \"1330\", \"1400\","
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                \"Elaine\", \"S1065265J\", \"Bob\", \"S3869036A\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ArrayList\u003cAppointment\u003e testAppointments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        testAppointments.add(appt5);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        testAppointments.add(appt6);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        testAppointments.add(appt7);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        testAppointments.add(appt8);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ArrayList\u003cAppointment\u003e resultAppointments \u003d"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                AppointmentManager.changeDoctorNameAndNric(new Name(\"Alice\"), new Nric(\"S6219609B\"),"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                        new Name(\"Elaine\"), new Nric(\"S1065265J\"), appointments);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertTrue(resultAppointments.equals(testAppointments));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 64,
      "nelvintan": 196
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NricTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class NricTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Nric(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void constructor_invalidNric_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String invalidNric \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Nric(invalidNric));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void isValidNric() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        /* null nric */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Nric.isValidNric(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        /* invalid nric */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e assertFalse(Nric.isValidNric(\"\")));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e assertFalse(Nric.isValidNric(\" \")));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // only non-alphanumericcharacters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e assertFalse(Nric.isValidNric(\"^\")));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e assertFalse(Nric.isValidNric(\"F2435126*\")));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e assertFalse(Nric.isValidNric(\"F243*126L\")));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // does not end with a character"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e assertFalse(Nric.isValidNric(\"F2435126\")));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // does not start with a valid character"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e assertFalse(Nric.isValidNric(\"P2435126L\")));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // does not start with a character"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e assertFalse(Nric.isValidNric(\"2435126L\")));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // more than 7 digits"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e assertFalse(Nric.isValidNric(\"s123456733333J\")));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // less than 7 digits"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e assertFalse(Nric.isValidNric(\"s12J\")));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // more than 2 starting characters"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e assertFalse(Nric.isValidNric(\"FFFFF2435126L\")));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // more than 2 ending characters"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e assertFalse(Nric.isValidNric(\"F2435126LLLLLL\")));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // whitespaces in between nric code"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e assertFalse(Nric.isValidNric(\"F243    5126L\")));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        /* valid nric */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(Nric.isValidNric(\"S2200025Z\")); // all caps"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(Nric.isValidNric(\"s2200025z\")); // no caps"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(Nric.isValidNric(\"s2200025Z\")); // last character in caps"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(Nric.isValidNric(\"S2200025z\")); // first character in caps"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(Nric.isValidNric(\"F2435126L\")); // start with F"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(Nric.isValidNric(\"T3569534B\")); // start with T"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(Nric.isValidNric(\"G6189344Q\")); // start with G"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GLOBAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "public class PersonContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        Map\u003cPrefix, List\u003cString\u003e\u003e firstPredicateKeywordList \u003d Map.of(PREFIX_GLOBAL, Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        Map\u003cPrefix, List\u003cString\u003e\u003e secondPredicateKeywordList \u003d Map.of(PREFIX_GLOBAL, Arrays.asList(\"first\", \"second\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        PersonContainsKeywordsPredicate firstPredicate \u003d new PersonContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        PersonContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                new PersonContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        PersonContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                new PersonContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        PersonContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                new PersonContainsKeywordsPredicate(Map.of(PREFIX_GLOBAL, Collections.singletonList(\"Alice\")));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        predicate \u003d new PersonContainsKeywordsPredicate(Map.of(PREFIX_GLOBAL, Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        predicate \u003d new PersonContainsKeywordsPredicate(Map.of(PREFIX_GLOBAL, Arrays.asList(\"Bob\", \"Carol\")));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        predicate \u003d new PersonContainsKeywordsPredicate(Map.of(PREFIX_GLOBAL, Arrays.asList(\"aLIce\", \"bOB\")));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        PersonContainsKeywordsPredicate predicate \u003d new PersonContainsKeywordsPredicate(Map.of(PREFIX_GLOBAL,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                Collections.emptyList()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        predicate \u003d new PersonContainsKeywordsPredicate(Map.of(PREFIX_GLOBAL, Arrays.asList(\"Carol\")));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        // Search by phone, email and address, but not name"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        predicate \u003d new PersonContainsKeywordsPredicate(Map.of(PREFIX_GLOBAL,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\")));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 22,
      "guestuser0123": 8,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NRIC_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.contains(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Person editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void hasSuchPerson_nullName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        uniquePersonList.hasSuchPerson(null, ALICE.getNric());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void hasSuchPerson_nullNric_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        uniquePersonList.hasSuchPerson(ALICE.getName(), null);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void hasSuchPerson_nullNameAndNric_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        uniquePersonList.hasSuchPerson(null, null);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void hasSuchPerson_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        uniquePersonList.hasSuchPerson(new Name(INVALID_NAME_DESC), AMY.getNric());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void hasSuchPerson_invalidNric_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        uniquePersonList.hasSuchPerson(AMY.getName(), new Nric(INVALID_NRIC_DESC));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void hasSuchPerson_personExists_returnsTrue() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertTrue(uniquePersonList.hasSuchPerson(ALICE.getName(), ALICE.getNric()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void hasSuchPerson_wrongName_returnsFalse() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(uniquePersonList.hasSuchPerson(BOB.getName(), ALICE.getNric()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void hasSuchPerson_wrongNric_returnsFalse() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(uniquePersonList.hasSuchPerson(ALICE.getName(), BOB.getNric()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void hasSuchPerson_wrongNameAndNric_returnsFalse() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertFalse(uniquePersonList.hasSuchPerson(BOB.getName(), BOB.getNric()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(null);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(null, ALICE);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, null);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(PersonNotFoundException.class);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(null);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(PersonNotFoundException.class);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons((UniquePersonList) null);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons((List\u003cPerson\u003e) null);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(listWithDuplicatePersons);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 63,
      "-": 182
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedDoctorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.GEORGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.doctor.MedicalDepartment;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class XmlAdaptedDoctorTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String INVALID_FORMAT_NRIC \u003d \"SJ123324B\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String INVALID_LENGTH_NRIC \u003d \"S1222233322324B\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String INVALID_CODE_NRIC \u003d \"S1234567V\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String VALID_NAME \u003d GEORGE.getName().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String VALID_NRIC \u003d GEORGE.getNric().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String VALID_PHONE \u003d GEORGE.getPhone().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String VALID_EMAIL \u003d GEORGE.getEmail().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String VALID_ADDRESS \u003d GEORGE.getAddress().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String VALID_APPOINTMENT \u003d \"21.11.18,1300,1400,Jack,S7083800A,Pauline,S2932195G\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String VALID_MEDICAL_DEPARTMENT \u003d GEORGE.getMedicalDepartment().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d GEORGE.getTags().stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedDoctor person \u003d new XmlAdaptedDoctor(GEORGE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertEquals(GEORGE, person.toModelType());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedDoctor person \u003d new XmlAdaptedDoctor(INVALID_NAME, VALID_NRIC, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                VALID_ADDRESS, VALID_TAGS, VALID_APPOINTMENT, VALID_MEDICAL_DEPARTMENT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedDoctor person \u003d new XmlAdaptedDoctor(null, VALID_NRIC, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                VALID_TAGS, VALID_APPOINTMENT, VALID_MEDICAL_DEPARTMENT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void toModelType_invalidNricFormat_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedDoctor person \u003d new XmlAdaptedDoctor(VALID_NAME, INVALID_FORMAT_NRIC, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                VALID_ADDRESS, VALID_TAGS, VALID_APPOINTMENT, VALID_MEDICAL_DEPARTMENT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String expectedMessage \u003d Nric.MESSAGE_NRIC_CONSTRAINTS;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void toModelType_invalidNricLength_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedDoctor person \u003d new XmlAdaptedDoctor(VALID_NAME, INVALID_LENGTH_NRIC, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                VALID_ADDRESS, VALID_TAGS, VALID_APPOINTMENT, VALID_MEDICAL_DEPARTMENT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String expectedMessage \u003d Nric.MESSAGE_NRIC_INVALID_LENGTH;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void toModelType_invalidNricCode_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedDoctor person \u003d new XmlAdaptedDoctor(VALID_NAME, INVALID_CODE_NRIC, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                VALID_ADDRESS, VALID_TAGS, VALID_APPOINTMENT, VALID_MEDICAL_DEPARTMENT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String expectedMessage \u003d Nric.MESSAGE_NRIC_INVALID;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void toModelType_nullNric_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedDoctor person \u003d new XmlAdaptedDoctor(VALID_NAME, null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                VALID_TAGS, VALID_APPOINTMENT, VALID_MEDICAL_DEPARTMENT);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedDoctor person \u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new XmlAdaptedDoctor(VALID_NAME, VALID_NRIC, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                        VALID_TAGS, VALID_APPOINTMENT, VALID_MEDICAL_DEPARTMENT);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedDoctor person \u003d new XmlAdaptedDoctor(VALID_NAME, VALID_NRIC, null, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                VALID_TAGS, VALID_APPOINTMENT, VALID_MEDICAL_DEPARTMENT);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedDoctor person \u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new XmlAdaptedDoctor(VALID_NAME, VALID_NRIC, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                        VALID_TAGS, VALID_APPOINTMENT, VALID_MEDICAL_DEPARTMENT);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedDoctor person \u003d new XmlAdaptedDoctor(VALID_NAME, VALID_NRIC, VALID_PHONE, null, VALID_ADDRESS,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                VALID_TAGS, VALID_APPOINTMENT, VALID_MEDICAL_DEPARTMENT);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedDoctor person \u003d"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new XmlAdaptedDoctor(VALID_NAME, VALID_NRIC, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                        VALID_TAGS, VALID_APPOINTMENT, VALID_MEDICAL_DEPARTMENT);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedDoctor person \u003d new XmlAdaptedDoctor(VALID_NAME, VALID_NRIC, VALID_PHONE, VALID_EMAIL, null,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                VALID_TAGS, VALID_APPOINTMENT, VALID_MEDICAL_DEPARTMENT);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedDoctor person \u003d new XmlAdaptedDoctor(VALID_NAME, VALID_NRIC, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                invalidTags, VALID_APPOINTMENT, VALID_MEDICAL_DEPARTMENT);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void toModelType_nullAppointment_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedDoctor person \u003d new XmlAdaptedDoctor(VALID_NAME, VALID_NRIC, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                VALID_TAGS, null, VALID_MEDICAL_DEPARTMENT);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Appointment.class.getSimpleName());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void toModelType_nullMedicalDepartment_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedDoctor person \u003d new XmlAdaptedDoctor(VALID_NAME, VALID_NRIC, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                VALID_TAGS, VALID_APPOINTMENT, null);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, MedicalDepartment.class.getSimpleName());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 173
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedPatientTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class XmlAdaptedPatientTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String INVALID_FORMAT_NRIC \u003d \"SJ123324B\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String INVALID_LENGTH_NRIC \u003d \"S1222233322324B\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String INVALID_CODE_NRIC \u003d \"S1234567V\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String VALID_NRIC \u003d BENSON.getNric().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final String VALID_APPOINTMENT \u003d \"21.11.18,1300,1400,Jack,S2932195G,Pauline,S1740595J\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "    private static final String VALID_MEDICAL_RECORD \u003d BENSON.getMedicalRecord().toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedPatient person \u003d new XmlAdaptedPatient(BENSON);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedPatient person \u003d new XmlAdaptedPatient(INVALID_NAME, VALID_NRIC, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                VALID_ADDRESS, VALID_MEDICAL_RECORD, VALID_TAGS, VALID_APPOINTMENT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedPatient person \u003d new XmlAdaptedPatient(null, VALID_NRIC, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                VALID_MEDICAL_RECORD, VALID_TAGS, VALID_APPOINTMENT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void toModelType_invalidNricFormat_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedPatient person \u003d new XmlAdaptedPatient(VALID_NAME, INVALID_FORMAT_NRIC, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                VALID_ADDRESS, VALID_MEDICAL_RECORD, VALID_TAGS, VALID_APPOINTMENT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String expectedMessage \u003d Nric.MESSAGE_NRIC_CONSTRAINTS;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void toModelType_invalidNricLength_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedPatient person \u003d new XmlAdaptedPatient(VALID_NAME, INVALID_LENGTH_NRIC, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                VALID_ADDRESS, VALID_MEDICAL_RECORD, VALID_TAGS, VALID_APPOINTMENT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String expectedMessage \u003d Nric.MESSAGE_NRIC_INVALID_LENGTH;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void toModelType_invalidNricCode_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedPatient person \u003d new XmlAdaptedPatient(VALID_NAME, INVALID_CODE_NRIC, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                VALID_ADDRESS, VALID_MEDICAL_RECORD, VALID_TAGS, VALID_APPOINTMENT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String expectedMessage \u003d Nric.MESSAGE_NRIC_INVALID;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void toModelType_nullNric_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedPatient person \u003d new XmlAdaptedPatient(VALID_NAME, null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                VALID_MEDICAL_RECORD, VALID_TAGS, VALID_APPOINTMENT);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedPatient person \u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new XmlAdaptedPatient(VALID_NAME, VALID_NRIC, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                        VALID_MEDICAL_RECORD, VALID_TAGS, VALID_APPOINTMENT);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedPatient person \u003d new XmlAdaptedPatient(VALID_NAME, VALID_NRIC, null, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                VALID_MEDICAL_RECORD, VALID_TAGS, VALID_APPOINTMENT);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedPatient person \u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new XmlAdaptedPatient(VALID_NAME, VALID_NRIC, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                        VALID_MEDICAL_RECORD, VALID_TAGS, VALID_APPOINTMENT);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedPatient person \u003d new XmlAdaptedPatient(VALID_NAME, VALID_NRIC, VALID_PHONE, null, VALID_ADDRESS,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                VALID_MEDICAL_RECORD, VALID_TAGS, VALID_APPOINTMENT);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedPatient person \u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                new XmlAdaptedPatient(VALID_NAME, VALID_NRIC, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                        VALID_MEDICAL_RECORD, VALID_TAGS, VALID_APPOINTMENT);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedPatient person \u003d new XmlAdaptedPatient(VALID_NAME, VALID_NRIC, VALID_PHONE, VALID_EMAIL, null,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                VALID_MEDICAL_RECORD, VALID_TAGS, VALID_APPOINTMENT);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedPatient person \u003d new XmlAdaptedPatient(VALID_NAME, VALID_NRIC, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                VALID_ADDRESS, VALID_MEDICAL_RECORD, invalidTags, VALID_APPOINTMENT);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void toModelType_nullAppointment_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        XmlAdaptedPatient person \u003d new XmlAdaptedPatient(VALID_NAME, VALID_NRIC, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                VALID_ADDRESS, VALID_MEDICAL_RECORD, VALID_TAGS, null);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Appointment.class.getSimpleName());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 82,
      "GaryGohYP": 1,
      "-": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlSerializableAddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlSerializableAddressBookTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.xml\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.xml\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.xml\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(XmlSerializableAddressBook.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 1,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/DoctorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.doctor.MedicalDepartment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * A utility class to help with building Doctor objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class DoctorBuilder extends PersonBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String DEFAULT_MEDICAL_DEPARTMENT \u003d \"Cardiology\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private MedicalDepartment medicalDepartment;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public DoctorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        medicalDepartment \u003d new MedicalDepartment(DEFAULT_MEDICAL_DEPARTMENT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Initializes the PatientBuilder with the data of {@code patientToCopy}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public DoctorBuilder(Doctor doctorToCopy) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        super(doctorToCopy);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        medicalDepartment \u003d doctorToCopy.getMedicalDepartment();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Sets the {@code MedicalDepartment} of the {@code Doctor} that we are building."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public DoctorBuilder withMedicalDepartment(String medicalDepartment) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.medicalDepartment \u003d new MedicalDepartment(medicalDepartment);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public DoctorBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public DoctorBuilder withNric(String nric) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.nric \u003d new Nric(nric);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public DoctorBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public DoctorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public DoctorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public DoctorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public DoctorBuilder withAppointment(String appointment) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.appointment \u003d new Appointment(appointment);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointmentList \u003d SampleDataUtil.getAppointmentsList(appointment);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public DoctorBuilder withAppointments(String ... appointments) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        appointmentList \u003d SampleDataUtil.getAppointmentsList(appointments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public Doctor build() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (appointmentList !\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return new Doctor(name, nric, phone, email, address, tags, appointmentList, medicalDepartment);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return new Doctor(name, nric, phone, email, address, tags, medicalDepartment);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 96,
      "nelvintan": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/DoctorUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL_DEPARTMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * A utility class for Doctor."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class DoctorUtil extends PersonUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static String getAddCommand(Doctor source) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + PREFIX_ROLE + \"Doctor \" + getDoctorDetails(source);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Returns the part of command string for the given {@code doctor}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static String getDoctorDetails(Doctor doctor) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        sb.append(PREFIX_NAME + doctor.getName().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        sb.append(PREFIX_NRIC + doctor.getNric().code + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        sb.append(PREFIX_PHONE + doctor.getPhone().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        sb.append(PREFIX_EMAIL + doctor.getEmail().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        sb.append(PREFIX_ADDRESS + doctor.getAddress().value + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        doctor.getTags().stream().forEach(s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        sb.append(PREFIX_MEDICAL_DEPARTMENT + doctor.getMedicalDepartment().deptName + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Returns the part of command string that belongs to only {@code doctor}\u0027s details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static String getEditDoctorDescriptorDetails(EditCommand.EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        sb.append(PREFIX_ROLE).append(\"Doctor \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        descriptor.getNric().ifPresent(nric -\u003e sb.append(PREFIX_NRIC).append(nric.code).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        descriptor.getMedicalDepartment().ifPresent(medicalDepartment -\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                sb.append(PREFIX_MEDICAL_DEPARTMENT).append(medicalDepartment.deptName).append(\" \"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (person instanceof Patient) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            descriptor.setNric(((Patient) person).getNric());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            assert person instanceof Doctor;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            descriptor.setMedicalDepartment(((Doctor) person).getMedicalDepartment());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 9,
      "-": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PatientBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.MedicalRecord;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * A utility class to help with building Patient objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class PatientBuilder extends PersonBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String DEFAULT_MEDICAL_RECORD \u003d \", Diagnosis: , Treatment: , Comments: -\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private MedicalRecord medicalRecord;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public PatientBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        medicalRecord \u003d new MedicalRecord(DEFAULT_MEDICAL_RECORD);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Initializes the PatientBuilder with the data of {@code patientToCopy}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public PatientBuilder(Patient patientToCopy) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        super(patientToCopy);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        medicalRecord \u003d patientToCopy.getMedicalRecord();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public PatientBuilder withName(String name) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public PatientBuilder withNric(String nric) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.nric \u003d new Nric(nric);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public PatientBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public PatientBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public PatientBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public PatientBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public PatientBuilder withAppointment(String appointment) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.appointment \u003d new Appointment(appointment);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointmentList \u003d SampleDataUtil.getAppointmentsList(appointment);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public PatientBuilder withAppointments(String ... appointments) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        appointmentList \u003d SampleDataUtil.getAppointmentsList(appointments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Sets the {@code MedicalRecord} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public PatientBuilder withMedicalRecord(String medicalRecord) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.medicalRecord \u003d new MedicalRecord(medicalRecord);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public Patient build() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (appointmentList !\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return new Patient(name, nric, phone, email, address, tags, appointmentList, medicalRecord);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return new Patient(name, nric, phone, email, address, tags, medicalRecord);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 94,
      "nelvintan": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PatientUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " * A utility class for Patient."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class PatientUtil extends PersonUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static String getAddCommand(Patient source) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + PREFIX_ROLE + \"Patient \" + getPatientDetails(source);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Returns the part of command string that belongs to only {@code patient}\u0027s details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static String getPatientDetails(Patient source) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        sb.append(PREFIX_NAME + source.getName().fullName + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        sb.append(PREFIX_PHONE + source.getPhone().value + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        sb.append(PREFIX_EMAIL + source.getEmail().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        sb.append(PREFIX_ADDRESS + source.getAddress().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        source.getTags().stream().forEach(s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        sb.append(PREFIX_NRIC + source.getNric().code + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static String getEditPatientDescriptorDetails(EditCommand.EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        descriptor.getNric().ifPresent(nric -\u003e sb.append(\" \").append(PREFIX_NRIC).append(nric.code).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String DEFAULT_NRIC \u003d \"S3012276C\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final String DEFAULT_APPOINTMENT \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    protected Name name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    protected Nric nric;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    protected Phone phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    protected Email email;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    protected Address address;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    protected Appointment appointment;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    protected ArrayList\u003cAppointment\u003e appointmentList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    protected Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        nric \u003d new Nric(DEFAULT_NRIC);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointment \u003d new Appointment(DEFAULT_APPOINTMENT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        nric \u003d personToCopy.getNric();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointment \u003d personToCopy.getAppointment();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointmentList \u003d personToCopy.getAppointmentList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * Sets the {@code Nric} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public PersonBuilder withNric(String nric) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        this.nric \u003d new Nric(nric);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Sets the {@code Appointment} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public PersonBuilder withAppointment(String appointment) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.appointment \u003d new Appointment(appointment);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointmentList \u003d SampleDataUtil.getAppointmentsList(appointment);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Sets the {@code Appointment} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public PersonBuilder withAppointments(String ... appointments) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointmentList \u003d SampleDataUtil.getAppointmentsList(appointments);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @return a new Person with the relevant details."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (appointmentList !\u003d null) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return new Person(name, nric, phone, email, address, tags, appointmentList);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return new Person(name, nric, phone, email, address, tags);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 23,
      "-": 86,
      "nelvintan": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        person.getTags().stream().forEach(s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 1,
      "-": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final Index INDEX_FIFTH_PERSON \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    // Set all Persons with empty appointments instead of actual Appointments"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final Patient ALICE \u003d new PatientBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            .withPhone(\"94351253\").withMedicalRecord(\", Diagnosis: , Treatment: , Comments: -\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            .withNric(\"S3305985Z\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final Patient BENSON \u003d new PatientBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\").withNric(\"S1215130F\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            .withMedicalRecord(\", Diagnosis: , Treatment: , Comments: -\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final Patient CARL \u003d new PatientBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            .withMedicalRecord(\", Diagnosis: , Treatment: , Comments: -\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            .withEmail(\"heinz@example.com\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            .withAddress(\"wall street\").withNric(\"S7426958C\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final Patient DANIEL \u003d new PatientBuilder().withName(\"Daniel Meier\").withPhone(\"87652599\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            .withMedicalRecord(\", Diagnosis: , Treatment: , Comments: -\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            .withEmail(\"cornelia@example.com\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            .withAddress(\"10th street\").withNric(\"S8066331E\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final Doctor ELLE \u003d new DoctorBuilder().withName(\"Elle Meyer\").withNric(\"S6977714G\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            .withPhone(\"9482224\").withMedicalDepartment(\"Oncology\").withEmail(\"werner@example.com\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            .withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final Doctor FIONA \u003d new DoctorBuilder().withName(\"Fiona Kunz\").withNric(\"S5319783C\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            .withPhone(\"9482427\").withMedicalDepartment(\"Cardiology\").withEmail(\"lydia@example.com\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            .withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final Doctor GEORGE \u003d new DoctorBuilder().withName(\"George Best\").withNric(\"S5882198E\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            .withPhone(\"9482442\").withMedicalDepartment(\"Neurology\").withEmail(\"anna@example.com\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            .withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final Patient HOON \u003d new PatientBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            .withNric(\"S9028878D\").withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final Doctor IDA \u003d new DoctorBuilder().withName(\"Ida Mueller\").withNric(\"S5026428I\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            .withPhone(\"8482131\").withMedicalDepartment(\"Physiology\").withEmail(\"hans@example.com\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            .withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final Patient AMY \u003d new PatientBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withNric(VALID_NRIC_AMY)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public static final Patient BOB \u003d new PatientBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withNric(VALID_NRIC_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 37,
      "-": 52,
      "nelvintan": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/PersonCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient personWithNoTags \u003d new PatientBuilder().withTags(new String[0]).build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard personCard \u003d new PersonCard(personWithNoTags, 1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personCard);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardDisplay(personCard, personWithNoTags, 1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Person personWithTags \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        personCard \u003d new PersonCard(personWithTags, 2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personCard);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardDisplay(personCard, personWithTags, 2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Person person \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard personCard \u003d new PersonCard(person, 0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // same person, same index -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard copy \u003d new PersonCard(person, 0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(personCard.equals(copy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(personCard.equals(personCard));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(personCard.equals(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(personCard.equals(0));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person, same index -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Person differentPerson \u003d new PatientBuilder().withName(\"differentName\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(personCard.equals(new PersonCard(differentPerson, 0)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // same person, different index -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(personCard.equals(new PersonCard(person, 1)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code personCard} displays the details of {@code expectedPerson} correctly and matches"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCardDisplay(PersonCard personCard, Person expectedPerson, int expectedId) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle personCardHandle \u003d new PersonCardHandle(personCard.getRoot());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", personCardHandle.getId());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify person details are displayed correctly"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardDisplaysPerson(expectedPerson, personCardHandle);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 6,
      "-": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/PersonListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final ObservableList\u003cPerson\u003e TYPICAL_PERSONS \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.observableList(getTypicalPersons());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    private static final int TEST_IC_NUMBER \u003d 1000000;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanelHandle personListPanelHandle;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_PERSONS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_PERSONS.size(); i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanelHandle.navigateToCard(TYPICAL_PERSONS.get(i));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            Person expectedPerson \u003d TYPICAL_PERSONS.get(i);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            PersonCardHandle actualCard \u003d personListPanelHandle.getPersonCardHandle(i);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(expectedPerson, actualCard);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleJumpToListRequestEvent() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_PERSONS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(JUMP_TO_SECOND_EVENT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle expectedPerson \u003d personListPanelHandle.getPersonCardHandle(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle selectedPerson \u003d personListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardEquals(expectedPerson, selectedPerson);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifies that creating and deleting large number of persons in {@code PersonListPanel} requires lesser than"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void performanceTest() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cPerson\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }, \"Creation and deletion of person cards exceeded time limit\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a list of persons containing {@code personCount} persons that is used to populate the"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code PersonListPanel}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private ObservableList\u003cPerson\u003e createBackingList(int personCount) throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Path xmlFile \u003d createXmlFileWithPersons(personCount);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook xmlAddressBook \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlUtil.getDataFromFile(xmlFile, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.observableArrayList(xmlAddressBook.toModelType().getPersonList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a .xml file containing {@code personCount} persons. This file will be deleted when the JVM terminates."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path createXmlFileWithPersons(int personCount) throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        int icNum \u003d TEST_IC_NUMBER;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003c?xml version\u003d\\\"1.0\\\" encoding\u003d\\\"UTF-8\\\" standalone\u003d\\\"yes\\\"?\u003e\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003caddressbook\u003e\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c personCount; i++) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cpersons\u003e\\n\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            builder.append(\"\u003crole\u003ePatient\u003c/role\u003e\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cname\u003e\").append(i).append(\"a\u003c/name\u003e\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cphone\u003e000\u003c/phone\u003e\\n\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cemail\u003ea@aa\u003c/email\u003e\\n\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003caddress\u003ea\u003c/address\u003e\\n\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            builder.append(\"\u003cnric\u003eS\").append(Nric.generateCode(icNum++)).append(\"\u003c/nric\u003e\\n\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": "            builder.append(\"\u003cmedicalRecord\u003e , Diagnosis: , Treatment: , Comments: -\u003c/medicalRecord\u003e\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            builder.append(\"\u003cappointment\u003ea\u003c/appointment\u003e\\n\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003c/persons\u003e\\n\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003c/addressbook\u003e\\n\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        Path manyPersonsFile \u003d TEST_DATA_FOLDER.resolve(\"manyPersons.xml\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(manyPersonsFile);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(manyPersonsFile, builder.toString());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        manyPersonsFile.toFile().deleteOnExit();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return manyPersonsFile;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes {@code personListPanelHandle} with a {@code PersonListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code PersonListPanel}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initUi(ObservableList\u003cPerson\u003e backingList) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonListPanel personListPanel \u003d new PersonListPanel(backingList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personListPanel);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelHandle \u003d new PersonListPanelHandle(getChildNode(personListPanel.getRoot(),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                PersonListPanelHandle.PERSON_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 1,
      "guestuser0123": 8,
      "GaryGohYP": 1,
      "-": 123
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertEquals(expectedCard.getNric(), actualCard.getNric());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertEquals(expectedCard.getRole(), actualCard.getRole());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertEquals(expectedPerson.getClass().getSimpleName(), actualCard.getRole());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertEquals(expectedPerson.getNric().code, actualCard.getNric());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                actualCard.getTags());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.length; i++) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        int numberOfPeople \u003d personListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 4,
      "-": 72
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MEDICAL_DEPARTMENT_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NRIC_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ROLE_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ROLE_DOCTOR_DESC;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ROLE_PATIENT_DESC;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.doctor.MedicalDepartment;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.person.Role;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.testutil.DoctorUtil;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.testutil.PatientUtil;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class AddCommandSystemTest extends systemtests.AddressBookSystemTest {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient toAdd \u003d AMY;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + ROLE_PATIENT_DESC + \"  \" + NAME_DESC_AMY + \"  \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + PHONE_DESC_AMY + \"  \" + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + TAG_DESC_FRIEND + \"  \" + NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except nric -\u003e added */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        toAdd \u003d new PatientBuilder(AMY).withNric(VALID_NRIC_BOB).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + ROLE_PATIENT_DESC + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND + NRIC_DESC_BOB;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + ROLE_PATIENT_DESC + TAG_DESC_FRIEND + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + ADDRESS_DESC_BOB + NAME_DESC_BOB + TAG_DESC_HUSBAND + EMAIL_DESC_BOB + NRIC_DESC_BOB;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person, missing tags -\u003e added */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before adding -\u003e added */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        // assertCommandSuccess(CARL);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person -\u003e rejected */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d PatientUtil.getAddCommand(HOON);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        toAdd \u003d new PatientBuilder(HOON).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d PatientUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different email -\u003e rejected */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        toAdd \u003d new PatientBuilder(HOON).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d PatientUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different address -\u003e rejected */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        toAdd \u003d new PatientBuilder(HOON).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d PatientUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d PatientUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        /* Case: missing role -\u003e rejected */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + ADDRESS_DESC_AMY + NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_GENERAL_USAGE));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + ROLE_PATIENT_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + ADDRESS_DESC_AMY + NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_GENERAL_USAGE));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing phone -\u003e rejected */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + ROLE_PATIENT_DESC + NAME_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + ADDRESS_DESC_AMY + NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_GENERAL_USAGE));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing email -\u003e rejected */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + ROLE_PATIENT_DESC + NAME_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + ADDRESS_DESC_AMY + NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_GENERAL_USAGE));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing address -\u003e rejected */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + ROLE_PATIENT_DESC + NAME_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + EMAIL_DESC_AMY + NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_GENERAL_USAGE));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d \"adds \" + PatientUtil.getPersonDetails(toAdd);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        /* Case: invalid role -\u003e rejected */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_ROLE_DESC + NAME_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertCommandFailure(command, Role.MESSAGE_ROLE_CONSTRAINTS);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + ROLE_PATIENT_DESC + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + ADDRESS_DESC_AMY + NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + ROLE_PATIENT_DESC + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + ADDRESS_DESC_AMY + NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + ROLE_PATIENT_DESC + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + ADDRESS_DESC_AMY + NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + ROLE_PATIENT_DESC + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + INVALID_ADDRESS_DESC + NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + ROLE_PATIENT_DESC + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + ADDRESS_DESC_AMY + INVALID_TAG_DESC + NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        /* Case: invalid nric -\u003e rejected */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + ROLE_PATIENT_DESC + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND + INVALID_NRIC_DESC;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertCommandFailure(command, Nric.MESSAGE_NRIC_CONSTRAINTS);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        /* Case: invalid medical department -\u003e rejected */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + ROLE_DOCTOR_DESC + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + ADDRESS_DESC_AMY + INVALID_MEDICAL_DEPARTMENT_DESC + NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertCommandFailure(command, MedicalDepartment.MESSAGE_DEPTNAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Person toAdd) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        if (toAdd instanceof Patient) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            assertCommandSuccess(PatientUtil.getAddCommand((Patient) toAdd), toAdd);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            assert toAdd instanceof Doctor;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "            assertCommandSuccess(DoctorUtil.getAddCommand((Doctor) toAdd), toAdd);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Person)"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Person toAdd) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(toAdd);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 85,
      "-": 202
    }
  },
  {
    "path": "src/test/java/systemtests/AddressBookSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "// import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "// import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import guitests.guihandles.PersonProfilePageHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "// import seedu.address.MainApp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "// import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class AddressBookSystemTest {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        //waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getPersonListPanel();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public PersonProfilePageHandle getPersonProfilePage() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        return mainWindowHandle.getPersonProfilePage();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    //    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    //        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        //waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons in the address book."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showAllPersons() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showPersonsWithName(String keyword) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the person at {@code index} of the displayed list."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void selectPerson(Index index) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes all persons in the address book."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void deleteAllPersons() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same person objects as {@code expectedModel}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the person list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(expectedModel.getAddressBook()), testApp.readStorageAddressBook());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        //getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().rememberSelectedPersonCard();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * of the previously selected person."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        //assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().navigateToCard(getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        //        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        //        URL expectedUrl;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        //        try {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        //            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        //        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        //            throw new AssertionError(\"URL expected to be valid.\", mue);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        //        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        //assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        //assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 30,
      "-": 267
    }
  },
  {
    "path": "src/test/java/systemtests/ClearallCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.logic.commands.ClearallCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "public class ClearallCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    public void reset() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearallCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo clearing address book -\u003e original address book restored */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo clearing address book -\u003e cleared */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in person list and clears address book -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertCommandSuccess(ClearallCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before clearing -\u003e entire address book cleared */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertCommandSuccess(ClearallCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear empty address book -\u003e cleared */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertCommandSuccess(ClearallCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertCommandSuccess(command, ClearallCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "     * @see ClearallCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 11,
      "-": 92
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import seedu.address.testutil.PatientUtil;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + \"  \" + NAME_DESC_BOB + \"  \" + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + \"  \" + TAG_DESC_HUSBAND + \"  \" + NRIC_DESC_BOB + \"  \";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        Patient editedPerson \u003d new PatientBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo editing the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo editing the last person in the list -\u003e last person edited again */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updatePerson("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different name -\u003e rejected */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(getModel().getFilteredPersonList().get(index.getZeroBased()), BOB);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + NRIC_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different phone and email"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + PHONE_DESC_AMY + EMAIL_DESC_AMY + NRIC_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        editedPerson \u003d new PatientBuilder((Patient) personToEdit).withTags().build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        editedPerson \u003d new PatientBuilder((Patient) personToEdit).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(index);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + TAG_DESC_FRIEND + NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // browser\u0027s url is updated to reflect the new person\u0027s name"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        //assertCommandSuccess(command, index, AMY);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        executeCommand(PatientUtil.getAddCommand(BOB));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + NRIC_DESC_BOB"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + NRIC_DESC_BOB"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different address -\u003e rejected */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + NRIC_DESC_BOB"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + NRIC_DESC_BOB"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + PHONE_DESC_AMY + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different email -\u003e rejected */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + NRIC_DESC_BOB"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_AMY + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedPerson, null);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * updated to values specified {@code editedPerson}.\u003cbr\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 51,
      "-": 251
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: repeat previous find command where person list is displaying the persons we are finding"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getModel().getAddressBook().getPersonList().contains(BENSON));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        /* Case: find person in address book, keyword is substring of name -\u003e 1 persons found */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person not in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        /* Case: find phone number of person in address book -\u003e 1 persons found */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_PHONE + DANIEL.getPhone().value;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        /* Case: find address of person in address book -\u003e 1 persons found */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_ADDRESS + DANIEL.getAddress().value;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        /* Case: find email of person in address book -\u003e 1 persons found */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_EMAIL + DANIEL.getEmail().value;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        /* Case: find tags of person in address book -\u003e 3 persons found */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_TAG + tags.get(0).tagName;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, ALICE, BENSON, DANIEL);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find while a person is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in empty address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"FiNd Meier\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 10,
      "guestuser0123": 9,
      "-": 185
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().click();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        getPersonProfilePage().click();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    //private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    //    assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "guestuser0123"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "guestuser0123": 5,
      "-": 99
    }
  }
]
