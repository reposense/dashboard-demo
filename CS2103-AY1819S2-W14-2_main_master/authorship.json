[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003d FomoFoto"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": "https://travis-ci.org/CS2103-AY1819S2-W14-2/main[image:https://travis-ci.org/CS2103-AY1819S2-W14-2/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S2-W14-2/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103-AY1819S2-W14-2/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "https://ci.appveyor.com/project/thamsimun/main/branch/master[image:https://ci.appveyor.com/api/projects/status/gqnt5vfqykgas3uk/branch/master?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kayheen"
        },
        "content": "image:https://api.codacy.com/project/badge/Grade/d5cb9981b3d9431ba79c175e32875a1e[\"Codacy code quality\", link\u003d\"https://www.codacy.com/app/kayheen/main?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dCS2103-AY1819S2-W14-2/main\u0026utm_campaign\u003dBadge_Grade\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kayheen"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "FomoFoto is a Java based, command line photo editor."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": "* Command-line editor with minimal GUI."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": "* Large filter and photo manipulation tool-sets."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "* Import and export in large variety of photos."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "* Support for layers and history."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrein"
        },
        "content": "* The original source of the AddressBook project was created by the https://github.com/se-edu/[SE-EDU] initiative."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "kayheen": 2,
      "carrein": 12,
      "-": 26,
      "thamsimun": 1
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "carrein"
        },
        "content": "    compile group: \u0027com.drewnoakes\u0027, name: \u0027metadata-extractor\u0027, version: \u00272.6.2\u0027"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "carrein"
        },
        "content": "    compile group: \u0027org.apache.commons\u0027, name: \u0027commons-io\u0027, version: \u00271.3.2\u0027"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    compile group: \u0027net.imagej\u0027, name: \u0027ij\u0027, version: \u00271.52k\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    // https://mvnrepository.com/artifact/org.imgscalr/imgscalr-lib"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    compile group: \u0027org.imgscalr\u0027, name: \u0027imgscalr-lib\u0027, version: \u00274.2\u0027"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    // https://mvnrepository.com/artifact/com.sksamuel.scrimage/scrimage-core"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    compile group: \u0027com.sksamuel.scrimage\u0027, name: \u0027scrimage-core_2.12\u0027, version: \u00273.0.0-alpha4\u0027"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    // https://mvnrepository.com/artifact/com.sksamuel.scrimage/scrimage-filters"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    compile group: \u0027com.sksamuel.scrimage\u0027, name: \u0027scrimage-filters_2.12\u0027, version: \u00273.0.0-alpha4\u0027"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "carrein"
        },
        "content": "    compile \u0027com.google.guava:guava:27.1-jre\u0027"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "carrein"
        },
        "content": "        \u0027site-name\u0027: \u0027FomoFoto\u0027,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "carrein"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://cs2103-ay1819s2-w14-2.github.io/main/\u0027,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "kayheen": 3,
      "carrein": 5,
      "-": 233,
      "thamsimun": 4
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "FomoFoto was developed by CS2103-AY1819S2-W14-2 +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kayheen"
        },
        "content": "\u003d\u003d\u003d Ho Boon Wee Addison"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kayheen"
        },
        "content": "image::carrein.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kayheen"
        },
        "content": "{empty}[https://github.com/Carrein[github]] [\u003c\u003ccarrein#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "*Role:* +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Team Lead +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "*Responsibilities:* +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "User Interface and Model Design"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kayheen"
        },
        "content": "\u003d\u003d\u003d Tan Qun Wei Randy"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kayheen"
        },
        "content": "image::randytqw.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kayheen"
        },
        "content": "{empty}[https://github.com/randytqw[github]] [\u003c\u003crandytqw#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "*Role:* +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Developer +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*Responsibilities:* +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Integration, Image State Management (Undo, Redo)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kayheen"
        },
        "content": "\u003d\u003d\u003d Tay Zhan Peng"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kayheen"
        },
        "content": "image::itszp.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kayheen"
        },
        "content": "{empty}[https://github.com/itszp[github]] [\u003c\u003citszp#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*Role:* +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "Developer +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "*Responsibilities:* +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Code Quality, Image and Directory Navigation (Open, Save, ListFiles)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kayheen"
        },
        "content": "\u003d\u003d\u003d Tham Si Mun"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kayheen"
        },
        "content": "image::thamsimun.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kayheen"
        },
        "content": "{empty}[https://github.com/thamsimun[github]] [\u003c\u003cthamsimun#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "*Role:* +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Developer +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "*Responsibilities:* +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Testing, Image Filters, Preset Image Editing"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kayheen"
        },
        "content": "\u003d\u003d\u003d Chong Kay Heen"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kayheen"
        },
        "content": "image::kayheen.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kayheen"
        },
        "content": "{empty}[https://github.com/kayheen[github]] [\u003c\u003ckayheen#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "*Role:* +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "Developer +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "*Responsibilities:* +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Documentation, Image Manipulation"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "kayheen": 15,
      "-": 49,
      "thamsimun": 1
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kayheen"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2103-AY1819S2-W14-2/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* *Email us* : You can also reach us at `kayheen@u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "kayheen": 1,
      "-": 6
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d FomoFoto - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itszp"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S2-W14-2/main/tree/master"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "By: `W14-2`      Since: `Feb 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": "IntelliJ by default has Gradle and JavaFX plugins installed. +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrein"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialogue first)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "carrein"
        },
        "content": "This will generate all the resources required by the application and tests."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "carrein"
        },
        "content": ". Repeat this for the test directory as well (e.g. check link:{repoURL}/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kayheen"
        },
        "content": "// tag::Architecture[]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kayheen"
        },
        "content": "image::Architecture.png[width\u003d\"763\", height\u003d\"339\"]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "carrein"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] directory. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kayheen"
        },
        "content": "* \u003c\u003cDesign-Model, *`Model`*\u003e\u003e: Holds the data of images in the App in memory."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "carrein"
        },
        "content": "Each of the first three components does the following:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "The `Model` component consists of three components:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kayheen"
        },
        "content": "*  `Album` which stores the pool of images that has been imported into the App."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kayheen"
        },
        "content": "*  `CurrentEdit` which holds the image that the App is currently editing in-memory."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "*  `TransformationSet` which stores the preset commands created by the user to edit the image."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kayheen"
        },
        "content": "// end::Architecture[]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kayheen"
        },
        "content": "\u003d\u003d\u003d\u003d How the Architecture Components Interact with Each Other"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kayheen"
        },
        "content": "// tag::ArchiInteraction[]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kayheen"
        },
        "content": "The _Sequence Diagrams_ below show how the components interact with each other for the scenarios where the user keys in the commands `import C:\\Users\\XXX\\Desktop\\Pictures` and `rotate 90`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ".Component interactions for `import C:\\Users\\XXX\\Desktop\\Pictures` command"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "image::SDforImportcommand.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ".Component interactions for `rotate 90` command"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "image::SDforRotatecommand.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kayheen"
        },
        "content": "// end::ArchiInteraction[]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "carrein"
        },
        "content": "// tag::ui[]"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "carrein"
        },
        "content": "The UI consists of a `MainWindow` that is made up of the following"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "carrein"
        },
        "content": "components:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "carrein"
        },
        "content": " * `CommandBox`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "carrein"
        },
        "content": " * `ResultDisplay`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "carrein"
        },
        "content": " * `ImagePanel`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "carrein"
        },
        "content": " * `InitPanel`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "carrein"
        },
        "content": " * `InformationPanel`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "carrein"
        },
        "content": " * `StatusBarFooter`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "carrein"
        },
        "content": " * `HelpWindow`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "carrein"
        },
        "content": "All components, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "carrein"
        },
        "content": "The `InformationPanel` comprises of three tabs:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "carrein"
        },
        "content": ". Album Images"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "carrein"
        },
        "content": "- Displays all images currently opened in the `assets` directory and available for editing."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "carrein"
        },
        "content": ". EXIF Profile"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "carrein"
        },
        "content": "- Displays all ancillary tags attached to the currently opened"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "carrein"
        },
        "content": "image such as metadata information like *Date and Time* and *Copyright information*."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "carrein"
        },
        "content": ". Command History"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "carrein"
        },
        "content": "- Display all *Image Transformation* and *Image Filters* applied to the currently opened image."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "carrein"
        },
        "content": "The `UI` component is supplemented by a `Notifier` class. The class implements Java\u0027s `propertyChangeListener` as a means of drawing updates to the User Interface."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "carrein"
        },
        "content": "For example, the `ImageView` component draws updates to an opened image in the following sequence:"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "carrein"
        },
        "content": ". Register the `ImageView` component with the `Notifier` class."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "carrein"
        },
        "content": ". `Notifier` is called when `Open` command is executed with a given Property Name."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "carrein"
        },
        "content": ". `Notifier` fires an alert with the Property Name to all registered listener."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "carrein"
        },
        "content": ". `ImageView` checks if the Property Name is pertaining to it and redraws the image shown by accessing `Album`."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "carrein"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "carrein"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` directory."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "carrein"
        },
        "content": "// end::ui[]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ".  `Logic` uses the `FomoFotoParser` class to parse the user command."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kayheen"
        },
        "content": ".  The command execution can affect the `CurrentEdit` (e.g. rotating an image) and `Album` (e.g. saving an image)."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "// tag::LogicComponentSequenceDiagrams[]"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Given below are the Sequence Diagrams for interactions within the `Logic` component for the `execute(\"import C:\\User\\Pictures\\image.png\")` and `execute(\"rotate 90\")` API call."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ".Interactions Inside the Logic Component for the `import C:\\User\\Pictures\\image.png` Command"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "image::LogicImportSd.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ".Interactions Inside the Logic Component for the `rotate 90` Command"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "image::LogicRotateSd.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "// end::LogicComponentSequenceDiagrams[]"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "itszp"
        },
        "content": "// tag::DesignModel[]"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "itszp"
        },
        "content": "image::ModelComponents.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "carrein"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/CurrentEdit.java[`CurrentEdit.java`], link:{repoURL}/src/main/java/seedu/address/model/Album.java[`Album.java`], link:{repoURL}/src/main/java/seedu/address/model/Album.java[`Image.java`]"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "The Model component comprises of three main classes, `CurrentEdit`, `TransformationSet` and `Album`."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "The core functions of the `CurrentEdit` Class are listed below:"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "itszp"
        },
        "content": "* stores an `Image` instance in `tempImage` and `originalImage` when an image is opened."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "carrein"
        },
        "content": "* creates a copy of the opened image and the currently edited image in `temp` directory."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "itszp"
        },
        "content": "* `tempImage` is updated each time a command to edit the image is called. (e.g. `RotateCommand`, `ContrastCommand`)"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "itszp"
        },
        "content": "* stores a list of commands that the user input after an image is opened."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "carrein"
        },
        "content": "* contains methods to access `temp` directory."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "itszp"
        },
        "content": "// end::DesignModel[]"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "The `TransformationSet` class is implemented using the Singleton pattern. This design choice was made to ensure that only a single instance of `TransformationSet` is used in FomoFoto at runtime. This design also eliminates redundant passing of instance variables of `TransformationSet` across all logic and model components."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "The core functions of the `Transformation` class are listed below:"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* Stores a reference to all the preset commands saved by the user as a HashMap that contains a `String` as a key and a `List\u003cCommand\u003e`as a value."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* Contains various helper methods to access the HashMap that stores the preset commands."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "carrein"
        },
        "content": "//tag::albumModel[]"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "The `Album` class is also implemented using the Singleton pattern. This design choice was purposely made as only a single instance of `Album` should reside in FomoFoto at any one time. This design also reduces the need for passing instance variables across all logic and model components."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "The core functions of the `Album` class are listed below:"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "carrein"
        },
        "content": "* Stores a reference to all imported images as List."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* Contains various helper methods to access the `assets` directory, the storage for the raw image files."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "carrein"
        },
        "content": "* Fires property changes to listeners attached to the `Notifier` to redraw UI elements."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "carrein"
        },
        "content": "The Model also comprises of a smaller subclass, `Image`."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "carrein"
        },
        "content": "The `Image` class encapsulates the fields of a raw image file. This design choice allows for better abstraction between classes and easy reuse between commands."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "carrein"
        },
        "content": "The core functions of the `Image` class are listed below."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "carrein"
        },
        "content": "* Validation checks to see if a raw image is a valid Image."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "carrein"
        },
        "content": "* Keeps a command history of edits executed on this Image."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "carrein"
        },
        "content": "//end::albumModel[]"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "itszp"
        },
        "content": "////"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "itszp"
        },
        "content": "////"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "// tag::StorageComponent[]"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "image::StorageArchitectureDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "carrein"
        },
        "content": "The `assets` and `temp` directories form the storage component of FomoFoto."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "carrein"
        },
        "content": "*  The `assets` directory stores images that the user imported"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "carrein"
        },
        "content": "* The `temp` directory stores the image that the program is currently editing on."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "carrein"
        },
        "content": "* The `Album` class contains methods to save and retrieve images from the `assets` directory."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* The `CurrentEdit` class contains methods to overwrite and retrieve the image that the program is currently editing on."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "// end::StorageComponent[]"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "carrein"
        },
        "content": "//tag::DetailsStorage[]"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "carrein"
        },
        "content": "The `assets` and `temp` directory from the storage component of FomoFoto. Both directories are created during runtime of the application."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "carrein"
        },
        "content": "The `assets` directory is created in the same directory where FomoFoto is first launched and persist between sessions. The `assets` directory is marked as `FomoFoto.assets`."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "carrein"
        },
        "content": "The `temp` directory is created per FomoFoto session. The target directory for the `Temporary File` directory is in both Windows and OS X. The `temp` directory is removed on program exit."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "carrein"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "carrein"
        },
        "content": "If FomoFoto is not given the permissions to write `assets` and `temp` to their respective directories i.e. limited write permissions, the application might not function properly."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "carrein"
        },
        "content": "//end::DetailsStorage[]"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "// tag::Export[]"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "\u003d\u003d\u003d Export Feature"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "The `export` command exports a file in the album into a specified directory."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "The export function is facilitated by `Album`. It uses the following operations:"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* `Album#getImageFromList(String)` - returns an image from the album with name matching the input string and null if no image matches the input string."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Given below is an example usage scenario and how the `export` mechanism behaves at each step."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Step 1. The user executes `export f/iu.jpg d/C:\\Users\\randy\\Desktop`."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "carrein"
        },
        "content": "Step 2. `ExportCommandParser` checks if the user has input the command correctly."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Step 3. `Album#getImageFromList` checks if the file to be exported exists in the album and throws a `CommandException` if it does not exist."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Step 4. `ExportCommand#validPath` checks if the specified directory is valid and throws a `CommandException` if it is not."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "carrein"
        },
        "content": "Step 5. If the file to be exported exists and directory is valid, the file will be copied to the directory."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "randytqw"
        },
        "content": "The following sequence diagram shows how the `export` command works:"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "randytqw"
        },
        "content": ".Sequence Diagram for Export Command"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "randytqw"
        },
        "content": "image::ExportSequenceDiagram.png[width\u003d600]"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "// end::Export[]"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::import[]"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003d\u003d\u003d Import feature"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "carrein"
        },
        "content": "The Import Command allows users to import a file of an image format into FomoFoto for editing."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "carrein"
        },
        "content": "The implementation of the import feature allows for users to either:"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "carrein"
        },
        "content": " * Import a single image file."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "carrein"
        },
        "content": " * Import all image files in a directory."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "carrein"
        },
        "content": " * Import a sample list of image files."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "carrein"
        },
        "content": "Image file must adhere to a subset of the following formats as describe by its MIME type standardized in IETF\u0027s RFC 6838:"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "carrein"
        },
        "content": "* `.bmp`"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "carrein"
        },
        "content": "* `.jpeg` or `.jpg`"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "carrein"
        },
        "content": "* `.png`"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "carrein"
        },
        "content": "* `.tif` or `.tiff`"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "carrein"
        },
        "content": "* `.gif`"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "carrein"
        },
        "content": "Images with `.tif` or `.tiff` formats are not rendered on screen due to a limitation with JavaFX but edits made will still be applied."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "carrein"
        },
        "content": "Images must also adhere to the following additional requirements:"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "carrein"
        },
        "content": ". Not be hidden or prepended by a `.` dot identifier."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "carrein"
        },
        "content": ". Not be over 10MB in size."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "carrein"
        },
        "content": ". Not have the same name as an existing image in the Album."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "carrein"
        },
        "content": "Implementation of these checks can be found in `ImportCommandParser`."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "carrein"
        },
        "content": "Images found in the given arguments will be copied to an `assets` directory created at runtime in FomoFoto\u0027s home directory. This is facilitated by the `Album` class and `ImportCommandParser` and contains the following operation:"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "carrein"
        },
        "content": " * `Album#refreshAlbum()` - Fires a property change to all registered listeners. Listeners addressing this particular property will trigger and update accordingly."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "carrein"
        },
        "content": " * `ImportCommandParser#parse(String)` - Takes in an absolute path, perform sanity checks on availability, size, format and copies the image to `assets` directory."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "carrein"
        },
        "content": "Additionally, the `import sample` command is supported by the `ResourceWalker` class. This class traverses through a sample directory of valid image files and populates FomoFoto."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "carrein"
        },
        "content": "Example usage scenario:"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "carrein"
        },
        "content": " 1. The user launches the application and enters `import C:\\Users\\Addison\\Desktop\\sample.png`"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "carrein"
        },
        "content": " 2. `ImportCommandParser` takes in arguments and performs validation on a given path. Image is copied to `assets` directory and added to Album if it is valid."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "carrein"
        },
        "content": " 3. `Album` display the imported image to UI by calling the `Notifier` class which calls on the display panel listening to the notifier."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "carrein"
        },
        "content": " 4. `InformationPanel` updates to reflect the imported image in the Album."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "carrein"
        },
        "content": ".Sequence Diagram for Import Command"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "carrein"
        },
        "content": "image::ImportSequenceDiagram.png[width\u003d800]"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "carrein"
        },
        "content": "* *Alternative 1*: Import single images only."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "carrein"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "carrein"
        },
        "content": "** Cons: Importing multiple images from the same directory needs repeated commands."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "carrein"
        },
        "content": "* *Alternative 2 (Current Choice)*: Import images from a directory as well."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "carrein"
        },
        "content": "** Pros: Can import many images without repeating the command."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "carrein"
        },
        "content": "** Cons: Can result in errors if too many images are imported or images are of alternative formats."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "// end::import[]"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "itszp"
        },
        "content": "\u003d\u003d\u003d Open Feature"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "itszp"
        },
        "content": "// tag::DGOpen[]"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "itszp"
        },
        "content": "This command allows the user to open a previously imported image for editing."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "itszp"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "itszp"
        },
        "content": "The `open` function is facilitated by `Album` and `CurrentEdit`. It uses the following operations:"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "carrein"
        },
        "content": "* `Album#checkFileExist(String)` - Checks if file name specified by the `String` exists in assets directory."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "carrein"
        },
        "content": "* `Album#retrieveImage(String)` - Returns an `Image` specified by the `String` in assets directory."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "carrein"
        },
        "content": "* `CurrentEdit#openImage(Image)` - Creates two copies of the opened image in `temp` directory. The duplicated images are instantiated as `tempImage` and `originalImage`."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "itszp"
        },
        "content": "* `CurrentEdit#updateExif()` - Updates the Exif data of the image."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "itszp"
        },
        "content": "* `CurrentEdit#displayTempImage()` - Displays the temporary image stored in the `temp` directory."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "itszp"
        },
        "content": ".Sequence Diagram for Open Command +"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "itszp"
        },
        "content": "image::OpenCommandSequenceDiagram.png[width\u003d800]"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "itszp"
        },
        "content": "The following is an example usage scenario of how `open` behaves at each step as shown in the figure above."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "itszp"
        },
        "content": "Step 1. The user executes `open sample.png`."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "carrein"
        },
        "content": "Step 2. `Album#checkFileExist(String)` is called to check if the file specified by the `String` is in `assets` directory. If it exists, `Album#retrieveImage(String)` is called to create an `Image` object from the specified file. Otherwise, `CommandException` is thrown."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "carrein"
        },
        "content": "Step 3. The `Image` is passed to `CurrentEdit#openImage(Image)` to create two copies of it, named `temp_img.png` and `ori_img.png`, in `temp` directory. These copies are then instantiated as `tempImage` and `originalImage`."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "itszp"
        },
        "content": "Step 4. `CurrentEdit#updateExif()` is called to update the information of the opened image."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "itszp"
        },
        "content": "Step 5. `CurrentEdit#displayTempImage()` is called to display the opened image on the GUI."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "itszp"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "itszp"
        },
        "content": "* *Alternative 1 (current choice)*: The user can only open and edit one image at a time."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "itszp"
        },
        "content": "** Advantages:"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "itszp"
        },
        "content": "*** Easy to implement."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "carrein"
        },
        "content": "*** Saves space as `temp` directory only stores one original image and one temporary image."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "itszp"
        },
        "content": "*** Clear to users that edits are done to the only opened image."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "itszp"
        },
        "content": "** Disadvantage: Only one image can be edited at a time."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "itszp"
        },
        "content": "* *Alternative 2*: The user can open and edit multiple images."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "itszp"
        },
        "content": "** Advantage: Images can be edited simultaneously."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "itszp"
        },
        "content": "** Disadvantages:"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "itszp"
        },
        "content": "*** Hard to distinguish whether the user is opening an image from `assets` or `temp` directory."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "itszp"
        },
        "content": "*** Requires many duplicates with different temporary names."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "itszp"
        },
        "content": "*** May be confusing for the user."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "itszp"
        },
        "content": "Alternative 1 was chosen as it is less complicated, requires lesser space and more user-friendly."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "itszp"
        },
        "content": "// end::DGOpen[]"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "itszp"
        },
        "content": "\u003d\u003d\u003d List Files Feature"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "itszp"
        },
        "content": "// tag::DGListFiles[]"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "carrein"
        },
        "content": "This command displays the names of all the files in the `assets` directory."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "itszp"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "itszp"
        },
        "content": "The `listfiles` function is facilitated by `Album`. It uses the following operation:"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "carrein"
        },
        "content": "* `Album#getFileNames()` - Returns a list of all the files in `assets` directory."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "itszp"
        },
        "content": "[[sequencediagram_listfiles]]"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "itszp"
        },
        "content": ".Sequence Diagram for ListFiles +"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "itszp"
        },
        "content": "image::ListFilesCommandSequenceDiagram.png[width\u003d800]"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "itszp"
        },
        "content": "The following is an example usage scenario of how `listfiles` behaves at each step as shown in the figure above."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "itszp"
        },
        "content": "Step 1. The user executes `listfiles`."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "carrein"
        },
        "content": "Step 2. `Album#getFileNames()` accesses `assets` directory and returns all the file names in a `String` array."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "itszp"
        },
        "content": "Step 3. The `String` array is displayed on the GUI."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "itszp"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "carrein"
        },
        "content": "This command was created to allow the user to know what files are stored in `assets` directory so that the `FILENAME` can be easily referenced for `open`."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "itszp"
        },
        "content": "// end::DGListFiles[]"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "// tag::ImageFilter[]"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "kayheen"
        },
        "content": "\u003d\u003d\u003d Image Filters"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "The filter mechanism is facilitated by https://github.com/sksamuel/scrimage[`scrimage`], an external API Library that provides image filters methods for our image editor. The gradle script declares a compile-time dependency on this external API through the coordinates:  `group: \u0027com.sksamuel.scrimage\u0027`, `name: \u0027scrimage-filters_2.12\u0027`, `version: \u00273.0.0-alpha4\u0027`."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "The image filters feature is facilitated by `CurrentEdit`. It uses the following operations:"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* `CurrentEdit#tempImageDoNotExist()` - Returns `true` if `tempImage` in `CurrentEdit` is null. `tempImage` is null only if `open` command is never called."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* `CurrentEdit#getTempImage` - Retrieves the temporary image `tempImage` which stores the filepath of the temporary image, its history of edits [`List\u003cCommand\u003e`] and its metadata."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* `CurrentEdit#updateTempImage` - Replaces the temporary image in the `temp` directory with the newly edited image and updates the `tempImage` instance in the class."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* `CurrentEdit#addCommand` - Adds this command to the edit history [`List\u003cCommand\u003e`] in `tempImage` for the `undo/redo` command."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* `CurrentEdit#displayTempImage()` - Displays the temporary image stored in the `temp` directory."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "The filter feature mainly consists of:"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* `ContrastCommand`: Applies a `double` contrast ratio value on the opened image. The `double` contrast ratio value is preset to 1.1 if a specified `double` ratio value is not given by the user.  A value above 1 (e.g 1.3) increases the contrast of the image while a positive value below 1 (e.g 0.5) reduces the contrast of the image."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* `BrightnessCommand`: Applies a `double` brightness ratio value on the opened image. The `double` brightness ratio value is preset to 1.1 if a specified `double` ratio value is not given by the user. A value above 1 (e.g 1.3) increases the brightness of the image while a positive value below 1 (e.g 0.5) reduces the brightness of the image."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* `BlackWhiteCommand`: Transforms the opened image to a black and white image given a threshold value. The threshold `integer` value is preset to 127 if a specified threshold is not given by the user. Pixels on the image lighter than the threshold value will become white and pixels darker than the threshold value will become black."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "The following describes the main operations and processes for each command stated above."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "\u003d\u003d\u003d\u003d Contrast Command"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "This command calls for an adjustment of contrast on an opened image. After adjusting the contrast, it adds this specific command called by the user to the `List\u003cCommands\u003e` belonging to the `tempImage` found in `CurrentEdit` which saves the editing history of the opened image."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "[[sequencediagram_contrast]]"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ".Sequence Diagram for Contrast Command"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "image::ContrastCommandSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Given below is an example usage scenario of how `contrast` behaves at each step as shown in \u003c\u003csequencediagram_contrast\u003e\u003e. [This applies to the other image filter commands as well.]"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Step 1. When the user runs an `open` command to edit an image, it invokes a method which creates an instance of an `Image` that stores the file path of the image, its history of edits [`List\u003cCommand\u003e`] and its metadata. This `Image` object is saved under the variable name `tempImage` in `CurrentEdit` for editing."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Step 2. When the user enters the command (e.g. `contrast 0.3`), the entered command is parsed and the command will be executed."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "kayheen"
        },
        "content": "If an invalid command is provided, a reminder of how to use the command will be given to the user and no command will be executed."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Step 3. During execution, the `execute` method in the `ContrastCommand` class first invokes `CurrentEdit#tempImageDoNotExist` to check if an image is opened. If no image is opened, it will throw an error message to inform the user to open an image for editing first. Else, the `execute` method will invoke `CurrentEdit#getTempImage()` to get the `tempImage` from `CurrentEdit`."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "carrein"
        },
        "content": "Step 4. Upon retrieving the `tempImage`, the `execute` method creates a `ContrastFilter` instance provided by the external library [`scrimage`] which takes in a `double` contrast ratio value. This `ContrastFilter` will then be applied to the image retrieved from the file path of `tempImage`."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Step 5. After applying the `ContrastFilter` on the opened image, `CurrentEdit#updateTempImage()` is invoked to save the newly edited image and replace the previous one in the file path of the `tempImage`."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Step 6. The `execute` method then checks if the boolean `isNewCommand` is true. If it is `true`, it indicates that the command is a new contrast command called directly from the user and not through an `undo/redo` command. This triggers Step 7 in the line below. Otherwise, the command\u0027s execution ends in this step."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Step 7. `isNewCommand` is set to `false` to signal that this command is not a new contrast command if it is executed again through the `undo/redo` command."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Step 8. `CurrentEdit#addCommand(this)` is invoked to add this command to the `List\u003cCommand\u003e` in `tempImage` for the undo/redo function and `CurrentEdit#displayTempImage()` is used to display the edited image on the graphical user interface."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " * Intermediate images that are still being edited have to be stored in a temporary folder first due to our `undo/redo` implementation."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "\u003d\u003d\u003d\u003d Brightness Command"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "This command calls for an adjustment of brightness on an opened image. After adjusting the brightness, it adds this specific command called by the user to the `List\u003cCommands\u003e` belonging to the `tempImage` found in `currentEdit` which saves the editing history of the opened image."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Refer to the example usage scenario, sequence diagram and design considerations in \u003c\u003cContrast Command\u003e\u003e."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "\u003d\u003d\u003d\u003d BlackWhite Command"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "This command calls for a transformation of an opened image to a black and white image. After applying the black and white filter, it adds this specific command called by the user to the `List\u003cCommands\u003e` belonging to the `tempImage` found in `currentEdit` which saves the editing history of the opened image."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Refer to the example usage scenario, sequence diagram and design considerations in \u003c\u003cContrast Command\u003e\u003e."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "// end::ImageFilter[]"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "kayheen"
        },
        "content": "\u003d\u003d\u003d Image Manipulation"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "kayheen"
        },
        "content": "// tag::ImageManipulation[]"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "kayheen"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "kayheen"
        },
        "content": "This segment involves manipulating the physical image itself, such as rotating, cropping and resizing. The implementations of these features are facilitated by https://github.com/rkalla/imgscalr[`ImgScalr Library`], which is an external API Library that helps process the target image."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "kayheen"
        },
        "content": "The manipulation feature is facilitated by `CurrentEdit`. It uses the following operations:"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " * `CurrentEdit#tempImageDoNotExist()` - Returns `true` if `tempImage` in `CurrentEdit` is null. `tempImage` is null only if `open` command is never called."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " * `CurrentEdit#getTempImage` - Retrieves the temporary image `tempImage` which stores the filepath of the temporary image, its history of edits [`List\u003cCommand\u003e`] and its metadata."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "kayheen"
        },
        "content": " * `CurrentEdit#updateTempImage` - Replaces the temporary image in `temp` directory with the newly edited image and updates the `tempImage` instance in the class."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "kayheen"
        },
        "content": " * `CurrentEdit#addCommand` - Adds this command to the edit history `List\u003cCommand\u003e` in `tempImage` for the `undo/redo` command."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " * `CurrentEdit#displayTempImage()` - Displays the temporary image stored in the `temp` directory."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "kayheen"
        },
        "content": "This manipulation feature mainly consists of:"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "kayheen"
        },
        "content": "* `RotateCommand`: Allows users to rotate images by specifying a degree (90, 180 or 270 only)."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "kayheen"
        },
        "content": "* `CropCommand`: Allows users to crop images by specifying the coordinates of the top left corner, the width and the height of the desired cropped image."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "kayheen"
        },
        "content": "* `ResizeCommand`: Allows users to resize images to the desired width and height."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "carrein"
        },
        "content": "The following describes the main operations and processes for each command stated above."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "kayheen"
        },
        "content": "\u003d\u003d\u003d\u003d Rotate Command"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "kayheen"
        },
        "content": "This command allows the user to rotate the targeted image by specifying a degree (90, 180 or 270 only). Upon receiving an input degree from the user, the degree will be checked for its validity and will throw an error if the degree is not within the specified range. The command will then be added to the `List\u003cCommands\u003e` belonging to `tempImage` found in `currentEdit` which saves the editing history of the targeted image."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "kayheen"
        },
        "content": "The diagram below illustrates how the `Rotate` Command works:"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "kayheen"
        },
        "content": ".Sequence Diagram for Rotate Command"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "kayheen"
        },
        "content": "image::RotateCommandSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "kayheen"
        },
        "content": "Given below is an example usage scenario and how the command should behave at each step. (This applies to the other image manipulation commands as well.):"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "kayheen"
        },
        "content": "Step 1. When the user runs an open command to edit an image, it invokes a method which creates an instance of an `Image` that stores the file path of the image, its history of edits `List\u003cCommand\u003e` and its metadata. This `Image` object is saved under the variable name `tempImage` in `currentEdit` for editing."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "kayheen"
        },
        "content": "Step 2. When the user enters the command (e.g. `rotate 90`), the entered command is parsed and the command will be executed."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "kayheen"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "kayheen"
        },
        "content": "If an invalid command is provided, a reminder of how to use the command will be given to the user and no command will be executed."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "kayheen"
        },
        "content": "Step 3. During execution, the `execute` method in the `RotateCommand` class first invokes `currentEdit#tempImageDoNotExist` to check if an image is opened. If no image is opened, it will throw an error message to inform the user to open an image for editing. Else, the `execute` method will invoke `currentEdit#getTempImage()` to get the `tempImage` from `CurrentEdit`."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "kayheen"
        },
        "content": "Step 4. Upon retrieving the `tempImage`, the `execute` method in `RotateCommand` gets a `BufferedImage` instance from `tempImage`.The method then calls the external library https://github.com/rkalla/imgscalr[`ImgScalr`]\u0027s class `rotate` and passes the `BufferedImage` object in."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "kayheen"
        },
        "content": "Step 5. A `BufferedImage` object is returned from the external library and `currentEdit#updateTempImage()` is invoked to save the newly edited `BufferedImage` and replace the previous image in the file path of the `tempImage`."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "kayheen"
        },
        "content": "Step 6. The `execute` method then checks if the boolean `isNewCommand` is true. If it is true, it indicates that the command is a new `Rotate` command called directly from the user and not through an `undo/redo` command which triggers Step 7 in the line below. Otherwise, the command’s execution ends in this step."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "kayheen"
        },
        "content": "Step 7. `isNewCommand` is set to false to signal that this command is not a new rotate command if it is executed again through the `undo/redo` command. `currentEdit#addCommand(this)` is invoked to add this command to the `List\u003cCommand\u003e` in `tempImage` for the `undo/redo` function and `currentEdit#displayTempImage()` is used to display the edited image on the graphical user interface. +"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "kayheen"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "kayheen"
        },
        "content": "* Images that are still being edited have to be stored and edited in a temporary directory first due to our `undo/redo` implementation."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "kayheen"
        },
        "content": "// end::ImageManipulation[]"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "kayheen"
        },
        "content": "\u003d\u003d\u003d\u003d Crop Command"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "carrein"
        },
        "content": "This command allows the user to crop the targeted image by specifying the coordinates of the top left-hand corner of the desired image, the width of the desired image and the height of the desired image. Upon receiving the inputs, the values will be checked for their validity and will throw an error if any value is not within the specified range. The command will then be added to the `List\u003cCommand\u003e` belonging to `tempImage` found in `currentEdit` which saves the editing history of the targeted image."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "kayheen"
        },
        "content": "Refer to the example usage scenario, sequence diagram and design considerations in \u003c\u003cRotate Command\u003e\u003e."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "kayheen"
        },
        "content": "\u003d\u003d\u003d\u003d Resize Command"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "kayheen"
        },
        "content": "This command allows the user to resize the targeted image by specifying the width and height of the desired image. Upon receiving the inputs, the values will be checked for their validity and will throw an error if any value is not within the specified range. The command will then be added to the `List\u003cCommand\u003e` belonging to `tempImage` found in `currentEdit` which saves the editing history of the targeted image."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "kayheen"
        },
        "content": "Refer to the example usage scenario, sequence diagram and design considerations in \u003c\u003cRotate Command\u003e\u003e."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "itszp"
        },
        "content": "\u003d\u003d\u003d Save Feature"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "itszp"
        },
        "content": "// tag::DGSave[]"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "carrein"
        },
        "content": "This command applies the edits to the current image and saves it into `assets` directory."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "itszp"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "itszp"
        },
        "content": "The `save` function is facilitated by `Album` and `CurrentEdit`. It uses the following operations:"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* `CurrentEdit#tempImageDoNotExist()` - Returns `true` if `tempImage` in `CurrentEdit` is null. `tempImage` is null only if `open` command was never called."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "itszp"
        },
        "content": "* `CurrentEdit#getTempImage()` - Returns the latest edited image stored in `tempImage` in `CurrentEdit`."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "itszp"
        },
        "content": "* `CurrentEdit#getOriginalName()` - Returns the original name of opened image."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "itszp"
        },
        "content": "* `CurrentEdit#overwriteOriginal(String)` - Replaces `ori_img.png` with `temp_img.png` in `temp` directory. Updates `originalImage` to `tempImage` and `originalImageName` to `String` in `CurrentEdit`."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "itszp"
        },
        "content": "* `CurrentEdit#deleteHistory()` - Clears the history in `CurrentEdit`."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "itszp"
        },
        "content": "* `CurrentEdit#updateExif()` - Updates the Exif data of the new image."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "carrein"
        },
        "content": "* `Album#checkFileExist(String)` - Checks if the file name specified by the `String` exists in the assets directory."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "carrein"
        },
        "content": "* `Album#saveToAssets(Image, String)` - Saves the `Image` as `String` into `assets` directory."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "itszp"
        },
        "content": "* `Album#populateAlbum()` - Updates list of images in `Album` class."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "carrein"
        },
        "content": "* `Album#refreshAlbum()` - Updates and displays the latest images in `assets` directory on the GUI."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "itszp"
        },
        "content": ".Sequence Diagram for Save Command"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "itszp"
        },
        "content": "image::SaveCommandSequenceDiagram.png[width\u003d800]"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "itszp"
        },
        "content": "The following is an example usage scenario of how `save` behaves at each step as shown in the figure above."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "itszp"
        },
        "content": "Step 1. The user executes `save`."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "itszp"
        },
        "content": "Step 2. `CurrentEdit#tempImageDoNotExist()` is called to check if an image was previously opened. If `open` was not called previously, `CommandException` is thrown."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "itszp"
        },
        "content": "Step 3. `CurrentEdit#getTempImage()` is called to retrieve the `tempImage` from `CurrentEdit`."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "itszp"
        },
        "content": "Step 4. If the user did not input a `String` after `save` previously, `CurrentEdit#getOriginalName()` will retrieve the `originalImageName` from `CurrentEdit`. Otherwise, `Album#checkFileExist(String)` will be called to check if a file name is similar to `String`. If it is a duplicate, `CommandException` will be thrown."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "carrein"
        },
        "content": "Step 5. `Album#saveToAssets(Image, String)` takes in the previously retrieved `Image` and `String` to create a new image file in `assets` directory."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "carrein"
        },
        "content": "Step 6. `CurrentEdit#overwriteOriginal(String)` is called to update the files in `temp` directory and their respective instances in `CurrentEdit`."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "itszp"
        },
        "content": "Step 7. `CurrentEdit#deleteHistory()` is called to delete the edit history in `CurrentEdit` so that the user can no longer perform `undo` on the saved image."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "itszp"
        },
        "content": "Step 8.`CurrentEdit#updateExif()` is called to update the Exif data of the new image."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "carrein"
        },
        "content": "Step 9. `Album#populateAlbum()` is called to update the list of images in the `Album` class and to ensure it reflects all the files in the `assets` directory."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "itszp"
        },
        "content": "Step 10.`Album#refreshAlbum()` is called to update the Information Panel on the GUI."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "itszp"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "itszp"
        },
        "content": "* *Alternative 1*: The user must give a name to the new image."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "itszp"
        },
        "content": "** Advantage: Name of the new image is clear to the user."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "itszp"
        },
        "content": "** Disadvantage: May be tedious for the user to type in a name each time `save` is performed."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "itszp"
        },
        "content": "* *Alternative 2 (current choice)*: The user can choose to save as a new name or overwrite the original image"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "carrein"
        },
        "content": "** Advantage: Convenient for the user to `save` quickly without having to type a new name every time."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "itszp"
        },
        "content": "** Disadvantage: The user may unintentionally overwrite the original image."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "carrein"
        },
        "content": "Alternative 2 was chosen as the user is likely to use `save` frequently. Since the `assets` directory functions like an album, images can be re-imported if they are accidentally overwritten. The user is able to `save` easily and choose to resume editing immediately or at a later time."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "itszp"
        },
        "content": "// end::DGSave[]"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "// tag::SavePreset[]"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "\u003d\u003d\u003d SavePreset Feature"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "This feature saves a list of commands that were applied to the opened image under a specified name so that they can be applied to other images in the future."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "The `savepreset` function is facilitated by `CurrentEdit` and `TransformationSet`. It uses the following operations:"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* `CurrentEdit#tempImageDoNotExist()` - Returns `true` if `tempImage` in `CurrentEdit` is null. `tempImage` is null only if `open` command is never called."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* `CurrentEdit#getTempSubHistory()` - Retrieves the `List\u003cCommand\u003e` from the `tempImage` in `CurrentEdit`."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* `TransformationSet#isPresent(String)` - Returns true if there is already a `List\u003cCommand\u003e` saved under the same preset name."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* `TransformationSet#addTransformation(String, List\u003cCommand\u003e)` - Saves the `List\u003cCommand\u003e` to the `transformationMap` in `TransformationSet` under the specified preset name."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "The following sequence diagram shows how `savepreset` works:"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "[[sequencediagram_savepreset]]"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ".Sequence Diagram for Save Preset Command"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "image::SavePresetCommandSequenceDiagram.png[width\u003d800]"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Given below is an example usage scenario of how `savepreset` behaves at each step as shown in \u003c\u003csequencediagram_savepreset\u003e\u003e."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Step 1. When the user enters the command (e.g. `savepreset preset1`), the entered command is parsed and the command will be executed."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "If an invalid command is provided, a reminder of how to use the command will be given to the user and no command will be executed."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Step 2. During execution, the `execute` method in the `SavePresetCommand` class first invokes `CurrentEdit#tempImageDoNotExist` to check if an image is opened. If no image is opened, an error message will be displayed to remind the user to open an image for editing first."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Step 3. If an image is opened, the `execute` method will invoke `CurrentEdit#getTempSubHistory()` to retrieve the `List\u003cCommand\u003e` from the `tempImage` in `CurrentEdit` which consists of the image editing commands used on the opened image."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Step 4. If the `List\u003cCommand\u003e` is empty, an error message will be displayed to indicate that the opened image is not edited yet and thus there are no commands to be saved as a preset."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Step 5. `TransformationSet#isPresent(String)` is then invoked to check if the preset name specified by the user is used previously. If it is used previously, an error message will be displayed to tell the user to specify a different preset name."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Step 6. Lastly, the method `TransformationSet#addTransformation(String, List\u003cCommand\u003e)` is called to add the `List\u003cCommand` in the `TransformationSet`, saving it as a preset of commands that can be used in the future with the `setpreset` command."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* *Alternative 1 (current choice)*: The user can only save a preset of commands after applying these edits on an opened image."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "** Pros: The user can view the effects of the commands on an image first before deciding to save it as a preset."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "** Cons: It might be inconvenient for users who already have the list of commands they want to save as a preset beforehand and do not have to test them out."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* *Alternative 2*: The user can save a preset of commands by typing out all the commands in a row without testing them on an image."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "** Pros: It will be convenient for professional editors as they do not have to test the commands out on an opened image first."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "** Cons: Beginners in image editing will have a hard time finding the right commands to save as a preset without testing them out first."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "In the end, the first alternative is chosen for this application because our photo editor, FomoFoto, is mainly designed for basic photo editing and thus should be more suitable for beginners to use."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "// end::SavePreset[]"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "// tag::SetPreset[]"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "\u003d\u003d\u003d SetPreset Feature"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "This feature applies a preset list of commands that were saved previously using the `setpreset` command on the opened image."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "The `setpreset` function is facilitated by `CurrentEdit` and `TransformationSet`. It uses the following operations:"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* `CurrentEdit#addCommand(Command)` - Adds this command to the edit history [`List\u003cCommand\u003e`] in `tempImage` for the `undo/redo` command."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* `CurrentEdit#displayTempImage()` - Displays the temporary image stored in the temporary directory."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* `CurrentEdit#getTempImage()` - Retrieves the temporary image `tempImage` which stores the filepath of the temporary image, its history of edits [`List\u003cCommand\u003e`] and its metadata."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* `CurrentEdit#replaceTempWithOriginal()` - Replaces the temporary image in the filepath of the `tempImage` with the original image."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* `CurrentEdit#tempImageDoNotExist()` - Returns `true` if `tempImage` in `CurrentEdit` is null. `tempImage` is null only if `open` command is never called."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* `TransformationSet#findTransformation(String)` - Retrieves the `List\u003cCommand\u003e` in the `transformationMap` with the specified preset name."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* `TransformationSet#hasWaterMarkCommand(String)` - Returns true if the `List\u003cCommand\u003e` contains a `WaterMarkCommand`."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* `TransformationSet#isPresent(String)` - Returns true if there is a `List\u003cCommand\u003e` saved under the given preset name."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "The following sequence diagram shows how `setpreset` works:"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "[[sequencediagram_setpreset]]"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ".Sequence Diagram for Set Preset Command"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "image::SetPresetCommandSequenceDiagram.png[width\u003d800]"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Given below is an example usage scenario of how `setpreset` behaves at each step as shown in \u003c\u003csequencediagram_setpreset\u003e\u003e."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Step 1. When the user enters the command (e.g. `setpreset preset1`), the entered command is parsed and the command will be executed."
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "If an invalid command is provided, a reminder of how to use the command will be given to the user and no command will be executed."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Step 2. During execution, the `execute` method in the `SetPresetCommand` class first invokes `CurrentEdit#tempImageDoNotExist` to check if an image is opened. If no image is opened, an error message will be displayed to remind the user to open an image for editing first."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Step 3. If an image is opened, the `execute` method will invoke `CurrentEdit#getTempImage()` to retrieve the `tempImage` from `CurrentEdit`."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Step 4. `TransformationSet#isPresent(String)` is then invoked to check if there is a preset of commands saved under the name specified by the user. If the method returns false, an error message will be displayed to inform the user that there is no preset of commands saved under the name he/she specified."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Step 5. Else, the method `TransformationSet#findTransformation(String)` is called to retrieve the `List\u003cCommand\u003e` saved under the specified preset name. `TransformationSet#hasWaterMarkCommand(String)` is also invoked to check if the `List\u003cCommand\u003e` has a `WaterMarkCommand`."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Step 6. Commands in the `List\u003cCommand\u003e` will be executed one by one to apply the respective edits to the opened image. If any of the commands throws an exception (e.g. If a watermark is already applied on an image, the execution of a preset of commands which contains a `WaterMarkCommand` on the same image will throw an error message to indicate that there is already a watermark.), the method `CurrentEdit#replaceTempWithOriginal` will undo all the changes made to the image."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Step 6. Lastly, `CurrentEdit#addCommand(this)` is invoked to add this command to the `List\u003cCommand\u003e` in `tempImage` for the undo/redo function and `CurrentEdit#displayTempImage()` is used to display the edited image on the graphical user interface."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* *Alternative 1 (current choice)*: Allows user to apply the preset of commands on only one image (the image that is opened) at each time."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "** Pros: The user will be able to see the immediate effect of the commands on the image."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "** Cons: The user has to set the preset of commands on different images one by one which takes a longer time."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* *Alternative 2*: Allows user to apply the preset of commands on multiple images."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "** Pros: The user can save time by applying the commands on many images in just one command instead of having to do it one by one."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "** Cons: The effects of the commands on the images are not shown immediately to the user and user will not be able to determine if the preset of commands is suitable for each of the images."
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "In the end, the first alternative is chosen as we want users to see the immediate effect of the commands so that they can make changes or undo the edits if they do not like what they see."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "// end::SetPreset[]"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "randytqw"
        },
        "content": "The undo/redo mechanism is facilitated by `Image`. It contains a list of commands applied to the current image. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "randytqw"
        },
        "content": "* `Image#addHistory()` -- Saves the current edit command into commandHistory list and increments index."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "randytqw"
        },
        "content": "* `Image#setUndo()` -- Decreases index by 1."
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "randytqw"
        },
        "content": "* `Image#setRedo()` -- Increases index by 1."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "randytqw"
        },
        "content": "* `Image#getHistory()` -- Returns commandHistory as List."
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "randytqw"
        },
        "content": "* `Image#getSubHistory()` -- Returns commandHistory sublist using index to track which commands should be included."
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "randytqw"
        },
        "content": "* `Image#canUndo()` -- Returns true if index \u003e 0."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "randytqw"
        },
        "content": "* `Image#canRedo()` -- Returns true if index \u003c CommandHistory.size()."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "randytqw"
        },
        "content": "These operations are exposed in the `CurrentEdit` interface as `CurrentEdit#addCommand()`, `CurrentEdit#setUndoTemp()`, `CurrentEdit#setRedoTemp()`, `CurrentEdit#getHistoryTemp()`, `CurrentEdit#getSubHistoryTemp()`, `CurrentEdit#canUndoTemp()` and `CurrentEdit#canRedoTemp()` respectively."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "randytqw"
        },
        "content": "Step 1. The user opens an image. The `Image` will be initialized with an empty commandHistory List."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "randytqw"
        },
        "content": ".State list diagram for undo/redo"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "randytqw"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "randytqw"
        },
        "content": "Step 2. The user executes a series of transformations on the image. These transformations are stored in the commandHistory list and for each transformation stored, the index is incremented by 1 to point to that transformation."
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "randytqw"
        },
        "content": ".First Transformation"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "randytqw"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "randytqw"
        },
        "content": ".Second Transformation"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "randytqw"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "carrein"
        },
        "content": "Step 3. The user wants to undo the previous transformation by using the `undo` command. It will call `CurrentEdit#replaceTempWithOriginal()` which will replace the edited image in temp folder with the original image. It will then call `CurrentEdit#setUndoTemp()` to set the index in `tempImage` to the required index and retrieve the list with `CurrentEdit#getHistoryTemp()`. Using the list, it will apply the commands onto the original image until it reaches the command just before the set index."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "randytqw"
        },
        "content": ".Undo transformation"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "randytqw"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "If a command fails its execution, it will return the image before undo was called and produce an error message."
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "carrein"
        },
        "content": "Step 4. After executing Undo, `index` will be less than the size of commandHistory. If redo is not executed before a new command is added, all commands in the list after `index` will be deleted."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "randytqw"
        },
        "content": "For redo, it will call `setRedo` and retrieve that command to apply it on the current image."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "randytqw"
        },
        "content": ".State List diagram"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "randytqw"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "carrein"
        },
        "content": "If the `Image#index` is 0, pointing to the initial image, then there are no previous commands to restore. The `undo` command uses `CurrentEdit#canUndoTemp()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "randytqw"
        },
        "content": ".Sequence Diagram"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "randytqw"
        },
        "content": "image::UndoSeqTEMP.PNG[width\u003d\"800\"]"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "randytqw"
        },
        "content": "The `redo` command does the opposite -- it calls `CurrentEdit#setRedoTemp()`, which shifts the `index` once to the right, pointing to the previously undone command, and executes that command to perform the transformation."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "carrein"
        },
        "content": "If the `index` is at index `commandHistory.size()`, pointing to the latest image state, then there is no undone transformation to restore. The `redo` command uses `CurrentEdit#canRedoTemp()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "randytqw"
        },
        "content": "Step 5. The user executes `saves`, which calls `CurrentEdit#saveToAssets()`. This replaces the original image with the temp image since a name is not specified. When this happens, the user can no longer call `undo` as there is no original image to work on. The command history is also cleared."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "randytqw"
        },
        "content": "* *Alternative 1:* Saves each transformation as a separate image."
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* *Alternative 2(current choice):* Save all transformation in a list and apply them when undo/redo is called. We chose this method as we do not want our application to take up too much space in the PC."
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "randytqw"
        },
        "content": "** Pros: Will use less memory"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "carrein"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command is correct."
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "carrein"
        },
        "content": "* *Alternative 1 (current choice):* Use a list to store the history of commands. We chose this so as to preserve good object-oriented programming principles."
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "randytqw"
        },
        "content": "** Pros: Easy for new computer science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "randytqw"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `Image`."
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* *Alternative 2:* Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "randytqw"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates single responsibility principle and separation of concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "kayheen"
        },
        "content": "\u003d\u003d\u003d WaterMark Feature"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//tag::WaterMark[]"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "kayheen"
        },
        "content": "This command allows the user to add a watermark to their image. Upon receiving an input message from the user, the message will be checked for its validity and will throw an error if the message is empty or contains only spaces. Messages can contain words and numbers separated by spaces. The command will then be added to the `List\u003cCommands\u003e` belonging to `tempImage` found in `currentEdit` which saves the editing history of the targeted image."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "kayheen"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "kayheen"
        },
        "content": "Each image can only have 1 watermark. If the user would like to edit the watermark, the user can remove the watermark by using the `Undo` function and then add a new watermark."
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "kayheen"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "kayheen"
        },
        "content": "The manipulation feature is facilitated by `CurrentEdit` and `Image`. It uses the following operations:"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "kayheen"
        },
        "content": " * `CurrentEdit#tempImageDoNotExist()` - Returns `true` if `tempImage` in `CurrentEdit` is null. `tempImage` is null only if `open` command is never called."
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "kayheen"
        },
        "content": " * `CurrentEdit#getTempImage` - Retrieves the temporary image `tempImage` which stores the filepath of the temporary image in the `temp` directory, its history of edits [`List\u003cCommand\u003e`] and its metadata."
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "kayheen"
        },
        "content": " * `CurrentEdit#updateTempImage` - Replaces the temporary image in `temp` directory with the newly edited image and updates the `tempImage` instance in the class."
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "kayheen"
        },
        "content": " * `CurrentEdit#addCommand` - Adds this command to the edit history `List\u003cCommand\u003e` in `tempImage` for the `undo/redo` command."
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "kayheen"
        },
        "content": " * `CurrentEdit#displayTempImage()` - Displays the temporary image stored in the `temp` directory."
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "kayheen"
        },
        "content": " * `Image#hasWaterMark()` - Checks if the `Image` already has a watermark."
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "kayheen"
        },
        "content": " * `Image#setWaterMark(boolean)` - Sets the `Image` object\u0027s `hasWaterMark` field accordingly - if the `Image` object has or does not have a watermark."
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "kayheen"
        },
        "content": "The diagram below illustrates how the WaterMark Command works:"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "kayheen"
        },
        "content": ".Sequence Diagram for WaterMark Command"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "kayheen"
        },
        "content": "image::WaterMarkCommandSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "kayheen"
        },
        "content": "Given below is an example usage scenario and how the command should behave at each step:"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "kayheen"
        },
        "content": "Step 1. When the user runs an open command to edit an image, it invokes a method which creates an instance of an `Image` that stores the file path of the image, its history of edits `List\u003cCommand\u003e` and its metadata. This `Image` object is saved under the variable name `tempImage` in `currentEdit` for editing."
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "kayheen"
        },
        "content": "Step 2. When the user enters the command (e.g. `wm FomoFoto`), the entered command is parsed and the command will be executed."
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "kayheen"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "kayheen"
        },
        "content": "If an invalid command is provided, a reminder of how to use the command will be given to the user and no command will be executed."
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "kayheen"
        },
        "content": "Step 3. During execution, the `execute` method in the `WaterMarkCommand` class first invokes `currentEdit#tempImageDoNotExist` to check if an image is opened. If no image is opened, it will throw an error message to inform the user to open an image for editing. Else, the `execute` method will invoke `currentEdit#getTempImage()` to get the `tempImage` from `CurrentEdit`."
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "carrein"
        },
        "content": "Step 4. Upon retrieving the `tempImage`, the `execute` method in the `WaterMarkCommand` gets the  `BufferedImage` instance of the `tempImage` object and copies the `BufferedImage` object to a temporary `BufferedImage` object with the same width, height and image type. The `execute` method then initialises the necessary graphics properties using the `Graphics2D` Java class. The message is centralised and overlays the temporary `BufferedImage` object."
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "kayheen"
        },
        "content": "Step 5. The `execute` method then checks for a few conditions listed below:"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "kayheen"
        },
        "content": ". `isNewCommand`: Checks if the `WaterMark` command is from an input by the user, from an `undo/redo` command or from a `SetPreset` command."
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "kayheen"
        },
        "content": ". `isPreset`: Checks if the `WaterMark` command is from a preset."
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "kayheen"
        },
        "content": ". `tempImage#hasWaterMark()`: Checks if the `tempImage` already has a watermark."
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "kayheen"
        },
        "content": "Step 6. According to the above 3 conditions, the following combinations will result in different actions:"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "kayheen"
        },
        "content": ". `isNewCommand` \u003d `True` and `tempImage#hasWaterMark()` \u003d `False`:"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "kayheen"
        },
        "content": "+"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "kayheen"
        },
        "content": "* Invokes `tempImage#setWaterMark(True)` to indicate that the image has a watermark. +"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "kayheen"
        },
        "content": "+"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "kayheen"
        },
        "content": "+"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "kayheen"
        },
        "content": "* Invokes `currentEdit#updateTempImage()` to  save the newly edited `BufferedImage` and replace the previous image in the filepath of the `tempImage`."
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "kayheen"
        },
        "content": "+"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "kayheen"
        },
        "content": "+"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "kayheen"
        },
        "content": "* Sets `isNewCommand` to false to signal that this command is not a new rotate command if it is executed again through the `undo/redo` function."
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "kayheen"
        },
        "content": "+"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "kayheen"
        },
        "content": "+"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "kayheen"
        },
        "content": "* Invokes `currentEdit#addCommand(this)` to add this command to the `List\u003cCommand\u003e` in `tempImage` for the `undo/redo` function and `currentEdit#displayTempImage()` is used to display the edited image on the graphical user interface."
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "kayheen"
        },
        "content": "+"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "kayheen"
        },
        "content": ".  `isNewCommand` \u003d `True` and `tempImage#hasWaterMark()` \u003d `True`:"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "kayheen"
        },
        "content": "+"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "kayheen"
        },
        "content": "* Throws an exception as there is already a watermark on `tempImage`."
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "kayheen"
        },
        "content": "+"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "kayheen"
        },
        "content": ".  `isNewCommand` \u003d `False` and `isPreset` \u003d `False`:"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "kayheen"
        },
        "content": "+"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "kayheen"
        },
        "content": "* Indicates that it is an `undo/redo` function."
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "kayheen"
        },
        "content": "+"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "kayheen"
        },
        "content": "+"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "kayheen"
        },
        "content": "* Invokes `tempImage#setWaterMark(true)` to indicate that the image has a watermark."
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "kayheen"
        },
        "content": "+"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "kayheen"
        },
        "content": "+"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "kayheen"
        },
        "content": "* Invokes `currentEdit#updateTempImage()` to save the newly edited `BufferedImage` and replace the previous image in the filepath of the `tempImage`."
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "kayheen"
        },
        "content": "+"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "kayheen"
        },
        "content": ".  `isNewCommand` \u003d `False` and `isPreset` \u003d `True` and `tempImage#hasWaterMark()` \u003d `False`:"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "kayheen"
        },
        "content": "+"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "kayheen"
        },
        "content": "* Indicates that a preset is added to an image with no watermark."
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "kayheen"
        },
        "content": "+"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "kayheen"
        },
        "content": "+"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "kayheen"
        },
        "content": "* Invokes `tempImage#setWaterMark(true)` to indicate that the image has a watermark."
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "kayheen"
        },
        "content": "+"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "kayheen"
        },
        "content": "+"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "kayheen"
        },
        "content": "* Invokes `currentEdit#updateTempImage()` to save the newly edited `BufferedImage` and replace the previous image in the filepath of the `tempImage`."
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "kayheen"
        },
        "content": "+"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "kayheen"
        },
        "content": ". Anything else:"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "kayheen"
        },
        "content": "+"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "kayheen"
        },
        "content": "* Throws an exception as there is already a watermark on `tempImage`."
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "kayheen"
        },
        "content": "//end::WaterMark[]"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "kayheen"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "kayheen"
        },
        "content": "* Images that are still being edited have to be stored and edited in a temp directory first due to our `undo/redo` implementation."
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE`: Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING`: Can continue, but with caution"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO`: Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "carrein"
        },
        "content": "* `FINE`: Details that are not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "carrein"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` directory, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "carrein"
        },
        "content": "* To run all tests, right-click on the `src/test/java` directory and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "carrein"
        },
        "content": "* Needs a quick way to perform simple edits on images."
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "carrein"
        },
        "content": "* Needs to view tagged information on an image."
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "carrein"
        },
        "content": "* Prefer desktop apps over other types"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "carrein"
        },
        "content": "* Can type fast"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "carrein"
        },
        "content": "* Prefers typing over mouse input"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "carrein"
        },
        "content": "* Is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "carrein"
        },
        "content": "*Value proposition*: Edit photos quicker and more intuitively than a typical mouse/GUI driven app. Also provides an easy way to view tagged metadata on images."
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "itszp"
        },
        "content": "// tag::UserStories[]"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "itszp"
        },
        "content": "This section lists the user stories behind the features of our application."
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "itszp"
        },
        "content": "Priorities:"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "itszp"
        },
        "content": "* `* * *` -- High (must have)"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "itszp"
        },
        "content": "* `* *` -- Medium (nice to have)"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "itszp"
        },
        "content": "* `*` -- Low (unlikely to have)"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "itszp"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"10%,\u003c70%,\u003c20%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "itszp"
        },
        "content": "|Priority |User Story| Feature Implemented"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "itszp"
        },
        "content": "|`* * *` |As a new user, I want to see usage instructions so that I can refer to instructions when I forget how to use the application. | `help`"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "itszp"
        },
        "content": "|`* * *` |As a user, I want to import my image so that I can store a copy of the image in the application.| `import`"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "itszp"
        },
        "content": "|`* * *` |As a user, I want to open an image stored in the application for editing.| `open`"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "itszp"
        },
        "content": "|`* * *` |As a user, I want to adjust the brightness of my image so that I can make it brighter or darker.| `brightness`"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "itszp"
        },
        "content": "|`* * *` |As a user, I want to apply a black and white filter to my photo for aesthetics.| `brightness`"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "itszp"
        },
        "content": "|`* * *` |As a user, I want to adjust the contrast of my image. | `constrast`"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "itszp"
        },
        "content": "|`* * *` |As a user, I want to crop my image so that I can trim it into my desired dimensions.| `crop`"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "itszp"
        },
        "content": "|`* * *` |As a user, I want to resize my image. | `resize`"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "itszp"
        },
        "content": "|`* * *` |As a user, I want to rotate my image so that I can change its orientation.| `rotate`"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "itszp"
        },
        "content": "|`* * *` |As a user, I want to undo and redo my edits so that I can revert or recover my changes. |`undo`, `redo`"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "itszp"
        },
        "content": "|`* * *` |As a user, I want to save my image so that I can have a new image or continue editing it the future.| `save`"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "itszp"
        },
        "content": "|`* * *` |As a user, I want to export my image so that I can save my edited images to my computer.| `export`"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "itszp"
        },
        "content": "|`* *` |As a frequent user, I want to create presets of edits so that I can easily apply a set of edits to my photos.| `savepreset`, `setpreset`"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "itszp"
        },
        "content": "|`* *` |As a user, I want to list the names of the images imported into the application so that I know what images are currently stored inside.| `listfiles`"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "itszp"
        },
        "content": "// end::UserStories[]"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003d\u003d\u003d Use case: View Image"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "carrein"
        },
        "content": "1. User import an image."
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "carrein"
        },
        "content": "2. User opens the image."
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "carrein"
        },
        "content": "3. Image is displayed on GUI."
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "randytqw"
        },
        "content": "+"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "randytqw"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "randytqw"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "carrein"
        },
        "content": "* 1a. The file path does not contain an image. FomoFoto throws an error message."
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "randytqw"
        },
        "content": "+"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "randytqw"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "carrein"
        },
        "content": "* 2a. The image name does not exist in Album. FomoFoto throws an error message."
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "randytqw"
        },
        "content": "+"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "carrein"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003d\u003d\u003d Use case: View Metadata"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "carrein"
        },
        "content": "1. User import an image."
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "carrein"
        },
        "content": "2. User opens the image."
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "carrein"
        },
        "content": "3. Image is displayed on GUI."
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "carrein"
        },
        "content": "4. Switch tab to view Metadata."
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "randytqw"
        },
        "content": "+"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "carrein"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "carrein"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "carrein"
        },
        "content": "* 1a. The file path does not contain an image. FomoFoto throws an error message."
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "carrein"
        },
        "content": "+"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "carrein"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "carrein"
        },
        "content": "* 2a. The image name does not exist in Album. FomoFoto throws an error message."
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "carrein"
        },
        "content": "+"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "carrein"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003d\u003d\u003d Use case: Edit Image"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "carrein"
        },
        "content": "1. User import an image."
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "carrein"
        },
        "content": "2. User opens the image."
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "carrein"
        },
        "content": "3. Image is displayed on GUI."
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "carrein"
        },
        "content": "4. User applies an image filter."
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "carrein"
        },
        "content": "* 1a. The file path does not contain an image. FomoFoto throws an error message."
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "carrein"
        },
        "content": "* 2a. The image name does not exist in Album. FomoFoto throws an error message."
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "carrein"
        },
        "content": "+"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "carrein"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "carrein"
        },
        "content": "* 4a. The arguments for filters are invalid. FomoFoto throws an error message."
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "carrein"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003d\u003d\u003d Use case: Export Image"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "carrein"
        },
        "content": "1. User saves the image to Album."
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "carrein"
        },
        "content": "2. User export image from Album."
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "carrein"
        },
        "content": "* 1a. The image name does not exist in Album. FomoFoto throws an error message."
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "carrein"
        },
        "content": "* 2a. The file path for export is invalid. FomoFoto throws an error message."
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "carrein"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "carrein"
        },
        "content": ".  Should be able to hold up to 100 images without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "carrein"
        },
        "content": ". Initial launch."
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "carrein"
        },
        "content": ".. Download the jar file and copy into an empty directory."
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "carrein"
        },
        "content": "   Expected: Shows the GUI with an empty Album. The window size may not be optimum."
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "carrein"
        },
        "content": ". Saving window preferences."
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "carrein"
        },
        "content": "   Expected: The most recent window size and the location is retained."
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "carrein"
        },
        "content": ". Shutdown and relaunch."
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "carrein"
        },
        "content": ".. Shutdown the application by typing `exit` or closing the window."
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "carrein"
        },
        "content": ".. Relaunch the jar file."
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "carrein"
        },
        "content": "   Expected: Shows the GUI with any previously opened images in the Album."
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003d\u003d\u003d Importing an image"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "carrein"
        },
        "content": ". Prerequisites: Given FILEPATH should be an image or a directory with images."
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "carrein"
        },
        "content": ". Import a sample list of images."
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "carrein"
        },
        "content": ".. Enter `import sample` +"
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "carrein"
        },
        "content": "   Expected: GUI should populate Album Images with a sample list of images."
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "carrein"
        },
        "content": ". Import a single image."
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "carrein"
        },
        "content": ".. Enter `import FILEPATH` +"
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "carrein"
        },
        "content": "   Expected: GUI should populate Album Images with an image from the indicated file path."
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "carrein"
        },
        "content": ". Import a directory."
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "carrein"
        },
        "content": ".. Enter `import FILEPATH` +"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "carrein"
        },
        "content": "   Expected: GUI should populate Album Images with images from an indicated directory."
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003d\u003d\u003d Opening an image"
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "carrein"
        },
        "content": ". Prerequisites: An album should contain at least a single imported image."
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "carrein"
        },
        "content": ". Open an image from Album."
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "carrein"
        },
        "content": ".. Enter `open IMAGE_NAME` +"
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "carrein"
        },
        "content": "   Expected: GUI should open and display image from Album."
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003d\u003d\u003d Editing an image"
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "carrein"
        },
        "content": ". Prerequisites: An image should be opened."
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "carrein"
        },
        "content": ". Apply contrast on an opened image."
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "carrein"
        },
        "content": ".. Enter `contrast` +"
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "carrein"
        },
        "content": "   Expected: GUI should apply the edit to the opened image with default contrast value."
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003d\u003d\u003d Undoing an edit"
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "carrein"
        },
        "content": ". Prerequisites: An image should at least one edit applied to it."
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "carrein"
        },
        "content": ". Undo a previously applied edit."
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "carrein"
        },
        "content": ".. Enter `undo` +"
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "carrein"
        },
        "content": "   Expected: GUI should refresh the opened image to its previous state."
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003d\u003d\u003d Saving an image"
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "carrein"
        },
        "content": ". Prerequisites: An image should be opened."
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "carrein"
        },
        "content": ". Save an opened image."
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "carrein"
        },
        "content": ".. Enter `save` +"
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "carrein"
        },
        "content": "   Expected: GUI should save the currently opened image as an image in Album with the same name."
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003d\u003d\u003d Export an image"
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "carrein"
        },
        "content": ". Prerequisites: Given FILEPATH should be a valid, writable path. The Album should contain at least a single imported image."
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "carrein"
        },
        "content": ". Export an image from Album."
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "carrein"
        },
        "content": ".. Enter `export f/IMAGE_NAME d/DIRECTORY_NAME` +"
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "carrein"
        },
        "content": "   Expected: GUI should export the selected Album image to the target directory."
      }
    ],
    "authorContributionMap": {
      "itszp": 162,
      "kayheen": 200,
      "carrein": 249,
      "randytqw": 48,
      "-": 574,
      "thamsimun": 224
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "\u003d FomoFoto"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S2-W14-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "By: `W14-2`      Since: `Feb 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": "FomoFoto is an image processing software suite written in Java. This application is optimised for users who are *familiar with the Command Line Interface (CLI)*, while providing a *Graphical User Interface (GUI)* for easy reference. The application is optimized for users who prefer text-based instructions."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "For new users, jump to \u003c\u003cQuick Start\u003e\u003e for an overview on how to use FomoFoto and view the tools available."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": "// tag::QuickStart[]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": "System Requirements:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": "* *Windows 10 or newer / OS X 10.8 or newer.*"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "* *Java 9 or newer.*"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": "Follow the steps below to set up your computer to run FomoFoto:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrein"
        },
        "content": ".  Ensure your system meets the system requirements."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrein"
        },
        "content": ".  Download the latest FomoFoto.jar https://github.com/CS2103-AY1819S2-W14-2/main/releases[here]."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrein"
        },
        "content": ".  Copy the JAR to the folder you want to use as the home folder for your FomoFoto application."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": ".  Double-click the JAR to start the application. The Graphical User Interface should appear in a few seconds."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kayheen"
        },
        "content": ".Home Page of FomoFoto"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kayheen"
        },
        "content": "image::Ui.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "carrein"
        },
        "content": ".  You have just successfully setup FomoFoto on your device. To see the command available in FomoFoto, refer to \u003c\u003cFeatures\u003e\u003e for details of each command. A step-by-step walkthrough of FomoFoto is available in the next section: \u003c\u003cA Walk Through\u003e\u003e."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrein"
        },
        "content": "// end::QuickStart[]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kayheen"
        },
        "content": "\u003d\u003d A Walk Through"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kayheen"
        },
        "content": "// tag::AWalkThrough[]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itszp"
        },
        "content": "Let\u0027s start on our image editing journey. In this walkthrough, we will be demonstrating some simple commands to edit a sample image."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "carrein"
        },
        "content": ".  Head over to this https://twistedsifter.files.wordpress.com/2012/03/squirrel-photobomb-banff.jpg[link] to get a suggested sample image to start from."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kayheen"
        },
        "content": ".  Save the image in any desired folder you like on your device, like your Pictures folder for example. Name your image *squirrel.jpg*."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kayheen"
        },
        "content": ".  Start FomoFoto by referring to \u003c\u003cQuick Start\u003e\u003e."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kayheen"
        },
        "content": ".  Open the folder that the image file is stored in. Then, to get the file path of the image:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kayheen"
        },
        "content": "* In Windows: Hold on to the kbd:[Shift] key and *right click* on your image file. Click the option *Copy path*."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* In Mac: Go to terminal and navigate to your image file. Type \u0027pwd\u0027 to get the file path to your image file and copy paste."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itszp"
        },
        "content": ".  Go back to the FomoFoto application. Import the image into FomoFoto by typing as follows:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kayheen"
        },
        "content": ".Import Command"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kayheen"
        },
        "content": "image::import.PNG[width\u003d\"912\"]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "carrein"
        },
        "content": ".  Paste the file path of the image you would like to import."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itszp"
        },
        "content": "* In Windows: Remove the kbd:[\"] and kbd:[\"] signs at the two ends of the file path."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itszp"
        },
        "content": ".  Ensure your final command looks similar to the figure below (file path may differ):"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kayheen"
        },
        "content": "+"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kayheen"
        },
        "content": ".Import with Filepath"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kayheen"
        },
        "content": "image::importCommand.PNG[width\u003d\"915\"]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kayheen"
        },
        "content": "+"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kayheen"
        },
        "content": ".  Press kbd:[Enter] to execute the import command. Your image should be now displayed on the Album tab on the FomoFoto application as shown in the figure below."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kayheen"
        },
        "content": "+"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kayheen"
        },
        "content": ".Import Success"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kayheen"
        },
        "content": "image::importSuccess.PNG[width\u003d\"917\"]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kayheen"
        },
        "content": "+"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kayheen"
        },
        "content": ".  Open the imported image in FomoFoto by typing as follows:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kayheen"
        },
        "content": "+"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kayheen"
        },
        "content": ".Open Command"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kayheen"
        },
        "content": "image::open.PNG[width\u003d\"917\"]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kayheen"
        },
        "content": "+"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kayheen"
        },
        "content": ".  Press kbd:[Enter] to execute the open command. Your image should be now displayed on the FomoFoto application as shown in the figure below."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kayheen"
        },
        "content": "+"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kayheen"
        },
        "content": ".Open Success"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kayheen"
        },
        "content": "image::openImage.PNG[width\u003d\"917\"]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kayheen"
        },
        "content": "+"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itszp"
        },
        "content": ".  Increase the brightness of the image by typing the following command: `brightness 2.0`. This doubles the brightness of the image."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kayheen"
        },
        "content": "+"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kayheen"
        },
        "content": ".Brightness Command"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kayheen"
        },
        "content": "image::brightnessCommand.PNG[width\u003d\"915\"]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kayheen"
        },
        "content": "+"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "itszp"
        },
        "content": ".  Press kbd:[Enter]. Your image should be brighter as shown in the figure below."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kayheen"
        },
        "content": "+"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kayheen"
        },
        "content": ".Brightness Success"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kayheen"
        },
        "content": "image::brightnessSuccess.PNG[width\u003d\"917\"]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kayheen"
        },
        "content": "+"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "carrein"
        },
        "content": ".  Crop your image by typing the following command: `crop 310 250 140 200`. Press kbd:[Enter]. Your image should look similar to the figure below."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kayheen"
        },
        "content": "+"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kayheen"
        },
        "content": ".Crop Success"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kayheen"
        },
        "content": "image::cropSuccess.PNG[width\u003d\"918\"]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kayheen"
        },
        "content": "+"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "carrein"
        },
        "content": ".  Save your edits by typing the command: `save`."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kayheen"
        },
        "content": "// end::AWalkThrough[]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "itszp"
        },
        "content": "// tag::FeaturesHeader[]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "carrein"
        },
        "content": "This section describes all the commands available in FomoFoto. It provides a short description of what each command does, their formats as well as examples of how to use them. The commands are listed in alphabetical order."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "itszp"
        },
        "content": "The following styles are used to describe the format of the commands."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "itszp"
        },
        "content": "* Words in `UPPER_CASE` are to be replaced with what the text specifies. +"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "itszp"
        },
        "content": "e.g. `open FILENAME`: `FILENAME` is to be replaced with the name of the file that the user wants to work on such as `open myImage.png`."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "itszp"
        },
        "content": "* Words in square brackets are optional values. +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "itszp"
        },
        "content": "e.g. `brightness [BRIGHTNESS_RATIO]`: `BRIGHTNESS_RATIO` can be omitted. Both `brightness` and `brightness 0.9` are accepted."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "itszp"
        },
        "content": "// end::FeaturesHeader[]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "// tag::BlackWhiteCommand[]"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "itszp"
        },
        "content": "\u003d\u003d\u003d Black and White Filter : `bw`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Applies a black and white filter on the opened image based on an integer"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "threshold value. If the threshold value is not specified, the black and white filter will use a preset threshold value of 127. Pixels in the image lighter than the threshold value will become white and pixels in the image darker than the threshold value will become black. The higher the threshold value, the larger the proportion of black and the smaller the proportion of white.  +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Format: `bw [THRESHOLD_VALUE]`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* `bw` (threshold value preset to 127)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* `bw 130`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "// end::BlackWhiteCommand[]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "// tag::BrightnessCommand[]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "itszp"
        },
        "content": "\u003d\u003d\u003d Brightness: `brightness`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Adjusts the brightness of the opened image based on a decimal value. If the brightness value is not specified, a preset decimal value of 1.1 will be used. Any positive decimal value that is less than 1 (e.g. 0.5) will reduce the brightness of the image while any decimal value that is above 1 (e.g. 1.9) will increase the brightness of the image. Negative decimal value will not be accepted. +"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Format: `brightness [BRIGHTNESS_VALUE]`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* `brightness` (brightness decimal value is preset to 1.1 which increases the brightness slightly)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* `brightness 1.9` (increases brightness)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* `brightness 0.3` (reduces brightness)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "// end::BrightnessCommand[]"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "carrein"
        },
        "content": "// tag::ClearCommand[]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003d\u003d\u003d Clear Album: `clear`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Clears all images imported into the Album. +"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "carrein"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "carrein"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "carrein"
        },
        "content": "Clear does not remove the image currently being edited i.e. Images opened with the `open` command."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "// end::ClearCommand[]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "// tag::ContrastCommand[]"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "itszp"
        },
        "content": "\u003d\u003d\u003d Contrast: `contrast`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Adjusts the contrast of the opened image based on a decimal value. If the contrast value is not specified, a preset decimal value of 1.1 will be used. Any positive decimal value that is lower than 1 (e.g. 0.5) will reduce the contrast of the image while any decimal value that is above 1 (e.g. 1.9) will increase the contrast of the image. Negative decimal value will not be accepted. +"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Format: `contrast [CONTRAST_VALUE]`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* `contrast` (contrast decimal value is preset to 1.1 which increases the contrast slightly)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* `contrast 1.4` (increases contrast)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* `contrast 0.3` (reduces contrast)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "// end::ContrastCommand[]"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kayheen"
        },
        "content": "\u003d\u003d\u003d Crop an Image : `crop`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kayheen"
        },
        "content": "// tag::CropCommand[]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kayheen"
        },
        "content": "Crops an image based on the given top left-hand corner coordinates, width and height of final cropped image wanted. +"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Format: `crop X_POINTCOORD Y_POINTCOORD WIDTH HEIGHT`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kayheen"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kayheen"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kayheen"
        },
        "content": "The point coordinates must be separated by a space each."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kayheen"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kayheen"
        },
        "content": "* `crop 2 3 500 500`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kayheen"
        },
        "content": "// end::CropCommand[]"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "\u003d\u003d\u003d Exit the Program : `exit`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "itszp"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "itszp"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "\u003d\u003d\u003d Export edited Image : `export`"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "randytqw"
        },
        "content": "Exports the edited image into the specified Directory +"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "randytqw"
        },
        "content": "Format: `export f/FILENAME d/DIRECTORY`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "randytqw"
        },
        "content": "* `export f/newImage.jpg d/C:\\Users\\randy\\Desktop`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "\u003d\u003d\u003d Help View: `help`"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "itszp"
        },
        "content": "Displays help view to user."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "itszp"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "carrein"
        },
        "content": "// tag::Import[]"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "\u003d\u003d\u003d Import an Image : `import`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "carrein"
        },
        "content": "Imports images to FomoFoto\u0027s Album from a specified file path or a folder. +"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "itszp"
        },
        "content": "Format: `import FILEPATH`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "carrein"
        },
        "content": "Example of single file path import:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "carrein"
        },
        "content": "* `import C:\\Users\\Addison\\Desktop\\sample.jpg`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "carrein"
        },
        "content": "* `import C:\\Home\\sample.png`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "carrein"
        },
        "content": "Example of folder import:"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "carrein"
        },
        "content": "* `import C:\\Users\\Addison\\Desktop`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "carrein"
        },
        "content": "* `import C:\\Home`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "carrein"
        },
        "content": "For folder import, invalid files are skipped and only valid images will be imported."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "carrein"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "carrein"
        },
        "content": "Images should be of the following formats: `bmp`, `jpg` , `jpeg`, `png`, `tif`, `tiff` or `gif`. Images with `tif` or `tiff` formats are not rendered on screen due to a bug with Java but edits made will still be applied."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "carrein"
        },
        "content": "Additionally, images must also adhere to the following additional requirements:"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "carrein"
        },
        "content": ". Not be hidden or prepended by a `.` dot identifier."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "carrein"
        },
        "content": ". Not be over 10MB in size."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "carrein"
        },
        "content": ". Not have the same name as an existing image in the Album."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "carrein"
        },
        "content": "// end::Import[]"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "itszp"
        },
        "content": "\u003d\u003d\u003d List Files: `listfiles`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "itszp"
        },
        "content": "// tag::UGListFiles[]"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "itszp"
        },
        "content": "Lists all the names of the files in the album. +"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "itszp"
        },
        "content": "Format: `listfiles`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "itszp"
        },
        "content": "// end::UGListFiles[]"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "\u003d\u003d\u003d Open an Image : `open`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "itszp"
        },
        "content": "// tag::UGOpen[]"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "itszp"
        },
        "content": "Opens an image from the album for editing. +"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Format: `open FILENAME`"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "itszp"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "itszp"
        },
        "content": "* `open sample.jpg`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "itszp"
        },
        "content": "// end::UGOpen[]"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "randytqw"
        },
        "content": "//tag::Redo[]"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "\u003d\u003d\u003d Redo Edit Steps : `redo`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "itszp"
        },
        "content": "Returns to a previously undone state. +"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kayheen"
        },
        "content": "Redoable commands: those commands that modify the image (`rotate`, `crop`, `resize`, `brightness`, `contrast` and `bw`)."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kayheen"
        },
        "content": "* `rotate 180` +"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "`brightness` +"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "`undo` (reverses the `brightness` command) +"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "`redo` (runs `brightness` again)"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* `contrast 0.3` +"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kayheen"
        },
        "content": "`crop 2 3 500 500` +"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kayheen"
        },
        "content": "`undo` (reverses the `crop 2 3 500 500` command +"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "`undo` (reverses the `contrast 0.3`) +"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "`redo` (runs `contrast 0.3` command again) +"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kayheen"
        },
        "content": "`redo` (runs `crop 2 3 500 500` command again)"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "randytqw"
        },
        "content": "// end::Redo[]"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kayheen"
        },
        "content": "\u003d\u003d\u003d Rotate an Image : `rotate`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kayheen"
        },
        "content": "// tag::RotateCommand[]"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "carrein"
        },
        "content": "Rotates the image by a given degree provided by the user. Only 90, 180 or 270 degrees of rotation is allowed. +"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kayheen"
        },
        "content": "Format: `rotate ANGLE`"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kayheen"
        },
        "content": "* `rotate 90`"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kayheen"
        },
        "content": "// end::RotateCommand[]"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kayheen"
        },
        "content": "\u003d\u003d\u003d Resize an Image : `resize`"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kayheen"
        },
        "content": "// tag::ResizeCommand[]"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kayheen"
        },
        "content": "Resizes the image to a given width and height provided by the user. +"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kayheen"
        },
        "content": "Format: `resize WIDTH HEIGHT`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kayheen"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kayheen"
        },
        "content": "* `resize 100 200`"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kayheen"
        },
        "content": "// end::ResizeCommand[]"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "itszp"
        },
        "content": "\u003d\u003d\u003d Save Image : `save`"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "itszp"
        },
        "content": "// tag::UGSave[]"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "itszp"
        },
        "content": "Applies your edits and saves the image. +"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "itszp"
        },
        "content": "Format: `save [FILENAME]`"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "itszp"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "itszp"
        },
        "content": "* `save`"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "itszp"
        },
        "content": "* `save newname.jpg`"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "itszp"
        },
        "content": "For a file name to be valid, it must end with either of the following: `.jpg`, `.png`, `.gif`, `.bmp`, `.jpeg`, `.tif` or `tiff`."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "itszp"
        },
        "content": "[[invalid_save_name]]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "itszp"
        },
        "content": ".Invalid Save Name"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "itszp"
        },
        "content": "image::ugInvalidsave.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "itszp"
        },
        "content": "[[valid_save_name]]"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "itszp"
        },
        "content": ".Valid Save Name"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "itszp"
        },
        "content": "image::ugValidsave.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "itszp"
        },
        "content": "\u003c\u003cinvalid_save_name\u003e\u003e shows an example of how FomoFoto does not allow saving with invalid names. Ensure that your file name is valid before saving. There should be a message to indicate that the save is successful as shown in \u003c\u003cvalid_save_name\u003e\u003e . To overwrite the original image, simply use `save` without the file name."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "itszp"
        },
        "content": "// end::UGSave[]"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "// tag::SavePreset[]"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "\u003d\u003d\u003d Save Preset: `savepreset`"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Saves a list of commands that were used to edit the opened image under a specified name so that you can apply them on other images in the future. The specified name given must not be used before. +"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Format: `savepreset PRESETNAME`"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* `rotate 180` +"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "`brightness 1.3` +"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "`savepreset preset1` (saves `rotate 180` and `brightness 1.3` in a list of commands that can be used on other images)"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "// end::SavePreset[]"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "// tag::SetPreset[]"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "\u003d\u003d\u003d Set Preset: `setpreset`"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Applies the list of commands saved under the specified preset name on the opened image. +"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Format: `setpreset PRESETNAME`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* `rotate 180` +"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "`brightness 1.3` +"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "`savepreset preset1` (saves `rotate 180` and `brightness 1.3` in a list of commands that can be used on other images) +"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "`open newImage.jpg`  (opens a new image to edit on) +"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "`setpreset preset1`  (applies the list of commands which consists of `rotate 180` and `brightness 1.3` on the newly opened image)"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "// end::SetPreset[]"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "carrein"
        },
        "content": "// tag::Tab[]"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003d\u003d\u003d Tab Switching: `tab`"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "carrein"
        },
        "content": "Cycle between available tabs in the side *Information Panel*. +"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "carrein"
        },
        "content": "Format: `tab`"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "carrein"
        },
        "content": "The three available tabs are listed below:"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "carrein"
        },
        "content": ". Album Images"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "carrein"
        },
        "content": "- Displays all images currently opened in the Album and available for editing."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "carrein"
        },
        "content": ". EXIF Profile"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "carrein"
        },
        "content": "- Displays all ancillary tags attached to the currently opened"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "carrein"
        },
        "content": "image such as metadata information like *Date and Time* and *Copyright information*."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "carrein"
        },
        "content": ". Command History"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "carrein"
        },
        "content": "- Display all *Image Transformation* and *Image Filters* applied to the currently opened image."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "carrein"
        },
        "content": "// end::Tab[]"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "kayheen"
        },
        "content": "// tag::Undo[]"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "\u003d\u003d\u003d Undo Edit Steps : `undo`"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "kayheen"
        },
        "content": "Goes back to the previous state of the image. +"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "kayheen"
        },
        "content": "Undoable commands: those commands that modify the image (`rotate`, `crop`, `resize`, `brightness`, `contrast`, `wm` and `bw`)."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "randytqw"
        },
        "content": "// end::Undo[]"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "kayheen"
        },
        "content": "\u003d\u003d\u003d WaterMark : `wm`"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "kayheen"
        },
        "content": "// tag::WaterMarkCommand[]"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "kayheen"
        },
        "content": "Adds a watermark to the image with a (C) at the start of the input message. Messages can contain spaces. Should the message be too long to fit within the width of the image, the message will be cut off. +"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "kayheen"
        },
        "content": "Format: `wm MESSAGE`"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "kayheen"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "kayheen"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "kayheen"
        },
        "content": "Each image can only have one watermark."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "kayheen"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "kayheen"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "kayheen"
        },
        "content": "* `wm FomoFoto`"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "kayheen"
        },
        "content": "* `wm Done By FomoFoto`"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "kayheen"
        },
        "content": "// end::WaterMarkCommand[]"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "randytqw"
        },
        "content": "// tag::UpcomingFeatures[]"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "randytqw"
        },
        "content": "\u003d\u003d Upcoming Features (in v2.0)"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "randytqw"
        },
        "content": "\u003d\u003d\u003d Layer"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "randytqw"
        },
        "content": "Format: `layer add (layer name)` -\u003e Creates a new layer for the user to work on."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "randytqw"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "randytqw"
        },
        "content": "* `layer add BW-layer` adds a new layer with name BW-layer."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "randytqw"
        },
        "content": "Format: `layer select (layer name)` -\u003e Selects the layer the user wants to work on."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "randytqw"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "randytqw"
        },
        "content": "* `layer select BW-layer` selects the BW-layer."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "randytqw"
        },
        "content": "Format: `layer delete (layer name)` -\u003e deletes the layer with input name."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "randytqw"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "randytqw"
        },
        "content": "* `layer delete (BW-layer)` -\u003e deletes the BW-layer"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "randytqw"
        },
        "content": "This command is not undo-able and transformations on each layer do not affect other layers."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "randytqw"
        },
        "content": "\u003d\u003d\u003d Ruler"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "randytqw"
        },
        "content": "Format: `ruler [ON|OFF]` -\u003e Toggles a ruler that surrounds the displayed image. This will help you in estimating the number of pixels to move when using `crop` or resizing objects."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "randytqw"
        },
        "content": "// end::UpcomingFeatures[]"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "// tag::CommandSummary[]"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "itszp"
        },
        "content": "Below is a quick summary of all the commands available in FomoFoto."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* *Black/White* `bw [THRESHOLD_VALUE]` +"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "e.g. `bw 127` +"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* *Brightness* `brightness [BRIGHTNESS_VALUE]` +"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "e.g. `brightness 0.8` +"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "kayheen"
        },
        "content": "* *Clear* `clear` +"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* *Contrast* `contrast [CONTRAST_VALUE]` +"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "e.g. `contrast 1.9` +"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* *Crop* `crop X_POINTCOORD Y_POINTCOORD W_WIDTH H_HEIGHT` +"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "kayheen"
        },
        "content": "e.g. `crop 2 4 500 500`"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "itszp"
        },
        "content": "* *Exit* `exit` +"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "randytqw"
        },
        "content": "* *Export* `export f/FILENAME d/DIRECTORY` +"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "randytqw"
        },
        "content": "e.g. `export f/newImage.jpg d/C:\\Users\\randy\\Desktop`"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "itszp"
        },
        "content": "* *Help* `help` +"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "itszp"
        },
        "content": "* *Import* `import FILEPATH` +"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "e.g. `import Users/Fomo/Pictures/sample.jpg` +"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "itszp"
        },
        "content": "* *List Files* `listfiles` +"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "itszp"
        },
        "content": "* *Open* `open FILENAME` +"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "itszp"
        },
        "content": "e.g. `open sample.jpg` +"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* *Redo* `redo` +"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "kayheen"
        },
        "content": "* *Rotate* `rotate ANGLE` +"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "kayheen"
        },
        "content": "e.g. `rotate 270` +"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "kayheen"
        },
        "content": "* *Resize* `resize WIDTH HEIGHT` +"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "kayheen"
        },
        "content": "e.g. `resize 100 200` +"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "itszp"
        },
        "content": "* *Save* `save [FILENAME]` +"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "itszp"
        },
        "content": "e.g. `save MyNewImage.png` +"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* *Save Preset* `savepreset PRESETNAME` +"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "e.g. `savepreset preset1`"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* *Set Preset* `setpreset PRESETNAME` +"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "e.g. `setpreset preset1`"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "kayheen"
        },
        "content": "* *Tab* `tab` +"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "itszp"
        },
        "content": "* *Undo* `undo` +"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "kayheen"
        },
        "content": "* *WaterMark* `wm MESSAGE` +"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "kayheen"
        },
        "content": "e.g. `wm FomoFoto`"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "// end::CommandSummary[]"
      }
    ],
    "authorContributionMap": {
      "itszp": 77,
      "kayheen": 114,
      "carrein": 64,
      "randytqw": 25,
      "-": 133,
      "thamsimun": 96
    }
  },
  {
    "path": "docs/team/carrein.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Addison Ho\u0027s Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Title: FomoFoto"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Overview"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": "FomoFoto is a robust yet simple image-editing tool. Users interact with the application through worded commands from their keyboard and receive visual feedback from it through the displayed image on the application. +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": "Unlike other heavy image editors, FomoFoto has a gentle learning curve, removing clutter while still retaining essential features. All features and their implementations are well documented in guides for both users and developers respectively."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003d\u003d\u003d\u003d Major Enhancements:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "1. Importing of images."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": "** *What it does:*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "Allow users to import images into FomoFoto for editing. Imported images are added to an Album in FomoFoto that can be opened for edits such as Image Transformation and Filters."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": "** *Justification:*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "This feature is core to the operation of FomoFoto. Without the ability to import images, an image editor cannot function properly since there is no image to modify."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": "** *Highlights:*"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": "This enhancement is tough to implement as it requires many checks to ensure the image is valid. Images which do not fit the rule set such as wrong name formats are rejected. Users are also given the flexibility to import a single image or a directory."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": "2. Overall user interaction and interface/experience design."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": "** *What it does:*"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "FomoFoto has an intuitive, human-centric design. Users are able to see the images they are editing, the information of images in the Album, their details and all edits applied."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": "** *Justification:* A good user interface facilitates easy usage of the editor. Users are able to get a good overview of the edits they are doing simply by observing the image and information available on the screen. This feature comprises of five components:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": "*** `Initial Panel` - Contains a quick start message on FomoFoto\u0027s first start, giving users a high-level overview of the commands available."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrein"
        },
        "content": "*** `Image Panel` - Displays the image currently opened for editing."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrein"
        },
        "content": "*** `Album Images Panel` - Displays all images imported to FomoFoto\u0027s Album."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrein"
        },
        "content": "*** `EXIF Profile Panel` - Displays core details such as Time and Location Taken about the opened image shown on the Image Panel."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": "*** `Command History Panel` - Displays all previously applied edits on the opened image shown on the Image Panel."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrein"
        },
        "content": "** *Highlights:* This enhancement is core to the operation of FomoFoto. Since we are dealing with images, it is paramount to show the item that is being worked on. Without it, there is no visual cue if the edits being carried out is accurate. Careful attention has been paid to ensure images are aligned accurately with a clean colour scheme."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003d\u003d\u003d\u003d Minor Enhancements:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "carrein"
        },
        "content": "1. Tab Command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrein"
        },
        "content": "** Added a Tab Command that allows the user to interact with the Information Panel without using a mouse."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "carrein"
        },
        "content": "2. Inclusion of `sample` image folder."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "carrein"
        },
        "content": "** Added a folder containing a list of valid and invalid images. These images can be used for command and feature testing."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "carrein"
        },
        "content": "** Example of sample images:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "carrein"
        },
        "content": "*** `validJPGTest.jpg`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "carrein"
        },
        "content": "*** `invalidPDFTest.pdf`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "carrein"
        },
        "content": "3. Image and Album classes."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "carrein"
        },
        "content": "** Breaks down imported images in FomoFoto to an extensible Image class which is added to an Album. This ensures all images are valid and allows the creation of other commands by tapping on Album\u0027s methods."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003d\u003d\u003d\u003d Code Contributed:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "carrein"
        },
        "content": "* https://github.com/CS2103-AY1819S2-W14-2/main/commits?author\u003dcarrein[List of commits]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "carrein"
        },
        "content": "* https://nus-cs2103-ay1819s2.github.io/cs2103-dashboard/#search\u003dcarrein[Project Code Dashboard]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003d\u003d\u003d Other Contributions"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003d\u003d\u003d\u003d Project Management:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "carrein"
        },
        "content": "*** Managed 2 version releases on GitHub: +"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "carrein"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-2/main/releases/tag/v1.1[v1.1],"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "carrein"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-2/main/releases/tag/v1.3[v1.3]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003d\u003d\u003d\u003d Enhancements to Existing Features:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "carrein"
        },
        "content": "*** Additional unit tests for existing features to increase overall coverage: +"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "carrein"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-2/main/issues/187[#187], https://github.com/CS2103-AY1819S2-W14-2/main/issues/193[#193], https://github.com/CS2103-AY1819S2-W14-2/main/issues/230[#230], https://github.com/CS2103-AY1819S2-W14-2/main/issues/236[#236]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003d\u003d\u003d\u003d Documentation:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "carrein"
        },
        "content": "*** Addendum tweaks to existing contents of the User Guide: https://github.com/CS2103-AY1819S2-W14-2/main/issues/236[#236]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003d\u003d\u003d\u003d Community:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "carrein"
        },
        "content": "*** Core PRs Contributed: +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "carrein"
        },
        "content": "    https://github.com/CS2103-AY1819S2-W14-2/main/issues/10[#10], https://github.com/CS2103-AY1819S2-W14-2/main/issues/56[#56], https://github.com/CS2103-AY1819S2-W14-2/main/issues/75[#75], https://github.com/CS2103-AY1819S2-W14-2/main/issues/87[#87], https://github.com/CS2103-AY1819S2-W14-2/main/issues/105[#105], https://github.com/CS2103-AY1819S2-W14-2/main/issues/111[#111], https://github.com/CS2103-AY1819S2-W14-2/main/issues/119[#119], https://github.com/CS2103-AY1819S2-W14-2/main/issues/125[#125], https://github.com/CS2103-AY1819S2-W14-2/main/issues/156[#156], https://github.com/CS2103-AY1819S2-W14-2/main/issues/163[#163], https://github.com/CS2103-AY1819S2-W14-2/main/issues/193[#193], https://github.com/CS2103-AY1819S2-W14-2/main/issues/195[#195], https://github.com/CS2103-AY1819S2-W14-2/main/issues/202[#202], https://github.com/CS2103-AY1819S2-W14-2/main/issues/203[#203],"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "carrein"
        },
        "content": " https://github.com/CS2103-AY1819S2-W14-2/main/issues/215[#215], https://github.com/CS2103-AY1819S2-W14-2/main/issues/239[#239],"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "carrein"
        },
        "content": " https://github.com/CS2103-AY1819S2-W14-2/main/issues/246[#246]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "carrein"
        },
        "content": "*** Core PRs Reviewed: +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "carrein"
        },
        "content": "    https://github.com/CS2103-AY1819S2-W14-2/main/issues/45[#45], https://github.com/CS2103-AY1819S2-W14-2/main/issues/56[#56], https://github.com/CS2103-AY1819S2-W14-2/main/issues/72[#72], https://github.com/CS2103-AY1819S2-W14-2/main/issues/75[#75], https://github.com/CS2103-AY1819S2-W14-2/main/issues/84[#84], https://github.com/CS2103-AY1819S2-W14-2/main/issues/87[#87], https://github.com/CS2103-AY1819S2-W14-2/main/issues/157[#157], https://github.com/CS2103-AY1819S2-W14-2/main/issues/194[#194]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "carrein"
        },
        "content": "*** Core Issues Opened: +"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "carrein"
        },
        "content": "    https://github.com/CS2103-AY1819S2-W14-2/main/issues/11[#11], https://github.com/CS2103-AY1819S2-W14-2/main/issues/13[#13], https://github.com/CS2103-AY1819S2-W14-2/main/issues/30[#30], https://github.com/CS2103-AY1819S2-W14-2/main/issues/31[#31], https://github.com/CS2103-AY1819S2-W14-2/main/issues/41[#41], https://github.com/CS2103-AY1819S2-W14-2/main/issues/42[#42], https://github.com/CS2103-AY1819S2-W14-2/main/issues/43[#43], https://github.com/CS2103-AY1819S2-W14-2/main/issues/44[#44], https://github.com/CS2103-AY1819S2-W14-2/main/issues/73[#73], https://github.com/CS2103-AY1819S2-W14-2/main/issues/76[#76], https://github.com/CS2103-AY1819S2-W14-2/main/issues/77[#77], https://github.com/CS2103-AY1819S2-W14-2/main/issues/78[#78], https://github.com/CS2103-AY1819S2-W14-2/main/issues/79[#79], https://github.com/CS2103-AY1819S2-W14-2/main/issues/81[#81], https://github.com/CS2103-AY1819S2-W14-2/main/issues/82[#82], https://github.com/CS2103-AY1819S2-W14-2/main/issues/83[#83], https://github.com/CS2103-AY1819S2-W14-2/main/issues/85[#85], https://github.com/CS2103-AY1819S2-W14-2/main/issues/95[#95], https://github.com/CS2103-AY1819S2-W14-2/main/issues/109[#109], https://github.com/CS2103-AY1819S2-W14-2/main/issues/149[#149]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "carrein"
        },
        "content": "*** Core Issues Reviewed: +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "carrein"
        },
        "content": "    https://github.com/CS2103-AY1819S2-W14-2/main/issues/64[#64], https://github.com/CS2103-AY1819S2-W14-2/main/issues/108[#108], https://github.com/CS2103-AY1819S2-W14-2/main/issues/148[#148] https://github.com/CS2103-AY1819S2-W14-2/main/issues/165[#165], https://github.com/CS2103-AY1819S2-W14-2/main/issues/166[#166], https://github.com/CS2103-AY1819S2-W14-2/main/issues/169[#169], https://github.com/CS2103-AY1819S2-W14-2/main/issues/170[#170], https://github.com/CS2103-AY1819S2-W14-2/main/issues/175[#175], https://github.com/CS2103-AY1819S2-W14-2/main/issues/176[#176], https://github.com/CS2103-AY1819S2-W14-2/main/issues/177[#177], https://github.com/CS2103-AY1819S2-W14-2/main/issues/178[#178], https://github.com/CS2103-AY1819S2-W14-2/main/issues/181[#181], https://github.com/CS2103-AY1819S2-W14-2/main/issues/183[#183], https://github.com/CS2103-AY1819S2-W14-2/main/issues/185[#185], https://github.com/CS2103-AY1819S2-W14-2/main/issues/186[#186], https://github.com/CS2103-AY1819S2-W14-2/main/issues/236[#236]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003d\u003d\u003d\u003d Tools:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated TravisCI to the team repo."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated Coveralls to the team repo."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "carrein"
        },
        "content": "*** Added Issue Templates to the team repo."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "carrein"
        },
        "content": "|_The section below showcases my contributions towards the User Guide._"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003d\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "carrein"
        },
        "content": "include::../UserGuide.adoc[tag\u003dQuickStart]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003d\u003d\u003d Import Command"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "carrein"
        },
        "content": "include::../UserGuide.adoc[tag\u003dImport]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003d\u003d\u003d Tab Command"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "carrein"
        },
        "content": "include::../UserGuide.adoc[tag\u003dTab]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "carrein"
        },
        "content": "|_The section below showcases my contributions towards the Developer Guide._"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003d\u003d\u003d Album and Image Class"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "carrein"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dalbumModel]"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003d\u003d\u003d User Interface Overhaul"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "carrein"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dui]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003d\u003d\u003d Import and ImportParser Class"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dimport]"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003d\u003d\u003d Assets and Temp Folder"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "carrein"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dDetailsStorage]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003d\u003d\u003d Additional Work Contributed:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "carrein"
        },
        "content": "* Appendix A, C, D, E and F."
      }
    ],
    "authorContributionMap": {
      "carrein": 93,
      "-": 45
    }
  },
  {
    "path": "docs/team/itszp.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itszp"
        },
        "content": "\u003d Tay Zhan Peng\u0027s Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itszp"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itszp"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itszp"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itszp"
        },
        "content": " This portfolio seeks to document my contributions to our team\u0027s project, FomoFoto."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itszp"
        },
        "content": "\u003d\u003d Project Title: FomoFoto"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itszp"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itszp"
        },
        "content": "My team and I were tasked with enhancing a basic command line Address Book for our software engineering project. We decided to morph the project into an image editor. +"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itszp"
        },
        "content": "FomoFoto is a robust yet simple image-editing tool. Users interact with the application through worded commands from their keyboard, and receive visual feedback from it through the displayed image on the application. +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itszp"
        },
        "content": "Unlike other heavy image editors, FomoFoto has a very gentle learning curve as it abstracts out clutter by providing the more essential features (complex editing can still be done with special commands). The features and implementations are well documented in guides for users and developers respectively."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itszp"
        },
        "content": "In addition, FomoFoto is well-maintained with high reliability and code quality as it is covered by rigorous tests and checks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itszp"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itszp"
        },
        "content": "This section provides a summary of my coding, documentation and other contributions to FomoFoto, our team project."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itszp"
        },
        "content": "\u003d\u003d\u003d *Major Enhancement* -- Added the feature to open an image."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itszp"
        },
        "content": "** _What it does:_ The `open` command allows users to open an image that was previously imported into the album for editing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itszp"
        },
        "content": "** _Why it is important:_ This feature is essential as it enables users to choose which image they want to edit. Upon using the `open` command, the chosen image is displayed prominently in the main window of the application, allowing users to know which image they are about to apply their edits on."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itszp"
        },
        "content": "** _Highlights:_ The `open` command duplicates the opened image so that users are able to recover the original image should they decide to abandon their edits or in the unlikely event of an application crash. Therefore, this enhancement requires in-depth analysis on how the temporary image is stored. When an image is opened, two copies named `ori_img.png` and `temp_img.png` are created in the temporary folder. Subsequent edits will update and overwrite `temp_img.png` while `ori_img.png` is used for `undo` and `redo` operations."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itszp"
        },
        "content": "\u003d\u003d\u003d *Major Enhancement* -- Added the feature to save an image."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itszp"
        },
        "content": "** _What it does:_ The `save` command allows users to apply their edits to the image and save it as a new image."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itszp"
        },
        "content": "** _Why it is important:_ This feature completes the image editor by enabling users to apply their edits permanently onto the image. It also gives users the ability to save their current work and resume editing at another time."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itszp"
        },
        "content": "** _Highlights:_ The `save` command gives users the choice to either save the edited image with a new name or overwrite the original image. To save as a new image, users simply type `save newName.png` and an image named `newName.png` will be created in the album. To overwrite the original image, a simple `save` would suffice. After saving, users may continue to edit the image."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itszp"
        },
        "content": "\u003d\u003d\u003d *Minor Enhancement* -- Added the feature to list file names."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itszp"
        },
        "content": "The `listfiles` command displays all the names of the images in the album. It provides a quick reference to the images so that users may type the name correctly when using `open`."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itszp"
        },
        "content": "\u003d\u003d\u003d *Code Contributed*"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itszp"
        },
        "content": "Here are the code contributions that I have made. [https://github.com/CS2103-AY1819S2-W14-2/main/commits?author\u003ditszp[List of Commits]]  [https://nus-cs2103-ay1819s2.github.io/cs2103-dashboard/#search\u003ditszp[Project Code Dashboard]]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itszp"
        },
        "content": "\u003d\u003d\u003d *Other Contributions*"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itszp"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itszp"
        },
        "content": "*** Managed release `v1.2`, `v1.3`, `v1.3.1` and `v1.4` (4 releases) on GitHub."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itszp"
        },
        "content": "*** Managed labels, milestones and issues for issue tracking on GitHub."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itszp"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itszp"
        },
        "content": "*** Wrote features implemented for the User Guide: https://github.com/CS2103-AY1819S2-W14-2/main/pull/58[#58],"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itszp"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-2/main/pull/142[#142]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itszp"
        },
        "content": "*** Wrote features implemented and User Stories for the Developer Guide: https://github.com/CS2103-AY1819S2-W14-2/main/pull/129[#129],"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itszp"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-2/main/pull/244[#244]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itszp"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itszp"
        },
        "content": "*** Reviewed pull requests:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itszp"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-2/main/pull/39[#39],"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itszp"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-2/main/pull/239[#239],"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itszp"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-2/main/pull/242[#242],"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itszp"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-2/main/pull/247[#247]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itszp"
        },
        "content": "*** Reported bugs and provided solutions to team:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itszp"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-2/main/issues/70[#70],"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itszp"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-2/main/issues/89[#89],"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itszp"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-2/main/issues/93[#93],"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itszp"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-2/main/issues/103[#103],"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itszp"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-2/main/issues/128[#128],"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itszp"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-2/main/issues/159[#159],"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itszp"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-2/main/issues/189[#189]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itszp"
        },
        "content": "*** Raised core issues:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itszp"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-2/main/issues/32[#32],"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itszp"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-2/main/issues/63[#63],"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itszp"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-2/main/issues/64[#64],"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itszp"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-2/main/issues/71[#71],"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itszp"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-2/main/issues/114[#114],"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itszp"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-2/main/issues/160[#160],"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itszp"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-2/main/issues/224[#224]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itszp"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itszp"
        },
        "content": "This section highlights my contributions to the User Guide. It showcases my ability to write documentation targeting end-users."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itszp"
        },
        "content": "\u003d\u003d\u003d *Features*"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itszp"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itszp"
        },
        "content": "include::../UserGuide.adoc[tag\u003dFeaturesHeader]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itszp"
        },
        "content": "\u003d\u003d\u003d Save Feature"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itszp"
        },
        "content": "include::../UserGuide.adoc[tag\u003dUGSave]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itszp"
        },
        "content": "\u003d\u003d\u003d *Other Works Contributed*"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "itszp"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "itszp"
        },
        "content": "*  Open Feature"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "itszp"
        },
        "content": "*  List Files Feature"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "itszp"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "itszp"
        },
        "content": "The section highlights my contributions to the Developer Guide. It showcases my ability to write technical documentation and the technical depth of my contributions to the project."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "itszp"
        },
        "content": "\u003d\u003d\u003d *Open Feature*"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "itszp"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "itszp"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dDGOpen]"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "itszp"
        },
        "content": "\u003d\u003d\u003d *List Files Feature*"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "itszp"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "itszp"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dDGListFiles]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "itszp"
        },
        "content": "\u003d\u003d\u003d *Save Feature*"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "itszp"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "itszp"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dDGSave]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "itszp"
        },
        "content": "\u003d\u003d\u003d *Other Works Contributed*"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "itszp"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "itszp"
        },
        "content": "*  Appendix B: User Stories"
      }
    ],
    "authorContributionMap": {
      "itszp": 121
    }
  },
  {
    "path": "docs/team/kayheen.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kayheen"
        },
        "content": "\u003d Chong Kay Heen - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kayheen"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kayheen"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kayheen"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kayheen"
        },
        "content": "\u003d\u003d PROJECT: FomoFoto"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kayheen"
        },
        "content": "\u003d\u003d\u003d 1. Overview of the Project"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kayheen"
        },
        "content": "My team and I were tasked with enhancing a basic command line AddressBook for our Software Engineering project. We decided to morph the project into an image editor. +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kayheen"
        },
        "content": "FomoFoto is a robust yet simple image-editing tool. Users interact with the application through worded commands from their keyboard, and receive visual response through the displayed image on the application. Unlike other heavy image editors, FomoFoto has a gentle learning curve as it removes clutter by providing the more essential features. The features and implementations are well documented in guides for users and developers respectively. In addition, FomoFoto is well-maintained with high reliability and code quality as it is covered by rigorous tests and checks."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kayheen"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kayheen"
        },
        "content": "\u003d\u003d\u003d 2. Summary of Contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kayheen"
        },
        "content": "This section provides a summary of my coding, documentation and miscellaneous contributions to FomoFoto, our team project."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kayheen"
        },
        "content": "* *Major Enhancement*: I added *image manipulation commands*."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kayheen"
        },
        "content": "** _What it does:_ This feature allows users to manipulate images on a physical level, such as rotating, cropping and resizing the target image. Users key in keywords like `rotate`, `crop` and `resize` to activate the respective commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kayheen"
        },
        "content": "** _Justification:_ This feature improves the product significantly because it is an essential feature of an image editor. Users might want to `rotate` their images because the orientation is wrong or `crop` out certain unwanted parts in the image. Should the image be too large, users can `resize` it as well."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kayheen"
        },
        "content": "** _Highlights:_ This enhancement works with all other commands, including the image filters that were implemented by my teammate. An in-depth analysis of the commands were done before we decided to make use of a library. The implementation was challenging because there was a need to coordinate between the image filter commands and the commands here, because the two libraries returned different objects. There was a need to ensure that the `Image` class and `CurrentEdit` class could accept changes from both libraries."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kayheen"
        },
        "content": "** _Credits:_ https://github.com/rkalla/imgscalr[`ImgScalr Library`]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kayheen"
        },
        "content": "* *Major Enhancement*: I added a *watermark command*."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kayheen"
        },
        "content": "** _What it does:_ This feature allows users to add a watermark (any words or numbers) with the © sign to the target image. Users key in the keyword `wm` to activate this command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kayheen"
        },
        "content": "** _Justification:_ This feature improves the product significantly because it helps users such as professional photographers protect their images after editing it on our image editor. The copyright watermark prevents unauthorised third parties from using the images for their own private purposes."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kayheen"
        },
        "content": "** _Highlights:_ It was especially challenging to integrate this command with all other commands acting on the same image, because a watermark should only be added once to an image. This implied that we had to ensure that the `Image` class contains a flag that indicates the presence of a watermark on the image, and this flag had to be constantly updated accurately in every command that can possibly add or remove a watermark from an image, which includes the `WaterMark` command, `SetPreset` command and `undo/redo` commands."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kayheen"
        },
        "content": "* *Minor Enhancement*: I added a feature where the `Image` returns a file type (e.g. JPEG, PNG), because the methods to edit images differ according to the file type."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kayheen"
        },
        "content": "* *Code Contributed*: https://github.com/CS2103-AY1819S2-W14-2/main/commits?author\u003dkayheen[List of commits], https://nus-cs2103-ay1819s2.github.io/cs2103-dashboard/#search\u003dkay%20heen%20\u0026sort\u003ddisplayName\u0026since\u003d2019-02-10\u0026until\u003d2019-04-15\u0026timeframe\u003dday\u0026reverse\u003dfalse\u0026repoSort\u003dtrue[Project Code Dashboard]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kayheen"
        },
        "content": "* *Other Contributions*:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kayheen"
        },
        "content": "** Project Management:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kayheen"
        },
        "content": "*** Ensured that we were on task with our project documentation by allocating roles and ensuring consistency with our words and diagrams. (User Guide and Developer Guide)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kayheen"
        },
        "content": "*** Integrated Codacy to our GitHub repository: https://github.com/CS2103-AY1819S2-W14-2/main/pull/249[#249]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kayheen"
        },
        "content": "** Enhancements to Existing Features:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kayheen"
        },
        "content": "*** Wrote tests for image manipulation and watermark commands to increase coverage: https://github.com/CS2103-AY1819S2-W14-2/main/pull/188[#188], https://github.com/CS2103-AY1819S2-W14-2/main/pull/208[#208], https://github.com/CS2103-AY1819S2-W14-2/main/pull/222[#222]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kayheen"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kayheen"
        },
        "content": "*** Did the Developer Guide architecture and sequence diagrams for the overall application: https://github.com/CS2103-AY1819S2-W14-2/main/pull/84[#84], https://github.com/CS2103-AY1819S2-W14-2/main/pull/118[#118]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kayheen"
        },
        "content": "*** Did the Developer Guide documentation for image manipulation and watermark commands: https://github.com/CS2103-AY1819S2-W14-2/main/pull/59[#59], https://github.com/CS2103-AY1819S2-W14-2/main/pull/123/[#123], https://github.com/CS2103-AY1819S2-W14-2/main/pull/229[#229], https://github.com/CS2103-AY1819S2-W14-2/main/pull/234[#234]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kayheen"
        },
        "content": "*** Did the User Guide documentation for image manipulation and watermark commands: https://github.com/CS2103-AY1819S2-W14-2/main/pull/61/[#61], https://github.com/CS2103-AY1819S2-W14-2/main/pull/120/[#120], https://github.com/CS2103-AY1819S2-W14-2/main/pull/221[#221]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kayheen"
        },
        "content": "*** Did the the User Guide documentation for the overall walk through: https://github.com/CS2103-AY1819S2-W14-2/main/pull/65[#65]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kayheen"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kayheen"
        },
        "content": "*** PRs reviewed (with non-trivial review comments):"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kayheen"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-2/main/pull/220[#220], https://github.com/CS2103-AY1819S2-W14-2/main/pull/235[#235], https://github.com/CS2103-AY1819S2-W14-2/main/pull/238[#238], https://github.com/CS2103-AY1819S2-W14-2/main/pull/239[#239]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kayheen"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class:  https://github.com/CS2103-AY1819S2-W16-2/main/issues/102[#102], https://github.com/CS2103-AY1819S2-W16-2/main/issues/112[#112],"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kayheen"
        },
        "content": "https://github.com/CS2103-AY1819S2-W16-2/main/issues/115[#115],"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kayheen"
        },
        "content": "https://github.com/CS2103-AY1819S2-W16-2/main/issues/117[#117],"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kayheen"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kayheen"
        },
        "content": "*** Integrated a third party library (ImgScalr) to the project (https://github.com/CS2103-AY1819S2-W14-2/main/pull/26[#26])"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kayheen"
        },
        "content": "\u003d\u003d\u003d 3. Contributions to the User Guide"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kayheen"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kayheen"
        },
        "content": "|_The sections below are my contributions to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kayheen"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kayheen"
        },
        "content": "\u003d\u003d\u003d\u003d 3.1 Crop an Image : `crop`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kayheen"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kayheen"
        },
        "content": "include::../UserGuide.adoc[tag\u003dCropCommand]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kayheen"
        },
        "content": "\u003d\u003d\u003d\u003d 3.2 Rotate an Image : `rotate`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kayheen"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kayheen"
        },
        "content": "include::../UserGuide.adoc[tag\u003dRotateCommand]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kayheen"
        },
        "content": "\u003d\u003d\u003d\u003d 3.3 WaterMark : `wm`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kayheen"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kayheen"
        },
        "content": "include::../UserGuide.adoc[tag\u003dWaterMarkCommand]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kayheen"
        },
        "content": "\u003d\u003d\u003d\u003d 3.4 Other contributions"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kayheen"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kayheen"
        },
        "content": "* A Walk Through of the Image Editor"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kayheen"
        },
        "content": "* Resize Command"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kayheen"
        },
        "content": "\u003d\u003d\u003d 4. Contributions to the Developer Guide"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kayheen"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kayheen"
        },
        "content": "|_The sections below are my contributions to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kayheen"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kayheen"
        },
        "content": "\u003d\u003d\u003d\u003d 4.1 How the Architecture Components Interact with Each Other"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kayheen"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kayheen"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dArchiInteraction]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kayheen"
        },
        "content": "\u003d\u003d\u003d\u003d 4.2 Image Manipulation"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kayheen"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kayheen"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dImageManipulation]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kayheen"
        },
        "content": "\u003d\u003d\u003d\u003d 4.3 WaterMark Feature"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kayheen"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kayheen"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dWaterMark]"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kayheen"
        },
        "content": "\u003d\u003d\u003d\u003d 4.4 Other Contributions"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kayheen"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kayheen"
        },
        "content": "* Crop Command"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kayheen"
        },
        "content": "* Resize Command"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kayheen"
        },
        "content": "* Architecture Diagrams"
      }
    ],
    "authorContributionMap": {
      "kayheen": 110
    }
  },
  {
    "path": "docs/team/randytqw.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "randytqw"
        },
        "content": "\u003d Tan Qun Wei Randy - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "randytqw"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "randytqw"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "randytqw"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "randytqw"
        },
        "content": "\u003d\u003d PROJECT: FomoFoto"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "randytqw"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "randytqw"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "randytqw"
        },
        "content": "My team and I were tasked with enhancing a basic command line addressbook for our Software Engineering project. We decided to morph the project into a image editor. +"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "randytqw"
        },
        "content": "FomoFoto is a robust yet simple image-editing tool. Users interact with the application through worded commands from their keyboard, and receive visual feedback from it through the displayed image on the application. +"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "randytqw"
        },
        "content": "Unlike other heavy image editors, FomoFoto has a very gentle learning curve as it abstracts out clutter by providing the more essential features (complex editing can still be done with special commands). The features and implementations are well documented in guides for users and developers respectively."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "randytqw"
        },
        "content": "In addition, FomoFoto is well maintained with high reliability and code quality as it is covered by rigorous tests and checks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "randytqw"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "randytqw"
        },
        "content": "This section provides a summary of my coding, documentation and other contributions to FomoFoto, our team project."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "randytqw"
        },
        "content": "* *Major enhancement 1*: added *the ability to undo/redo transformations on an image*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "randytqw"
        },
        "content": "** What it does: allows the user to undo previous transformations one at a time. Preceding undone transformations can be reversed by using the redo command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "randytqw"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes by applying incorrect transformations and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "randytqw"
        },
        "content": "** Highlights: Transformation history is stored as a list of commands so it takes up minimal space on the user\u0027s PC."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "randytqw"
        },
        "content": "* *Major enhancement 2*: added *the ability to export images to the user\u0027s PC*"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "randytqw"
        },
        "content": "** What it does: allows the user to export an image in the album to a specified directory."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "randytqw"
        },
        "content": "** Justification: This feature improves the product significantly because the user can save his images outside of the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrein"
        },
        "content": "* *Code contributed*:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": "** https://github.com/CS2103-AY1819S2-W14-2/main/commits?author\u003drandytqw[List of commits]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrein"
        },
        "content": "** https://nus-cs2103-ay1819s2.github.io/cs2103-dashboard/#search\u003drandytqw[Project Code Dashboard]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "randytqw"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "randytqw"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "randytqw"
        },
        "content": "*** Wrote detailed documentation on undo/redo command in developer guide: https://github.com/CS2103-AY1819S2-W14-2/main/pull/138[#138]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "randytqw"
        },
        "content": "*** Wrote detailed documentation on export command in developer\u0027s guide: https://github.com/CS2103-AY1819S2-W14-2/main/pull/216[#216]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "randytqw"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "randytqw"
        },
        "content": "*** PRs merged (with non-trivial review comments): https://github.com/CS2103-AY1819S2-W14-2/main/pull/141[#141] https://github.com/CS2103-AY1819S2-W14-2/main/pull/57[#57]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "randytqw"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "randytqw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "randytqw"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "randytqw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "randytqw"
        },
        "content": "include::../UserGuide.adoc[tag\u003dUndo]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "randytqw"
        },
        "content": "include::../UserGuide.adoc[tag\u003dRedo]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "randytqw"
        },
        "content": "include::../UserGuide.adoc[tag\u003dUpcomingFeatures]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "randytqw"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "randytqw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "randytqw"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "randytqw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "randytqw"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "randytqw"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      }
    ],
    "authorContributionMap": {
      "carrein": 3,
      "randytqw": 70
    }
  },
  {
    "path": "docs/team/thamsimun.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "\u003d Tham Si Mun - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "\u003d\u003d PROJECT: FomoFoto"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "My team and I were tasked with enhancing a basic command line addressbook for our Software Engineering project. We decided to morph the project into an image editor. +"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "FomoFoto is a robust yet simple image-editing tool. Users interact with the application through worded commands from their keyboard, and receive visual feedback from it through the displayed image on the application. +"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "Unlike other heavy image editors, FomoFoto has a very gentle learning curve as it abstracts out clutter by providing the more essential features (complex editing can still be done with special commands). The features and implementations are well documented in guides for users and developers respectively."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "In addition, FomoFoto is well maintained with high reliability and code quality as it is covered by rigorous tests and checks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "This section provides a summary of my coding, documentation and other contributions to FomoFoto, our team project."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* *Major enhancement*: I added *the ability to apply filters on images*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "** What it does: This feature allows the user to apply filters on images by adjusting their contrast and brightness or transforming them into black and white images. Users can key in commands such as `contrast`, `brightness` and `bw` to apply the respective filters on images. Before our application executes the respective image filter commands, the arguments specified by the user will first be parsed and validated."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "** Justification: This feature improves the product significantly because applying filters on images is an essential feature of an image editor. Users might need to adjust the brightness and contrast of images as the images they have might be under-exposed and are not well contrasted. Also, the black and white filter is useful for users who like vintage images."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "** Highlights: This enhancement was challenging to implement as the image filter commands are working on the same image as the image manipulation commands that were implemented by my teammate. It seeks for an in-depth analysis of design alternatives and the implementation of image editing libraries. As my teammate and I had to use two different third-party libraries which return different objects, we had to ensure that the classes in our code (e.g. `CurrentEdit`) have helper methods that accept both objects from the two different libraries."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "** Credits: The processing of images is facilitated by an external API https://github.com/sksamuel/scrimage[`scrimage`]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* *Major enhancement*: I added *the ability to save and set preset commands for faster image-editing*"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "** What it does: This feature allows the user to save and set a list of image-editing commands in advance of their uses. The `savepreset` command saves a list of commands that were applied to an image so that they can be applied to other images in the future by executing the `setpreset` command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "** Justification: This feature improves the product significantly because multiple image filters and manipulations are frequently applied simultaneously. With this feature, users can save multiple image-editing commands as one preset command and use them for other images.  This makes image-editing more efficient as the user can now apply multiple image filters or manipulations on other images with just a command instead of executing the commands one by one."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "** Highlights: This feature requires an in-depth understanding of how the image-editing commands (e.g. image filters and image manipulations) are executed as it has to execute a few of them at a go. Furthermore, as a  preset list of commands might not work on another image (e.g. the cropping command depends on the size of the image), it is necessary to display the exact command in the preset list of commands that cannot be applied on the image to guide the user."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrein"
        },
        "content": "* *Code contributed*:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrein"
        },
        "content": "** https://github.com/CS2103-AY1819S2-W14-2/main/commits?author\u003dthamsimun[List of commits]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrein"
        },
        "content": "** https://nus-cs2103-ay1819s2.github.io/cs2103-dashboard/#search\u003dthamsimun[Project Code Dashboard]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "*** Managed release `v1.4` (1 release) on GitHub"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "*** Ensured the standardization of codes in our team to achieve better code quality."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "*** Wrote the skeleton for the user guide: https://github.com/CS2103-AY1819S2-W14-2/main/issues/132[#132]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "*** Did the sequence diagrams of the logic component in the developer guide:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-2/main/pull/116[#116]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "*** Wrote the documentation for the image filters in the developer guide"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-2/main/pull/131[#131]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "*** Wrote the documentation for the preset commands in the developer guide"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-2/main/pull/271[#271]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "** Enhancements to Existing Features:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "*** Wrote tests for image filters and preset commands to increase coverage. (Pull requests https://github.com/CS2103-AY1819S2-W14-2/main/pull/233[#233],"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-2/main/pull/220[#220], https://github.com/CS2103-AY1819S2-W14-2/main/pull/219[#219],"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-2/main/pull/213[#213],"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-2/main/pull/207[#207])"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/CS2103-AY1819S2-W14-2/main/pull/98[#98], https://github.com/CS2103-AY1819S2-W14-2/main/pull/52[#52], https://github.com/CS2103-AY1819S2-W14-2/main/pull/46[#46],"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-2/main/pull/236[#236],"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-2/main/pull/203[#203],"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-2/main/pull/153[#153]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "*** Reported bugs and provided solutions to team: https://github.com/CS2103-AY1819S2-W14-2/main/issues/99[#99], https://github.com/CS2103-AY1819S2-W14-2/main/issues/133[#133],"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-2/main/issues/270[#270],"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-2/main/issues/209[#209],"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-2/main/issues/199[#199]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-2/main/issues/148[#148],"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "*** Integrated a third party library (https://github.com/sksamuel/scrimage[`scrimage`]) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "*** Integrated Netlify and Appveyor to the team repository (https://github.com/CS2103-AY1819S2-W14-2/main/issues/151[#151])"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "include::../UserGuide.adoc[tag\u003dContrastCommand]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "include::../UserGuide.adoc[tag\u003dBrightnessCommand]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "include::../UserGuide.adoc[tag\u003dSavePreset]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "include::../UserGuide.adoc[tag\u003dSetPreset]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "\u003d\u003d\u003d *Other Works Contributed*"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* Black/White feature"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dImageFilter]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dSetPreset]"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "\u003d\u003d\u003d *Other Works Contributed*"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* Save Preset feature"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "* Logic Component sequence diagrams"
      }
    ],
    "authorContributionMap": {
      "carrein": 3,
      "thamsimun": 107
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.model.Album;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEditManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 4, 0, true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    protected CurrentEdit currentEdit;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "carrein"
        },
        "content": "    protected Album album;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing FomoFoto ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        currentEdit \u003d new CurrentEditManager();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "carrein"
        },
        "content": "        logic \u003d new LogicManager(model, storage, currentEdit);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "carrein"
        },
        "content": "        album \u003d Album.getInstance();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "carrein"
        },
        "content": "        album.populateAlbum();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        logger.info(\"Starting FomoFoto \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping FomoFoto ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kayheen": 4,
      "carrein": 5,
      "-": 179,
      "thamsimun": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static final String ASSETS_FOLDER_TEMP_NAME \u003d \"fomofoto.assets\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static final String SAMPLE_FOLDER \u003d \"/imageTest/valid\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static final int MAX_FILE_SIZE \u003d 10000000;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itszp"
        },
        "content": "    // Represents a string array of valid file types allowed in assets folder."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public static final String[] VALID_FILE_TYPES \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itszp"
        },
        "content": "            new String[] {\".jpg\", \".png\", \".gif\", \".bmp\", \".jpeg\", \".tif\", \".tiff\"};"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itszp": 3,
      "carrein": 3,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static final String MESSAGE_INVALID_PATH \u003d \"Invalid file path given.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static final String MESSAGE_UNABLE_TO_READ_FILE \u003d \"Unable to read file.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static final String MESSAGE_INVALID_FORMAT \u003d \"File is not a valid type or is hidden.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static final String MESSAGE_INVALID_SIZE \u003d \"File is larger than the 10mb limit.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FILE \u003d \"Duplicate file name exists in assets folder. \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itszp"
        },
        "content": "            + \"Try using another name.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static final String MESSAGE_SAMPLE_IMPORT \u003d \"Import sample can only be called on an empty Album.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public static final String MESSAGE_FILE_NOT_FOUND \u003d \"File does not exist. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "            + \"Use listfiles to view existing files.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public static final String MESSAGE_ROTATE_SUCCESS \u003d \"Rotated successfully.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public static final String MESSAGE_CONTRAST_SUCCESS \u003d \"Contrast filter applied successfully.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public static final String MESSAGE_BRIGHTNESS_SUCCESS \u003d \"Brightness filter applied successfully.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public static final String MESSAGE_BLACKWHITE_SUCCESS \u003d \"Black/White filter applied successfully.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public static final String MESSAGE_CONTRAST_DOUBLE_ERROR \u003d \"Value keyed in is not double. \\n%1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public static final String MESSAGE_BRIGHTNESS_DOUBLE_ERROR \u003d \"Value keyed in is not double. E.g: brightness 1.3 \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        + \"n\\n%1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public static final String MESSAGE_BLACKWHITE_INT_ERROR \u003d \"Value keyed in is not integer. E.g: bw 123 \\n%1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public static final String MESSAGE_NEGATIVE_ERROR \u003d \"Value keyed in is not positive. \\n%1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public static final String MESSAGE_ROTATE_DEGREE_ERROR \u003d \"Value keyed in is not a valid integer or rotating degree.\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            + \" \\n%1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public static final String MESSAGE_CROP_INT_ERROR \u003d \"Values keyed in are not all integers. \\n%1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public static final String MESSAGE_CROP_SUCCESS \u003d \"Cropped successfully.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public static final String MESSAGE_DID_NOT_OPEN \u003d \"Did not open any image to edit on.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public static final String MESSAGE_UNABLE_TO_SAVE \u003d \"Unable to save. Please open an image before saving.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public static final String MESSAGE_RESIZE_SUCCESS \u003d \"Resized successfully.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public static final String MESSAGE_RESIZE_VALUE_ERROR \u003d \"Values keyed in are not positive integers. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            + \"\\n%1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public static final String MESSAGE_EXPORT_SUCCESS \u003d \"Image successfully exported.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public static final String MESSAGE_SAVEPRESET_SUCCESS \u003d \"Preset is successfully saved:\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public static final String MESSAGE_SAVEPRESET_FAIL_DUPLICATE \u003d \"Duplicate preset name is found.\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        + \" Please use another preset name.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public static final String MESSAGE_SAVEPRESET_FAIL_EMPTY \u003d \"List of command in this preset is empty.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public static final String MESSAGE_SETPRESET_FAIL_NOTFOUND \u003d \"Preset is not found.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public static final String MESSAGE_SETPRESET_SUCCESS \u003d \"Preset is successfully applied:\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public static final String MESSAGE_INVALID_SAVE_TYPE \u003d \"Invalid save file type.\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itszp"
        },
        "content": "            + \"\\nNames must end with either of the following: %1$s\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public static final String MESSAGE_INVALID_SAVE_NAME \u003d \"Unable to save. Save file name cannot be empty.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static final String MESSAGE_CLEAR_SUCCESS \u003d \"Album has been cleared!\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public static final String MESSAGE_WATERMARK_SUCCESS \u003d \"Watermark created.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public static final String MESSAGE_HAS_WATERMARK \u003d \"A watermark has been added to this image already.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public static final String MESSAGE_RESIZE_VALUES_TOO_LARGE \u003d \"The resultant image is too large.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itszp": 7,
      "kayheen": 14,
      "carrein": 7,
      "randytqw": 1,
      "-": 10,
      "thamsimun": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.logic.parser.FomoFotoParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private final CurrentEdit currentEdit;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private final FomoFotoParser addressBookParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean addressBookModified;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public LogicManager(Model model, Storage storage, CurrentEdit currentEdit) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        this.currentEdit \u003d currentEdit;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrein"
        },
        "content": "        addressBookParser \u003d new FomoFotoParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set addressBookModified to true whenever the models\u0027 address book is modified."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        model.getAddressBook().addListener(observable -\u003e addressBookModified \u003d true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookModified \u003d false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "carrein"
        },
        "content": "            commandResult \u003d command.execute(currentEdit, model, history);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (addressBookModified) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Address book modified, saving to file.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return history.getHistory();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.selectedPersonProperty();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson(Person person) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setSelectedPerson(person);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 5,
      "-": 103,
      "thamsimun": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/ResourceWalker.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "/* @@author Carrein */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static seedu.address.commons.core.Config.ASSETS_FOLDER_TEMP_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.net.URI;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.net.URISyntaxException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.nio.file.FileSystems;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.nio.file.FileVisitResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.nio.file.SimpleFileVisitor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.nio.file.attribute.BasicFileAttributes;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.apache.commons.io.IOUtils;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.model.Album;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": " * ResourceWalker is a helper class to read external resources into a runtime JAR project."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": " * In FomoFoto, this class is only called once to import VALID images into the assets folder during runtime."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": " * ResourceWalker DOES NOT CHECK FOR INVALID FILE - DO NOT PLACE NON-IMAGE FILE INTO resources/imageTest/valid."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": "public class ResourceWalker {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private static final Album album \u003d Album.getInstance();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Given a path to a directory copy its content to a temp folder by"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * traversing all entries in the directory and performing generateTemp()."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrein"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @throws URISyntaxException File path is invalid."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @throws IOException        I/O operations cannot be performed on file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static void walk(String args) throws URISyntaxException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrein"
        },
        "content": "        URI uri \u003d ResourceWalker.class.getResource(args).toURI();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrein"
        },
        "content": "        if (uri.getScheme().equals(\"jar\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "carrein"
        },
        "content": "            FileSystems.newFileSystem(uri, Collections.emptyMap());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Path myPath \u003d Paths.get(uri);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Files.walkFileTree(myPath, new SimpleFileVisitor\u003c\u003e() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "carrein"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "carrein"
        },
        "content": "            public FileVisitResult visitFile(Path path, BasicFileAttributes attrs) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "carrein"
        },
        "content": "                generateTemp(path);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "carrein"
        },
        "content": "                return FileVisitResult.CONTINUE;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "carrein"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "carrein"
        },
        "content": "        });"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "carrein"
        },
        "content": "        if (uri.getScheme().equals(\"jar\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "carrein"
        },
        "content": "            FileSystems.getFileSystem(uri).close();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Given a ZipPath convert into a temp file."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "carrein"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @param path Path to be converted."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @return Converted File."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private static File generateTemp(Path path) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "carrein"
        },
        "content": "        File tempFile \u003d null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "carrein"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "carrein"
        },
        "content": "            InputStream in \u003d Files.newInputStream(path);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "carrein"
        },
        "content": "            String tDir \u003d System.getProperty(\"user.dir\") + File.separator + ASSETS_FOLDER_TEMP_NAME;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "carrein"
        },
        "content": "            tempFile \u003d new File(tDir + File.separator + path.getFileName());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "carrein"
        },
        "content": "            try (FileOutputStream out \u003d new FileOutputStream(tempFile)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "carrein"
        },
        "content": "                IOUtils.copy(in, out);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "carrein"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "carrein"
        },
        "content": "            album.addToImageList(tempFile.getAbsolutePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "carrein"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "carrein"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return tempFile;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "carrein"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/BlackWhiteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author thamsimun */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import java.util.OptionalInt;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import com.sksamuel.scrimage.BufferedOpFilter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import com.sksamuel.scrimage.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import com.sksamuel.scrimage.filter.ThresholdFilter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " * This command allows users to apply the black/white filter on the image."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "public class BlackWhiteCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"bw\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        + \": Apply the black and white filter on the image with threshold given.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        + \"If threshold is not given, default threshold value is 127.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        + \"Parameters: [THRESHOLDVALUE] \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \"\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        + \"Example2: \" + COMMAND_WORD + \"130\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private OptionalInt threshold;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private boolean isNewCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * Creates a ContrastCommand object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * @param threshold pixels lighter than this threshold becomes white and pixels darker than it becomes black."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public BlackWhiteCommand(OptionalInt threshold) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        setCommandName(COMMAND_WORD);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (threshold.isPresent()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            setArguments(String.valueOf(threshold.getAsInt()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        this.threshold \u003d threshold;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        this.isNewCommand \u003d true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public CommandResult execute(CurrentEdit currentEdit, Model model, CommandHistory history)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (currentEdit.tempImageDoNotExist()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_DID_NOT_OPEN);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        seedu.address.model.image.Image initialImage \u003d currentEdit.getTempImage();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (threshold.isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            BufferedOpFilter bwFilter \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                new ThresholdFilter(threshold.getAsInt(), 0xffffff, 0x000000);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            Image outputImage \u003d Image.fromFile(new File(initialImage.getUrl())).filter(bwFilter);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            currentEdit.updateTempImage(outputImage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            BufferedOpFilter bwFilter \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                new ThresholdFilter(127, 0xffffff, 0x000000);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            Image outputImage \u003d Image.fromFile(new File(initialImage.getUrl())).filter(bwFilter);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            currentEdit.updateTempImage(outputImage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (this.isNewCommand) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            this.isNewCommand \u003d false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            currentEdit.addCommand(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            currentEdit.displayTempImage();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        return new CommandResult(Messages.MESSAGE_BLACKWHITE_SUCCESS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (threshold.isPresent()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            return \"bw \" + threshold.getAsInt();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        return \"bw\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            || (other instanceof BlackWhiteCommand) // instanceof handles nulls"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            \u0026\u0026 isValuesEqual(other);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * Checks if the value in the contrast command is equal to the value in the other command."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * @param other command object to be compared"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private boolean isValuesEqual(Object other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        BlackWhiteCommand otherCommand \u003d (BlackWhiteCommand) other;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (this.threshold.isPresent() \u0026\u0026 otherCommand.threshold.isPresent()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            return this.threshold.getAsInt() \u003d\u003d otherCommand.threshold.getAsInt();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            return (!this.threshold.isPresent() \u0026\u0026 !otherCommand.threshold.isPresent());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author*/"
      }
    ],
    "authorContributionMap": {
      "thamsimun": 104
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/BrightnessCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author thamsimun */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import java.util.OptionalDouble;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import com.sksamuel.scrimage.BufferedOpFilter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import com.sksamuel.scrimage.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import com.sksamuel.scrimage.filter.BrightnessFilter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " * This command allows users to adjust the brightness of images."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "public class BrightnessCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"brightness\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            + \": Adjust the brightness of the image according to ratio value given.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            + \"If ratio is not given, default brightness ratio will be 1.1\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            + \"Parameters: [BRIGHTNESSVALUE] \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            + \"Example2: \" + COMMAND_WORD + \"0.9\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private OptionalDouble brightnessValue;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private boolean isNewCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * Creates a ContrastCommand object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * @param brightnessValue brightness value to add on image"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public BrightnessCommand(OptionalDouble brightnessValue) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        setCommandName(COMMAND_WORD);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (brightnessValue.isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            setArguments(String.valueOf(brightnessValue.getAsDouble()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        this.brightnessValue \u003d brightnessValue;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        this.isNewCommand \u003d true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public CommandResult execute(CurrentEdit currentEdit, Model model, CommandHistory history)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (currentEdit.tempImageDoNotExist()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_DID_NOT_OPEN);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        seedu.address.model.image.Image initialImage \u003d currentEdit.getTempImage();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (this.brightnessValue.isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            BufferedOpFilter brightnessFilter \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                    new BrightnessFilter(this.brightnessValue.getAsDouble());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            Image outputImage \u003d Image.fromFile(new File(initialImage.getUrl())).filter(brightnessFilter);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            currentEdit.updateTempImage(outputImage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            BufferedOpFilter brightnessFilter \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                    new BrightnessFilter(1.1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            Image outputImage \u003d Image.fromFile(new File(initialImage.getUrl())).filter(brightnessFilter);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            currentEdit.updateTempImage(outputImage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (this.isNewCommand) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            this.isNewCommand \u003d false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            currentEdit.addCommand(this);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            currentEdit.displayTempImage();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        return new CommandResult(Messages.MESSAGE_BRIGHTNESS_SUCCESS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (brightnessValue.isPresent()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            return \"brightness \" + brightnessValue.getAsDouble();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        return \"brightness\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            || (other instanceof BrightnessCommand) // instanceof handles nulls"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            \u0026\u0026 isValuesEqual(other);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * Checks if the value in the contrast command is equal to the value in the other command."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * @param other command object to be compared"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private boolean isValuesEqual(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        BrightnessCommand otherCommand \u003d (BrightnessCommand) other;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (this.brightnessValue.isPresent() \u0026\u0026 otherCommand.brightnessValue.isPresent()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            return this.brightnessValue.getAsDouble() \u003d\u003d otherCommand.brightnessValue.getAsDouble();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            return (!this.brightnessValue.isPresent() \u0026\u0026 !otherCommand.brightnessValue.isPresent());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author */"
      }
    ],
    "authorContributionMap": {
      "thamsimun": 103
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CLEAR_SUCCESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.model.Album;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private final Album album \u003d Album.getInstance();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public CommandResult execute(CurrentEdit currentEdit, Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": "        album.clearAlbum();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "        album.refreshAlbum();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return new CommandResult(MESSAGE_CLEAR_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 7,
      "-": 18,
      "thamsimun": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Command.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private String commandName \u003d \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private String arguments \u003d \"None\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public abstract CommandResult execute(CurrentEdit currentEdit,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                                          Model model, CommandHistory history) throws CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void setArguments(String arguments) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": "        this.arguments \u003d arguments;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void setCommandName(String commandName) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": "        this.commandName \u003d commandName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public String getCommandName() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return commandName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public String getArguments() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return arguments;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 18,
      "-": 20,
      "thamsimun": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ContrastCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author thamsimun */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import java.util.OptionalDouble;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import com.sksamuel.scrimage.BufferedOpFilter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import com.sksamuel.scrimage.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import com.sksamuel.scrimage.filter.ContrastFilter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " * This command allows users to adjust the contrast of images."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "public class ContrastCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"contrast\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            + \": Adjust the contrast of the image according to ratio value given.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            + \"If ratio is not given, default contrast ratio will be 1.1\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            + \"Parameters: [CONTRASTVALUE] \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            + \"Example2: \" + COMMAND_WORD + \"1.3\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private OptionalDouble contrastValue;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private boolean isNewCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * Creates a ContrastCommand object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * @param contrastValue contrast value to put on image"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public ContrastCommand(OptionalDouble contrastValue) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        setCommandName(COMMAND_WORD);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (contrastValue.isPresent()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            setArguments(String.valueOf(contrastValue.getAsDouble()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        this.contrastValue \u003d contrastValue;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        this.isNewCommand \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public CommandResult execute(CurrentEdit currentEdit, Model model, CommandHistory history)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (currentEdit.tempImageDoNotExist()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_DID_NOT_OPEN);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        seedu.address.model.image.Image initialImage \u003d currentEdit.getTempImage();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (this.contrastValue.isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            BufferedOpFilter contrastFilter \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                    new ContrastFilter(this.contrastValue.getAsDouble());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            Image outputImage \u003d Image.fromFile(new File(initialImage.getUrl())).filter(contrastFilter);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            currentEdit.updateTempImage(outputImage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            BufferedOpFilter contrastFilter \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                    new ContrastFilter(1.1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            Image outputImage \u003d Image.fromFile(new File(initialImage.getUrl())).filter(contrastFilter);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            currentEdit.updateTempImage(outputImage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (this.isNewCommand) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            this.isNewCommand \u003d false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            currentEdit.addCommand(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            currentEdit.displayTempImage();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        return new CommandResult(Messages.MESSAGE_CONTRAST_SUCCESS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (contrastValue.isPresent()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            return \"contrast \" + contrastValue.getAsDouble();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        return \"contrast\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            || (other instanceof ContrastCommand) // instanceof handles nulls"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            \u0026\u0026 isValuesEqual(other);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * Checks if the value in the contrast command is equal to the value in the other command."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * @param other command object to be compared"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private boolean isValuesEqual(Object other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        ContrastCommand otherCommand \u003d (ContrastCommand) other;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (this.contrastValue.isPresent() \u0026\u0026 otherCommand.contrastValue.isPresent()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            return this.contrastValue.getAsDouble() \u003d\u003d otherCommand.contrastValue.getAsDouble();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            return (!this.contrastValue.isPresent() \u0026\u0026 !otherCommand.contrastValue.isPresent());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author */"
      }
    ],
    "authorContributionMap": {
      "thamsimun": 104
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CropCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kayheen"
        },
        "content": "/* @@author kayheen */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kayheen"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import java.awt.image.BufferedImage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import org.imgscalr.Scalr;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.model.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kayheen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kayheen"
        },
        "content": " * This command allows the user to crop an image."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kayheen"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kayheen"
        },
        "content": "public class CropCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"crop\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            + \": Crop the image according to the coordinates given. All values to be integer/whole numbers only.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            + \"Parameters: X-COORDINATE Y-COORDINATE WIDTH HEIGHT \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 0 0 200 200\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private int xCoord;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private int yCoord;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private int width;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private int height;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private boolean isNewCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public CropCommand(int x, int y, int width, int height) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        setCommandName(COMMAND_WORD);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        String argument \u003d x + \" : \" + y + \" : \" + width + \" : \" + height;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        setArguments(argument);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        xCoord \u003d x;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        yCoord \u003d y;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        this.width \u003d width;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        this.isNewCommand \u003d true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public CommandResult execute(CurrentEdit currentEdit,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                                 Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        if (currentEdit.tempImageDoNotExist()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_DID_NOT_OPEN);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        Image initialImage \u003d currentEdit.getTempImage();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            BufferedImage initImage \u003d initialImage.getBufferedImage();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            BufferedImage finalImage \u003d Scalr.crop(initImage, xCoord, yCoord, width, height);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            currentEdit.updateTempImage(finalImage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            throw new CommandException(\"Invalid crop bounds, bounds for the inputs as follows:\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                    + \"0 \u003c\u003d x-coordinate \u003c\u003d \" + initialImage.getWidth()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                    + \", 0 \u003c\u003d y-coordinate \u003c\u003d \" + initialImage.getHeight() + \",\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                    + \"0 \u003c\u003d x + width \u003c\u003d \" + initialImage.getWidth()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                    + \", 0 \u003c\u003d y + height \u003c\u003d \" + initialImage.getHeight());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        if (this.isNewCommand) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            this.isNewCommand \u003d false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            currentEdit.addCommand(this);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            currentEdit.displayTempImage();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        return new CommandResult(Messages.MESSAGE_CROP_SUCCESS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                || (other instanceof CropCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                \u0026\u0026 isValuesEqual(other));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private boolean isValuesEqual(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        CropCommand temp \u003d (CropCommand) other;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        return this.xCoord \u003d\u003d temp.xCoord \u0026\u0026 this.yCoord \u003d\u003d temp.yCoord \u0026\u0026 this.width \u003d\u003d temp.width"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                \u0026\u0026 this.height \u003d\u003d temp.height;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        return \"crop \" + xCoord + \" \" + yCoord + \" \" + width + \" \" + height;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kayheen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kayheen": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public CommandResult execute(CurrentEdit currentEdit, Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "        currentEdit.clearTemp();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 2,
      "-": 18,
      "thamsimun": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExportCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "randytqw"
        },
        "content": "/* @@author randytqw */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "randytqw"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import static org.apache.commons.io.FileUtils.copyFileToDirectory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.model.Album;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.model.image.Image;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "randytqw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "randytqw"
        },
        "content": " * Allows the user to export the current image to his own PC"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "randytqw"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "randytqw"
        },
        "content": "public class ExportCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"export\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        + \": Exports an image in the album to a specified directory in user PC.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        + \"Parameters: f/FILENAME_TO_EXPORT d/DIRECTORY_TO_EXPORT TO\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" f/iu.jpg d/C:\\\\Users\\\\randy\\\\Desktop\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    private String filename;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    private String path;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    private Album album \u003d Album.getInstance();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public ExportCommand(String path, String filename) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        this.filename \u003d filename;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public CommandResult execute(CurrentEdit currentEdit, Model model, CommandHistory commandHistory)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        if (validPath(path) !\u003d 1) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PATH);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        File directory \u003d new File(path);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        Image image \u003d album.getImageFromList(filename);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        if (image \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_FILE_NOT_FOUND);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        File toExport \u003d new File(image.getUrl());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            copyFileToDirectory(toExport, directory, false);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        return new CommandResult(Messages.MESSAGE_EXPORT_SUCCESS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     * Given a URL checks if the given path is valid."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     * @param url Path to a file or directory."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     * @return 1 if directory, 0 if file, -1 otherwise."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public int validPath(String url) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        // Trim url to remove trailing whitespace"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        File file \u003d new File(url.trim());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        if (file.isDirectory()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        if (file.isFile()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            || (other instanceof ExportCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            \u0026\u0026 isValuesEqual(other));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    private boolean isValuesEqual(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        ExportCommand temp \u003d (ExportCommand) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        return this.filename.equals(temp.filename) \u0026\u0026 this.path.equals(temp.path);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "randytqw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "randytqw": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public CommandResult execute(CurrentEdit currentEdit, Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 1,
      "-": 21,
      "thamsimun": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ImportCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "/* @@author Carrein */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.model.Album;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": " * Imports a image to FomoFoto."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": "public class ImportCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"import\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "            + \": Imports the image specified to the assets directory. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": "            + \"Parameters: \u003cabsolute path of file\u003e\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" C:/Users/Fomo/Pictures/sample.jpg\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Image successfully imported.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static final String MESSAGE_DIR_SUCCESS \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": "            \"Directory successfully imported (Note: Invalid file types, hidden files and duplicates are skipped).\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private final Album album \u003d Album.getInstance();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private boolean isDirectory;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Creates an ImportCommand to add the specified {@code Image}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public ImportCommand(boolean isDirectory) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": "        requireNonNull(isDirectory);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrein"
        },
        "content": "        this.isDirectory \u003d isDirectory;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public CommandResult execute(CurrentEdit currentEdit, Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrein"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrein"
        },
        "content": "        album.refreshAlbum();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String returnString \u003d isDirectory ? MESSAGE_DIR_SUCCESS : MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return new CommandResult(returnString);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "carrein"
        },
        "content": "                || (other instanceof ImportCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u0026\u0026 isDirectory \u003d\u003d (((ImportCommand) other).isDirectory)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "carrein"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListFilesCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itszp"
        },
        "content": "/* @@author itszp */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itszp"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itszp"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itszp"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.model.Album;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itszp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itszp"
        },
        "content": " * Lists all files inside assets folder."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itszp"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itszp"
        },
        "content": "public class ListFilesCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listfiles\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public static final String MESSAGE_LIST_FILES_HEADER \u003d \"Files in assets folder: %1$s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all files in assets folder.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public static final String MESSAGE_ASSETS_EMPTY \u003d \"No files in assets folder. Use import to add files.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itszp"
        },
        "content": "    private Album album \u003d Album.getInstance();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itszp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public CommandResult execute(CurrentEdit currentEdit, Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itszp"
        },
        "content": "        requireNonNull(currentEdit);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itszp"
        },
        "content": "        String[] fileNames \u003d album.getFileNames();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itszp"
        },
        "content": "        if (fileNames.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itszp"
        },
        "content": "            return new CommandResult(MESSAGE_ASSETS_EMPTY);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itszp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itszp"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_LIST_FILES_HEADER, Arrays.toString(fileNames)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itszp"
        },
        "content": "                + \"\\n\" + MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itszp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itszp": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/OpenCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itszp"
        },
        "content": "/* @@author itszp */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itszp"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itszp"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itszp"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_FILE_NOT_FOUND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.model.Album;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.model.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itszp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itszp"
        },
        "content": " * Opens a previously imported image for editing."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itszp"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itszp"
        },
        "content": "public class OpenCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"open\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itszp"
        },
        "content": "            + \": Opens previously imported image. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itszp"
        },
        "content": "            + \"Parameters: FILENAME\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itszp"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" paris.jpg\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Image successfully opened.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itszp"
        },
        "content": "    private Album album \u003d Album.getInstance();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itszp"
        },
        "content": "    private String fileName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itszp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * Creates a Open Command object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * @param args is the name of the file to be opened."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itszp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public OpenCommand(String args) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itszp"
        },
        "content": "        this.fileName \u003d args;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itszp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public CommandResult execute(CurrentEdit currentEdit, Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itszp"
        },
        "content": "        requireNonNull(currentEdit);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itszp"
        },
        "content": "        Image toOpen;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itszp"
        },
        "content": "        if (album.checkFileExist(fileName)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itszp"
        },
        "content": "            toOpen \u003d album.retrieveImage(fileName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itszp"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itszp"
        },
        "content": "            throw new CommandException(MESSAGE_FILE_NOT_FOUND);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itszp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itszp"
        },
        "content": "        currentEdit.openImage(toOpen);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itszp"
        },
        "content": "        currentEdit.updateExif();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itszp"
        },
        "content": "        currentEdit.displayTempImage();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itszp"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itszp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itszp"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itszp"
        },
        "content": "                || (other instanceof OpenCommand"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itszp"
        },
        "content": "                \u0026\u0026 fileName.equals(((OpenCommand) other).fileName));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itszp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itszp": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "randytqw"
        },
        "content": "/* @@author randytqw */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "randytqw"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.model.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "randytqw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "randytqw"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "randytqw"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "randytqw"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public CommandResult execute(CurrentEdit currentEdit,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "randytqw"
        },
        "content": "                                 Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        requireNonNull(currentEdit);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        Image initialImage \u003d currentEdit.getTempImage();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        if (initialImage \u003d\u003d null) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_DID_NOT_OPEN);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        if (!currentEdit.canRedoTemp()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        Command command \u003d currentEdit.getCommandTemp();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        command.execute(currentEdit, model, history);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        currentEdit.setRedoTemp();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        currentEdit.updateHistory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        currentEdit.displayTempImage();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "randytqw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "randytqw": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ResizeCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kayheen"
        },
        "content": "/* @@author kayheen */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kayheen"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import static seedu.address.commons.core.Config.MAX_FILE_SIZE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import java.awt.image.BufferedImage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import java.awt.image.DataBuffer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import org.imgscalr.Scalr;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.model.image.Image;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kayheen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kayheen"
        },
        "content": " * This command allows users to resize images to desired size."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kayheen"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kayheen"
        },
        "content": "public class ResizeCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"resize\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            + \": Resize the image according to the width and height specified.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            + \"Parameters: WIDTH HEIGHT (only positive integers are allowed)\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 20 40 \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private int width;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private int height;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private boolean isNewCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * Creates a Resize Command object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * @param w is the width of the new image."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * @param h is the height of the new image."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public ResizeCommand(int w, int h) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        setCommandName(COMMAND_WORD);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        String argument \u003d w + \" : \" + h;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        setArguments(argument);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        width \u003d w;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        height \u003d h;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        this.isNewCommand \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public CommandResult execute(CurrentEdit currentEdit,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                                 Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        if (currentEdit.tempImageDoNotExist()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_DID_NOT_OPEN);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        Image initialImage \u003d currentEdit.getTempImage();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            BufferedImage bufferedImage \u003d initialImage.getBufferedImage();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            BufferedImage editedBuffer \u003d Scalr.resize(bufferedImage, Scalr.Method.QUALITY,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                    Scalr.Mode.FIT_EXACT, width, height);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            if (size(editedBuffer) \u003e MAX_FILE_SIZE) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_RESIZE_VALUES_TOO_LARGE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            currentEdit.updateTempImage(editedBuffer);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        } catch (IllegalArgumentException x) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            throw new CommandException(MESSAGE_USAGE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        } catch (OutOfMemoryError | NegativeArraySizeException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_RESIZE_VALUES_TOO_LARGE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        if (this.isNewCommand) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            this.isNewCommand \u003d false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            currentEdit.addCommand(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            currentEdit.displayTempImage();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        return new CommandResult(Messages.MESSAGE_RESIZE_SUCCESS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * This method calculates the size of the final image."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * @param buffer the BufferedImage object to calculate size."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * @return the size of the object in bytes."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private long size(BufferedImage buffer) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        DataBuffer dataBuffer \u003d buffer.getData().getDataBuffer();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        // Each bank element in the data buffer is a 32-bit integer"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        return ((long) dataBuffer.getSize()) * 4L;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                || (other instanceof ResizeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                \u0026\u0026 isValuesEqual(other));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private boolean isValuesEqual(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        ResizeCommand temp \u003d (ResizeCommand) other;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        return this.width \u003d\u003d temp.width \u0026\u0026 this.height \u003d\u003d temp.height;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        return \"resize \" + width + \" \" + height;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kayheen"
        },
        "content": "}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kayheen"
        },
        "content": "/* @@author*/"
      }
    ],
    "authorContributionMap": {
      "kayheen": 104
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RotateCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kayheen"
        },
        "content": "/* @@author kayheen */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kayheen"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import java.awt.image.BufferedImage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import org.imgscalr.Scalr;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.model.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kayheen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kayheen"
        },
        "content": " * This command allows users to rotate images."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kayheen"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kayheen"
        },
        "content": "public class RotateCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"rotate\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            + \": Rotate the image according to the degree of input.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            + \"Parameters: DEGREE (only 90, 180 and 270 are accepted.) \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 90\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private int degree;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private Scalr.Rotation rotate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private boolean isNewCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * Creates a RotateCommand object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * @param value is the degree of rotation."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public RotateCommand(int value) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        setCommandName(COMMAND_WORD);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        setArguments(String.valueOf(value));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        this.isNewCommand \u003d true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        this.degree \u003d value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public CommandResult execute(CurrentEdit currentEdit,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                                 Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        if (currentEdit.tempImageDoNotExist()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_DID_NOT_OPEN);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        Image initialImage \u003d currentEdit.getTempImage();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        if (degree \u003d\u003d 90) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            rotate \u003d Scalr.Rotation.CW_90;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        } else if (degree \u003d\u003d 180) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            rotate \u003d Scalr.Rotation.CW_180;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        } else if (degree \u003d\u003d 270) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            rotate \u003d Scalr.Rotation.CW_270;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            throw new CommandException(String.format(Messages.MESSAGE_ROTATE_DEGREE_ERROR,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                    RotateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        BufferedImage bufferedImage \u003d initialImage.getBufferedImage();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        BufferedImage editedBuffer \u003d Scalr.rotate(bufferedImage, rotate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        currentEdit.updateTempImage(editedBuffer);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        if (this.isNewCommand) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            this.isNewCommand \u003d false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            currentEdit.addCommand(this);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            currentEdit.displayTempImage();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        return new CommandResult(Messages.MESSAGE_ROTATE_SUCCESS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                || (other instanceof RotateCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                \u0026\u0026 (this.degree \u003d\u003d ((RotateCommand) other).degree));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        return \"rotate \" + degree;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kayheen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kayheen": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SaveCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itszp"
        },
        "content": "/* @@author itszp */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itszp"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itszp"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itszp"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_FILE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itszp"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNABLE_TO_SAVE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.model.Album;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.model.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itszp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itszp"
        },
        "content": " * Saves edited image into assets folder"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itszp"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itszp"
        },
        "content": "public class SaveCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"save\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Image saved as: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itszp"
        },
        "content": "    private String toName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itszp"
        },
        "content": "    private Album album \u003d Album.getInstance();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itszp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * Creates an SaveCommand to add the specified {@code name}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itszp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public SaveCommand(String name) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itszp"
        },
        "content": "        this.toName \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itszp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public CommandResult execute(CurrentEdit currentEdit, Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itszp"
        },
        "content": "        requireNonNull(currentEdit);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itszp"
        },
        "content": "        if (currentEdit.tempImageDoNotExist()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itszp"
        },
        "content": "            throw new CommandException(MESSAGE_UNABLE_TO_SAVE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itszp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itszp"
        },
        "content": "        Image image \u003d currentEdit.getTempImage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itszp"
        },
        "content": "        if (toName.isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itszp"
        },
        "content": "            this.toName \u003d currentEdit.getOriginalImageName();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itszp"
        },
        "content": "        } else if (album.checkFileExist(toName)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itszp"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_FILE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itszp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itszp"
        },
        "content": "        album.saveToAssets(image, toName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itszp"
        },
        "content": "        currentEdit.overwriteOriginal(toName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itszp"
        },
        "content": "        currentEdit.deleteHistory();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itszp"
        },
        "content": "        currentEdit.updateExif();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itszp"
        },
        "content": "        album.populateAlbum();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itszp"
        },
        "content": "        album.refreshAlbum();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itszp"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toName));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itszp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itszp"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itszp"
        },
        "content": "                || (other instanceof SaveCommand)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itszp"
        },
        "content": "                \u0026\u0026 (this.toName.equals(((SaveCommand) other).toName));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itszp"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "itszp": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SavePresetCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author thamsimun */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.TransformationSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " * This command allows users to save a preset of commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "public class SavePresetCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"savepreset\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        + \": Saves a preset list of image editing commands used on your currently editing image.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" preset1\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private String presetName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * Creates a SavePresetCommand object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * @param presetName name given to the preset set by user"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public SavePresetCommand(String presetName) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        setCommandName(COMMAND_WORD);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        setArguments(presetName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        this.presetName \u003d presetName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public CommandResult execute(CurrentEdit currentEdit, Model model, CommandHistory history)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (currentEdit.tempImageDoNotExist()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_DID_NOT_OPEN);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        List\u003cCommand\u003e presetList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        List\u003cCommand\u003e commandList \u003d currentEdit.getTempSubHistory();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        for (Command command: commandList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            if (!(command instanceof SetPresetCommand)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                if (command instanceof WaterMarkCommand) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                    command \u003d new WaterMarkCommand(command.getArguments(), false);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                presetList.add(command);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (presetList.size() \u003c 1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_SAVEPRESET_FAIL_EMPTY);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        TransformationSet transformationSet \u003d TransformationSet.getInstance();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        boolean duplicate \u003d transformationSet.isPresent(presetName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (duplicate) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_SAVEPRESET_FAIL_DUPLICATE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        transformationSet.addTransformation(presetName, presetList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        StringBuilder toPrint \u003d new StringBuilder();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        for (Command command: presetList) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            toPrint.append(\"[\" + command.toString() + \"]\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        return new CommandResult(Messages.MESSAGE_SAVEPRESET_SUCCESS + \" \" + toPrint.toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            || (other instanceof SavePresetCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            \u0026\u0026 (this.presetName.equals(((SavePresetCommand) other).presetName)));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author */"
      }
    ],
    "authorContributionMap": {
      "thamsimun": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SetPresetCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author thamsimun */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.TransformationSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " * This command allows users to use a preset of commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "public class SetPresetCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"setpreset\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        + \": Use a preset list of image editing commands on your image with the given preset name.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \"preset1\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private String presetName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private boolean isNewCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private boolean hasWaterMarkCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * Creates a PresetCommand object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * @param presetName name given to the preset set by user"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public SetPresetCommand(String presetName) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        setCommandName(COMMAND_WORD);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        setArguments(presetName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        this.presetName \u003d presetName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        this.isNewCommand \u003d true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        this.hasWaterMarkCommand \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public CommandResult execute(CurrentEdit currentEdit, Model model, CommandHistory history)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (currentEdit.tempImageDoNotExist()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_DID_NOT_OPEN);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        Image initialImage \u003d currentEdit.getTempImage();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        TransformationSet transformationSet \u003d TransformationSet.getInstance();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        boolean isPresent \u003d transformationSet.isPresent(presetName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (!isPresent) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_SETPRESET_FAIL_NOTFOUND);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        List\u003cCommand\u003e presetList \u003d transformationSet.findTransformation(presetName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        this.hasWaterMarkCommand \u003d transformationSet.hasWaterMarkCommand(presetName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        StringBuilder toPrint \u003d new StringBuilder();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        for (Command command: presetList) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                toPrint.append(\"[\" + command.toString() + \"]\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                command.execute(currentEdit, model, history);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            } catch (CommandException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                List\u003cCommand\u003e listBefore \u003d initialImage.getSubHistory();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                currentEdit.replaceTempWithOriginal();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                currentEdit.getTempImage().setWaterMark(false);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                for (Command pastCommand: listBefore) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                    pastCommand.execute(currentEdit, model, history);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                String exceptionString \u003d e.toString().substring(58);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                throw new CommandException(\"Error in [\" + command.toString() + \"]:\\n\" + exceptionString);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (this.isNewCommand) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            this.isNewCommand \u003d false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            currentEdit.addCommand(this);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            currentEdit.displayTempImage();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        return new CommandResult(Messages.MESSAGE_SETPRESET_SUCCESS + \" \" + toPrint.toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public boolean hasWaterMarkCommand() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        return this.hasWaterMarkCommand;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            || (other instanceof SetPresetCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            \u0026\u0026 (this.presetName.equals(((SetPresetCommand) other).presetName)));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author*/"
      }
    ],
    "authorContributionMap": {
      "thamsimun": 90
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/TabCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "/* @@author Carrein */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.model.Album;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": " * Switches between tabs in the informationPanel."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": "public class TabCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"tab\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": "            + \": Switches between tabs in the information panel.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static final String MESSAGE_TAB_SUCCESS \u003d \"Tab switched.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private final Album album \u003d Album.getInstance();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public CommandResult execute(CurrentEdit currentEdit, Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "        album.switchTab();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return new CommandResult(MESSAGE_TAB_SUCCESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "randytqw"
        },
        "content": "/* @@author randytqw */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "randytqw"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.model.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "randytqw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "randytqw"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previous state."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "randytqw"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "randytqw"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public CommandResult execute(CurrentEdit current, Model model, CommandHistory history)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        requireNonNull(current);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        Image initialImage \u003d current.getTempImage();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        if (initialImage \u003d\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_DID_NOT_OPEN);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        if (!current.canUndoTemp()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        current.setUndoTemp();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        current.replaceTempWithOriginal();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        current.updateHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        List\u003cCommand\u003e tempHistory \u003d current.getTempSubHistory();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        for (Command command :tempHistory) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            command.execute(current, model, history);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        current.displayTempImage();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "randytqw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "randytqw": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/WaterMarkCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kayheen"
        },
        "content": "/* @@author kayheen */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kayheen"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import java.awt.AlphaComposite;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import java.awt.Color;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import java.awt.Font;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import java.awt.FontMetrics;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import java.awt.Graphics2D;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import java.awt.geom.Rectangle2D;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import java.awt.image.BufferedImage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.model.image.Image;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kayheen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kayheen"
        },
        "content": " * This command allows users to add a watermark to an image."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kayheen"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kayheen"
        },
        "content": "public class WaterMarkCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"wm\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            + \": Include a text watermark on the image currently editing. \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            + \"Parameters: WATERMARK \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" FomoFoto\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private boolean isNewCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private boolean isPreset;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public WaterMarkCommand(String words, boolean isNewCommand) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        setCommandName(COMMAND_WORD);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        setArguments(words);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        this.text \u003d \"\\u00a9 \" + words;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        this.isNewCommand \u003d isNewCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        this.isPreset \u003d !isNewCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public CommandResult execute(CurrentEdit currentEdit,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                                 Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        if (currentEdit.tempImageDoNotExist()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_DID_NOT_OPEN);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        Image initialImage \u003d currentEdit.getTempImage();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        BufferedImage bufferedImage \u003d initialImage.getBufferedImage();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        String type \u003d initialImage.getFileType();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        // calls the internal method to add a watermark to the initial image."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        BufferedImage watermarked \u003d initGraphicProperties(bufferedImage, type);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        if (this.isNewCommand) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            // this is when user types in a new command on the commandline."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            this.isNewCommand \u003d false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            if (initialImage.hasWaterMark()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_HAS_WATERMARK);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            initialImage.setWaterMark(true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            currentEdit.updateTempImage(watermarked);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            currentEdit.addCommand(this);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            currentEdit.displayTempImage();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            //this is when undo redo or when preset and image has no watermark."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            if (!isPreset || !initialImage.hasWaterMark()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                initialImage.setWaterMark(true);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                currentEdit.updateTempImage(watermarked);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                //this when preset and image already has a watermark."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_HAS_WATERMARK);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        return new CommandResult(Messages.MESSAGE_WATERMARK_SUCCESS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * Initialises the watermarked image."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * @param bufferedImage the initial buffered image."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * @param type the image type of the initial buffered image"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * @return the watermarked image."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private BufferedImage initGraphicProperties(BufferedImage bufferedImage, String type) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        // determine image type and handle correct transparency"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        int imageType \u003d \"png\".equalsIgnoreCase(type) ? BufferedImage.TYPE_INT_ARGB : BufferedImage.TYPE_INT_RGB;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        BufferedImage watermarked \u003d new BufferedImage(bufferedImage.getWidth(), bufferedImage.getHeight(), imageType);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        // initializes necessary graphic properties"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        Graphics2D w \u003d (Graphics2D) watermarked.getGraphics();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        w.drawImage(bufferedImage, 0, 0, null);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        AlphaComposite alphaChannel \u003d AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.4f);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        w.setComposite(alphaChannel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        w.setColor(Color.GRAY);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        w.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 32));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        FontMetrics fontMetrics \u003d w.getFontMetrics();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        Rectangle2D rect \u003d fontMetrics.getStringBounds(text, w);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        // calculate centre of the image"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        int centerX \u003d (bufferedImage.getWidth() - (int) rect.getWidth()) / 2;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        int centerY \u003d bufferedImage.getHeight() / 2;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        // add text overlay to the image"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        w.drawString(text, centerX, centerY);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        w.dispose();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        return watermarked;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                || (other instanceof WaterMarkCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                \u0026\u0026 (this.text.equals(((WaterMarkCommand) other).text)));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        return \"wm \" + text;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kayheen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kayheen": 116
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/BlackWhiteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author thamsimun */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import java.util.OptionalInt;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.commands.BlackWhiteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " * This class parses the black/white command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "public class BlackWhiteCommandParser implements Parser\u003cBlackWhiteCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * Parses the BlackWhite Command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * @param args argument"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * @return a BlackWhiteCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * @throws ParseException is thrown if the value is not an integer or unspecified."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public BlackWhiteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        OptionalInt threshold;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (args.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            threshold \u003d OptionalInt.empty();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            args \u003d args.trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            String[] parsed \u003d args.split(\" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            if (parsed.length \u003e 1) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                    BlackWhiteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            if (parsed.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                    threshold \u003d OptionalInt.of(Integer.parseInt(parsed[0]));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                    throw new ParseException(String.format(Messages.MESSAGE_BLACKWHITE_INT_ERROR,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                        BlackWhiteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                Character lastletter \u003d parsed[0].charAt(parsed[0].length() - 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                if (lastletter.equals(\u0027f\u0027) || lastletter.equals(\u0027F\u0027) || lastletter.equals(\u0027d\u0027)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                    || lastletter.equals(\u0027D\u0027)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                    throw new ParseException(String.format(Messages.MESSAGE_BLACKWHITE_INT_ERROR,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                        BlackWhiteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                if (threshold.isPresent() \u0026\u0026 (threshold.getAsInt() \u003c 0)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                    throw new ParseException(String.format(Messages.MESSAGE_NEGATIVE_ERROR,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                        BlackWhiteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                threshold \u003d OptionalInt.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        return new BlackWhiteCommand(threshold);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author*/"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "thamsimun": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/BrightnessCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author thamsimun */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import java.util.OptionalDouble;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.commands.BrightnessCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " * This class parses the contrast command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "public class BrightnessCommandParser implements Parser\u003cBrightnessCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * Parses the Contrast Command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * @param args argument"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * @return a ContrastCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * @throws ParseException is thrown if the value is not an integer or unspecified."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public BrightnessCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        OptionalDouble brightnessValue;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (args.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            brightnessValue \u003d OptionalDouble.empty();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            args \u003d args.trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            String[] parsed \u003d args.split(\" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            if (parsed.length \u003e 1) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                    BrightnessCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            if (parsed.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                    brightnessValue \u003d OptionalDouble.of(Double.parseDouble(parsed[0]));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                    throw new ParseException(String.format(Messages.MESSAGE_BRIGHTNESS_DOUBLE_ERROR,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                        BrightnessCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                Character lastletter \u003d parsed[0].charAt(parsed[0].length() - 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                if (lastletter.equals(\u0027f\u0027) || lastletter.equals(\u0027F\u0027) || lastletter.equals(\u0027d\u0027)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                    || lastletter.equals(\u0027D\u0027)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                    throw new ParseException(String.format(Messages.MESSAGE_BRIGHTNESS_DOUBLE_ERROR,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                        BrightnessCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                if (brightnessValue.isPresent() \u0026\u0026 (brightnessValue.getAsDouble() \u003c 0)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                    throw new ParseException(String.format(Messages.MESSAGE_NEGATIVE_ERROR,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                        BrightnessCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                brightnessValue \u003d OptionalDouble.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        return new BrightnessCommand(brightnessValue);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author*/"
      }
    ],
    "authorContributionMap": {
      "thamsimun": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public static final Prefix PREFIX_DIRECTORY \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public static final Prefix PREFIX_FILENAME \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "randytqw": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ContrastCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author thamsimun */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import java.util.OptionalDouble;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.commands.ContrastCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " * This class parses the contrast command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "public class ContrastCommandParser implements Parser\u003cContrastCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * Parses the Contrast Command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * @param args argument"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * @return a ContrastCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * @throws ParseException is thrown if the value is not an integer or unspecified."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public ContrastCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        OptionalDouble contrastValue;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (args.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            contrastValue \u003d OptionalDouble.empty();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            args \u003d args.trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            String[] parsed \u003d args.split(\" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            if (parsed.length \u003e 1) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                    ContrastCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            if (parsed.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                    contrastValue \u003d OptionalDouble.of(Double.parseDouble(parsed[0]));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                    throw new ParseException(String.format(Messages.MESSAGE_CONTRAST_DOUBLE_ERROR,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                        ContrastCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                Character lastletter \u003d parsed[0].charAt(parsed[0].length() - 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                if (lastletter.equals(\u0027f\u0027) || lastletter.equals(\u0027F\u0027) || lastletter.equals(\u0027d\u0027)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                    || lastletter.equals(\u0027D\u0027)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                    throw new ParseException(String.format(Messages.MESSAGE_CONTRAST_DOUBLE_ERROR,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                        ContrastCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                if (contrastValue.isPresent() \u0026\u0026 (contrastValue.getAsDouble() \u003c 0)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                    throw new ParseException(String.format(Messages.MESSAGE_NEGATIVE_ERROR,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                        ContrastCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                contrastValue \u003d OptionalDouble.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        return new ContrastCommand(contrastValue);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author*/"
      }
    ],
    "authorContributionMap": {
      "thamsimun": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CropCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kayheen"
        },
        "content": "/* @@author kayheen */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kayheen"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.commands.CropCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kayheen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kayheen"
        },
        "content": " * This class parses the crop command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kayheen"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kayheen"
        },
        "content": "public class CropCommandParser implements Parser\u003cCropCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * Parses the Crop Command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * @return a CropCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public CropCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            args \u003d args.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            String[] parsed \u003d args.split(\" \");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            if (parsed.length \u003e 4) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                        CropCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            int xValue \u003d Integer.parseInt(parsed[0]);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            int yValue \u003d Integer.parseInt(parsed[1]);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            int width \u003d Integer.parseInt(parsed[2]);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            int height \u003d Integer.parseInt(parsed[3]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            if (xValue \u003c 0 || yValue \u003c 0 || width \u003c 0 || height \u003c 0) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                throw new ParseException(String.format(Messages.MESSAGE_CROP_INT_ERROR,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                        CropCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            return new CropCommand(xValue, yValue, width, height);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_CROP_INT_ERROR, CropCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, CropCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kayheen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kayheen": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ExportCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "randytqw"
        },
        "content": "/* @@author randytqw */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "randytqw"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DIRECTORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILENAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "randytqw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "randytqw"
        },
        "content": " * Parses input arguments and creates a new ExportCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "randytqw"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "randytqw"
        },
        "content": "public class ExportCommandParser implements Parser\u003cExportCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     * Parses the given {@code String} of arguments in the context"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     * of the ImportCommand and returns an ImportCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public ExportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        // Boolean value to indicate if FomoFoto should print directory or file return message."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        ArgumentMultimap map \u003d ArgumentTokenizer.tokenize(args, PREFIX_FILENAME, PREFIX_DIRECTORY);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        if (!arePrefixesPresent(map, PREFIX_FILENAME, PREFIX_DIRECTORY)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            || !map.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        String filename \u003d ParserUtil.parseFilename(map.getValue(PREFIX_FILENAME).get());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        String path \u003d ParserUtil.parseFilename(map.getValue(PREFIX_DIRECTORY).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        return new ExportCommand(path, filename);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "randytqw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "randytqw": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FomoFotoParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.commands.BlackWhiteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.commands.BrightnessCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.commands.ContrastCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.commands.CropCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.commands.ListFilesCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.commands.OpenCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.commands.ResizeCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.commands.RotateCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.commands.SaveCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.commands.SavePresetCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.commands.SetPresetCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.commands.TabCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.commands.WaterMarkCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrein"
        },
        "content": "public class FomoFotoParser {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itszp"
        },
        "content": "        case ListFilesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itszp"
        },
        "content": "            return new ListFilesCommand();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itszp"
        },
        "content": "        case SaveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itszp"
        },
        "content": "            return new SaveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "carrein"
        },
        "content": "        case ImportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "carrein"
        },
        "content": "            return new ImportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        case RotateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            return new RotateCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itszp"
        },
        "content": "        case OpenCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itszp"
        },
        "content": "            return new OpenCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        case ContrastCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            return new ContrastCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        case CropCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            return new CropCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        case BrightnessCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            return new BrightnessCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        case BlackWhiteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            return new BlackWhiteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "carrein"
        },
        "content": "        case TabCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "carrein"
        },
        "content": "            return new TabCommand();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        case ResizeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            return new ResizeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        case ExportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            return new ExportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        case SavePresetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            return new SavePresetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        case SetPresetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            return new SetPresetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        case WaterMarkCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            return new WaterMarkCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        default: throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itszp": 11,
      "kayheen": 11,
      "carrein": 6,
      "randytqw": 22,
      "-": 54,
      "thamsimun": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ImportCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "/* @@author Carrein */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static seedu.address.commons.core.Config.MAX_FILE_SIZE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static seedu.address.commons.core.Config.SAMPLE_FOLDER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": "import javax.imageio.ImageIO;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.apache.commons.io.FileUtils;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.logic.ResourceWalker;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.model.Album;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.model.image.Image;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": " * Parses input arguments and creates a new ImportImage object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": "public class ImportCommandParser implements Parser\u003cImportCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private final Album album \u003d Album.getInstance();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private final File directory \u003d new File(album.getAssetsFilepath());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Parses the given {@code String} of arguments in the context"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * of the ImportCommand and returns an ImportCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public ImportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": "        // Boolean value to indicate if FomoFoto should print directory or file return message."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrein"
        },
        "content": "        boolean isDirectory \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrein"
        },
        "content": "        // Trim to prevent excess whitespace."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrein"
        },
        "content": "        args \u003d args.trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrein"
        },
        "content": "        File folder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "carrein"
        },
        "content": "        File[] listOfFiles;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "carrein"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "carrein"
        },
        "content": "            switch (validPath(args)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "carrein"
        },
        "content": "            // TODO - Pending refactor."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "carrein"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "carrein"
        },
        "content": "                if (album.getImageList().size() \u003e 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "carrein"
        },
        "content": "                    throw new ParseException(Messages.MESSAGE_SAMPLE_IMPORT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "carrein"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "carrein"
        },
        "content": "                isDirectory \u003d true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "carrein"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "carrein"
        },
        "content": "                    ResourceWalker.walk(SAMPLE_FOLDER);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "carrein"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "carrein"
        },
        "content": "                    e.printStackTrace();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "carrein"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "carrein"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "carrein"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "carrein"
        },
        "content": "                isDirectory \u003d true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "carrein"
        },
        "content": "                folder \u003d new File(args);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "carrein"
        },
        "content": "                listOfFiles \u003d folder.listFiles();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "carrein"
        },
        "content": "                for (File f : listOfFiles) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "carrein"
        },
        "content": "                    String path \u003d f.getAbsolutePath();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "carrein"
        },
        "content": "                    // File must be valid and not hidden and not ridiculously large."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "carrein"
        },
        "content": "                    if (validFormat(path) \u0026\u0026 !isHidden(path) \u0026\u0026 !isLarge(path) \u0026\u0026 validImage(path)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "carrein"
        },
        "content": "                        Image image \u003d new Image(path);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "carrein"
        },
        "content": "                        if (!duplicateFile(image)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "carrein"
        },
        "content": "                            try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "carrein"
        },
        "content": "                                File file \u003d new File(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "carrein"
        },
        "content": "                                album.addToImageList(path);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "carrein"
        },
        "content": "                                FileUtils.copyFileToDirectory(file, directory);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "carrein"
        },
        "content": "                            } catch (IOException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "carrein"
        },
        "content": "                                e.printStackTrace();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "carrein"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "carrein"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "carrein"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "carrein"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "carrein"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "carrein"
        },
        "content": "            case 0:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "carrein"
        },
        "content": "                // File must be valid and not hidden and not ridiculously large."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "carrein"
        },
        "content": "                if (validFormat(args) \u0026\u0026 !isHidden(args)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "carrein"
        },
        "content": "                    if (validImage(args)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "carrein"
        },
        "content": "                        if (!isLarge(args)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "carrein"
        },
        "content": "                            Image image \u003d new Image(args);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "carrein"
        },
        "content": "                            if (!duplicateFile(image)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "carrein"
        },
        "content": "                                try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "carrein"
        },
        "content": "                                    File file \u003d new File(args);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "carrein"
        },
        "content": "                                    FileUtils.copyFileToDirectory(file, directory);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "carrein"
        },
        "content": "                                    album.addToImageList(args);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "carrein"
        },
        "content": "                                } catch (IOException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "carrein"
        },
        "content": "                                    e.printStackTrace();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "carrein"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "carrein"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "carrein"
        },
        "content": "                                throw new ParseException(Messages.MESSAGE_DUPLICATE_FILE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "carrein"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "carrein"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "carrein"
        },
        "content": "                            throw new ParseException(Messages.MESSAGE_INVALID_SIZE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "carrein"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "carrein"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "carrein"
        },
        "content": "                        throw new ParseException(Messages.MESSAGE_UNABLE_TO_READ_FILE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "carrein"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "carrein"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "carrein"
        },
        "content": "                    throw new ParseException(Messages.MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "carrein"
        },
        "content": "                }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "carrein"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "carrein"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "carrein"
        },
        "content": "                throw new ParseException(Messages.MESSAGE_INVALID_PATH);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "carrein"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "carrein"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "carrein"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "carrein"
        },
        "content": "        album.refreshAlbum();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return new ImportCommand(isDirectory);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Given a URL checks if the given path is valid."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "carrein"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @param url Path to a file or directory."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @return 1 if directory, 0 if file, -1 otherwise."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public int validPath(String url) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "carrein"
        },
        "content": "        // Trim url to remove trailing whitespace"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "carrein"
        },
        "content": "        if (url.equals(\"sample\")) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "carrein"
        },
        "content": "            return 2;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "carrein"
        },
        "content": "        File file \u003d new File(url.trim());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "carrein"
        },
        "content": "        if (file.isDirectory()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "carrein"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "carrein"
        },
        "content": "        if (file.isFile()) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "carrein"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Given a Image checks if the file name already exists."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "carrein"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @param image image to for checking."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @return True if image file name exist, false otherwise."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public boolean duplicateFile(Image image) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return album.imageExist(image.getName().fullName);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Given a URL checks if the file is of an image type."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "carrein"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @param url Path to a file or directory."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @return True if path is valid, false otherwise."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @throws IOException Throws exception if content cannot be probed."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public boolean validFormat(String url) throws IOException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String mime \u003d Files.probeContentType(Paths.get(url));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return (mime !\u003d null \u0026\u0026 mime.split(\"/\")[0].equals(\"image\")) ? true : false;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Given a URL checks if the file is hidden."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Uses isHidden() for DOS based machines and checks \u0027.\u0027 character for UNIX based machines."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "carrein"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @param url Path to a file or directory."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @return True if file is hidden, false otherwise."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public boolean isHidden(String url) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "carrein"
        },
        "content": "        File file \u003d new File(url);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return (file.isHidden() || file.getName().substring(0, 1).equals(\".\")) ? true : false;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Given a URL checks if the file is too large for bufferedImage to process."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Constant for"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "carrein"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @param url Path to a file or directory."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @return True if file is too large, false otherwise."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public boolean isLarge(String url) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "carrein"
        },
        "content": "        File file \u003d new File(url);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return file.length() \u003e MAX_FILE_SIZE;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Checks is url given is a valid Image file."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "carrein"
        },
        "content": "     *"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @param url Path to file or directory"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @return True if file is a valid image, false otherwise."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @throws IOException Throws exception if file cannot be opened."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public boolean validImage(String url) throws IOException {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "carrein"
        },
        "content": "        File file \u003d new File(url);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "carrein"
        },
        "content": "        if (ImageIO.read(file) \u003d\u003d null) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "carrein"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "carrein"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "carrein": 201
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/OpenCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itszp"
        },
        "content": "/* @@author itszp */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itszp"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itszp"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.logic.commands.OpenCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itszp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itszp"
        },
        "content": " * Parses input arguments and creates a new OpenCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itszp"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itszp"
        },
        "content": "public class OpenCommandParser implements Parser\u003cOpenCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itszp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * Parses the given {@code String} of arguments in the context"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * of the OpenCommand and returns an OpenCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itszp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * @throws ParseException if the string is empty."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itszp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public OpenCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itszp"
        },
        "content": "        args \u003d args.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itszp"
        },
        "content": "        if (args.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itszp"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, OpenCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itszp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itszp"
        },
        "content": "        return new OpenCommand(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itszp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itszp": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     * Trims the filename"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     * @param filename"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     * @return Filename without leading and trailing spaces"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public static String parseFilename(String filename) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        requireNonNull(filename);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        String trimmedFilename \u003d filename.trim();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        return trimmedFilename;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "randytqw": 11,
      "-": 124
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ResizeCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kayheen"
        },
        "content": "/* @@author kayheen */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kayheen"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.commands.ResizeCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kayheen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kayheen"
        },
        "content": " * This class parses the resize command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kayheen"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kayheen"
        },
        "content": "public class ResizeCommandParser implements Parser\u003cResizeCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * Parses the Resize Command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * @param args is the arguments taken in with the command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * @return a ResizeCommand object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public ResizeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            args \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            String[] parsed \u003d args.split(\" \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            if (parsed.length \u003e 2) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                        ResizeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            String w \u003d parsed[0];"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            String h \u003d parsed[1];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            int width \u003d Integer.parseInt(w);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            int height \u003d Integer.parseInt(h);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            if (width \u003c\u003d 0 || height \u003c\u003d 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                throw new ParseException(String.format(Messages.MESSAGE_RESIZE_VALUE_ERROR,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                        ResizeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            return new ResizeCommand(width, height);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_RESIZE_VALUE_ERROR, ResizeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                    ResizeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kayheen"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kayheen": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RotateCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kayheen"
        },
        "content": "/* @@author kayheen */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kayheen"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.commands.RotateCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kayheen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kayheen"
        },
        "content": " * This class parses the rotate command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kayheen"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kayheen"
        },
        "content": "public class RotateCommandParser implements Parser\u003cRotateCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * Parses the Rotate Command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * @return a RotateCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * @throws ParseException is thrown if the value is not an integer or unspecified."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public RotateCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            args \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            String[] parsed \u003d args.split(\" \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            if (parsed.length \u003e 1) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                        RotateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            String deg \u003d parsed[0];"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            int degree \u003d Integer.parseInt(deg);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            if (degree \u003c 0) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                throw new ParseException(String.format(Messages.MESSAGE_ROTATE_DEGREE_ERROR,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                        RotateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            return new RotateCommand(degree);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_ROTATE_DEGREE_ERROR, RotateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                    RotateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kayheen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kayheen": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SaveCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itszp"
        },
        "content": "/* @@author itszp */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itszp"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itszp"
        },
        "content": "import static seedu.address.commons.core.Config.VALID_FILE_TYPES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itszp"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_SAVE_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itszp"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_SAVE_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itszp"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.logic.commands.SaveCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itszp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itszp"
        },
        "content": " * Parses input arguments and creates a new OpenCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itszp"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itszp"
        },
        "content": "public class SaveCommandParser implements Parser\u003cSaveCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itszp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * Parses the given {@code String} of arguments in the context"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * of the SaveCommand and returns an SaveCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itszp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * @throws ParseException if the string is not a valid file name."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itszp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public SaveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itszp"
        },
        "content": "        boolean isValidName \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itszp"
        },
        "content": "        args \u003d args.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itszp"
        },
        "content": "        if (args.isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itszp"
        },
        "content": "            return new SaveCommand(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itszp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itszp"
        },
        "content": "        for (String x : VALID_FILE_TYPES) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itszp"
        },
        "content": "            if (args.endsWith(x)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itszp"
        },
        "content": "                String substring \u003d args.substring(0, args.length() - x.length());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itszp"
        },
        "content": "                if (substring.isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itszp"
        },
        "content": "                    throw new ParseException(MESSAGE_INVALID_SAVE_NAME);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itszp"
        },
        "content": "                }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itszp"
        },
        "content": "                isValidName \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itszp"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itszp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itszp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itszp"
        },
        "content": "        if (!isValidName) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itszp"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_SAVE_TYPE, Arrays.toString(VALID_FILE_TYPES)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itszp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itszp"
        },
        "content": "        return new SaveCommand(args);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itszp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itszp": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SavePresetCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author thamsimun */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.commands.SavePresetCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " * Parses input arguments and creates a new SavePresetCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "public class SavePresetCommandParser implements Parser\u003cSavePresetCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * Parses the SavePreset Command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * @param args argument"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * @return a SavePresetCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * @throws ParseException is thrown if the value is not an integer or unspecified."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public SavePresetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        args \u003d args.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (args.equals(\"\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                SavePresetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        return new SavePresetCommand(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author*/"
      }
    ],
    "authorContributionMap": {
      "thamsimun": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SetPresetCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author thamsimun */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.commands.SetPresetCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " * Parses input arguments and creates a new SavePresetCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "public class SetPresetCommandParser implements Parser\u003cSetPresetCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * Parses the Preset Command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * @param args argument"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * @return a PresetCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * @throws ParseException is thrown if the value is not an integer or unspecified."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public SetPresetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        args \u003d args.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (args.equals(\"\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                SetPresetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        return new SetPresetCommand(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author */"
      }
    ],
    "authorContributionMap": {
      "thamsimun": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/WaterMarkCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kayheen"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.commands.WaterMarkCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kayheen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kayheen"
        },
        "content": " * This class parses the WaterMark command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kayheen"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kayheen"
        },
        "content": "public class WaterMarkCommandParser implements Parser\u003cWaterMarkCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * Parses the WaterMark Command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * @param args the watermark message to add."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * @return a WaterMark object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * @throws ParseException is thrown if the value is not an integer or unspecified."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public WaterMarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        args \u003d args.trim();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        if (\"\".equals(args)) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                    WaterMarkCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        return new WaterMarkCommand(args, true);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kayheen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kayheen": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Album.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "/* @@author Carrein */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static seedu.address.commons.core.Config.ASSETS_FOLDER_TEMP_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": "import javax.imageio.ImageIO;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.apache.commons.io.FileUtils;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.model.image.Image;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.ui.Notifier;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": " * Represents an Album of Images in an ArrayList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": " * Album manages the propertyChangeListener for updates to the UI."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": " * Uses singleton pattern to ensure only a single instance of Album is available."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "public class Album {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "    // Represents a singleton copy of the Album."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private static Album instance;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": "    // Represents the Storage path of assets folder for all raw images."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private final String assetsFilepath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": "    // Represents an ArrayList of image available in assets folder."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private List\u003cImage\u003e imageList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Constructor for Album."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Checks if asset folder exists, creates it if it does not and populates the Album."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private Album() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assetsFilepath \u003d generateAssets();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrein"
        },
        "content": "        populateAlbum();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Gets the current instance of Album."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrein"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @return Returns the singleton Album instance."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static Album getInstance() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "carrein"
        },
        "content": "        if (instance \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "carrein"
        },
        "content": "            instance \u003d new Album();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Gets the list of images in the Album."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "carrein"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @return A list of Image objects."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public List\u003cImage\u003e getImageList() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return imageList;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Gets the filepath of assets folder."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "carrein"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @return String of filepath location."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public String getAssetsFilepath() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return assetsFilepath;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Checks if image exists in assets directory."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "carrein"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @param imageName Image name to check for."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @return True if image exist, false otherwise."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public boolean imageExist(String imageName) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "carrein"
        },
        "content": "        for (Image i : imageList) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "carrein"
        },
        "content": "            if (i.getName().fullName.equals(imageName)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "carrein"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "carrein"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Generates a temp assets folder in the system to store imported images."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Temp assets folder is deleted on termination of the program by means of shutdown hook."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "carrein"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @return Absolute path to generated temp folder."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public String generateAssets() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String tempPath \u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "carrein"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "carrein"
        },
        "content": "            String tDir \u003d System.getProperty(\"user.dir\") + File.separator + ASSETS_FOLDER_TEMP_NAME;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "carrein"
        },
        "content": "            File assetsFolder \u003d new File(tDir);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "carrein"
        },
        "content": "            tempPath \u003d assetsFolder.getAbsolutePath() + File.separator;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "carrein"
        },
        "content": "            if (!assetsFolder.exists()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "carrein"
        },
        "content": "                assetsFolder.mkdir();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "carrein"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "carrein"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "carrein"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "carrein"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "carrein"
        },
        "content": "            return tempPath;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * For each image in assets folder, populate the Album with an Image object."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void populateAlbum() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "carrein"
        },
        "content": "        imageList.clear();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "carrein"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "carrein"
        },
        "content": "            File folder \u003d new File(assetsFilepath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "carrein"
        },
        "content": "            for (File file : folder.listFiles()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "carrein"
        },
        "content": "                addToImageList(file.getAbsolutePath());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "carrein"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "carrein"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "carrein"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void addToImageList(String args) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "carrein"
        },
        "content": "        imageList.add(new Image(args));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Resets the Album to empty."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void clearAlbum() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "carrein"
        },
        "content": "        imageList.clear();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "carrein"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "carrein"
        },
        "content": "            FileUtils.cleanDirectory(new File(assetsFilepath));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "carrein"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "carrein"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void refreshAlbum() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Notifier.firePropertyChangeListener(\"refreshAlbum\", null, null);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void switchTab() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Notifier.firePropertyChangeListener(\"switchTab\", null, null);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /* @@author*/"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "itszp"
        },
        "content": "    /* @@author itszp*/"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "itszp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * Check if file exists in assets folder."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * Returns true if file name exists"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "itszp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * @param args is the string of the file name."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "itszp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public boolean checkFileExist(String args) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "itszp"
        },
        "content": "        File file \u003d new File(assetsFilepath + args);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "itszp"
        },
        "content": "        return (file.isFile());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "itszp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * Uses assetsFilePath to retrieve file as specified by args."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * Returns an Image object."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "itszp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * @param args is the string of the file name."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "itszp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public Image retrieveImage(String args) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "itszp"
        },
        "content": "        return new Image(assetsFilepath + args);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "itszp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * Retrieves all the filenames in assets folder. Returns them in a string array."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "itszp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public String[] getFileNames() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "itszp"
        },
        "content": "        File file \u003d new File(assetsFilepath);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "itszp"
        },
        "content": "        return file.list();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "itszp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * Saves the image to assetsFolder."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "itszp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * @param image is the new image."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * @param name is the name of the new image file."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "itszp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public void saveToAssets(Image image, String name) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "itszp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "itszp"
        },
        "content": "            File outputFile \u003d new File(name);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "itszp"
        },
        "content": "            File saveDirectory \u003d new File(assetsFilepath);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "itszp"
        },
        "content": "            ImageIO.write(image.getBufferedImage(), image.getFileType(), outputFile);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "itszp"
        },
        "content": "            FileUtils.copyFileToDirectory(outputFile, saveDirectory, false);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "itszp"
        },
        "content": "            outputFile.delete();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "itszp"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "itszp"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "itszp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "itszp"
        },
        "content": "    /* @@author*/"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     * @param imageName"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public Image getImageFromList(String imageName) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        Image tempImage \u003d null;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        for (Image i : imageList) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            if (imageName.equals(i.getName().toString())) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "randytqw"
        },
        "content": "                tempImage \u003d i;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        return tempImage;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "carrein"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itszp": 48,
      "carrein": 151,
      "randytqw": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/CurrentEdit.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author thamsimun */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import java.awt.image.BufferedImage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " * The API of the CurrentEdit component."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "public interface CurrentEdit {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    void saveIntoTempFolder(String filename, Image image);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    Image getTempImage();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    void setTempImage();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    void updateTempImage(com.sksamuel.scrimage.Image image);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    void updateTempImage(BufferedImage image);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    void overwriteOriginal(String name);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    void setOriginalImage(Image image);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    void displayTempImage();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    void addCommand(Command command);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    void replaceTempWithOriginal();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    boolean canUndoTemp();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    boolean canRedoTemp();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    List\u003cCommand\u003e getTempSubHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    String getOriginalImageName();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    void updateExif();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    void openImage(Image image);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    void setRedoTemp();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    void setUndoTemp();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    Command getCommandTemp();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    void clearTemp();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    boolean tempImageDoNotExist();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    void updateHistory();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    void deleteHistory();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author*/"
      }
    ],
    "authorContributionMap": {
      "thamsimun": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/model/CurrentEditManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import java.awt.image.BufferedImage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itszp"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itszp"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itszp"
        },
        "content": "import javax.imageio.ImageIO;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itszp"
        },
        "content": "import org.apache.commons.io.FileUtils;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": "import com.google.common.io.Files;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import com.sksamuel.scrimage.nio.JpegWriter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.image.Image;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.ui.Notifier;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " * Represents the in-memory model of the current image being edited on."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "public class CurrentEditManager implements CurrentEdit {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private final String editName \u003d \"temp_img.png\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itszp"
        },
        "content": "    private final String originalName \u003d \"ori_img.png\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private final String editFilePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private final String editFileName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private final String originalFileName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private final File directoryTo;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private Image originalImage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private Image tempImage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    private List\u003cCommand\u003e tempList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    private int tempIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itszp"
        },
        "content": "    private String originalImageName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    /* @@author thamsimun */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public CurrentEditManager() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        this.editFilePath \u003d generateEdit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        this.editFileName \u003d editFilePath + editName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        this.originalFileName \u003d editFilePath + originalName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        this.directoryTo \u003d new File(editFilePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        this.originalImage \u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        this.tempImage \u003d null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        this.originalImageName \u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    /* @@author*/"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itszp"
        },
        "content": "    /* @@author itszp */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itszp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * Opens an image in FomoFoto."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * This method creates two copies of the original image in temp folder and instantiates them."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itszp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * @param image is the image to be opened."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itszp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public void openImage(Image image) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itszp"
        },
        "content": "        this.originalImageName \u003d image.getName().getFullName();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itszp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itszp"
        },
        "content": "            FileUtils.cleanDirectory(new File(editFilePath));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itszp"
        },
        "content": "            File file \u003d new File(image.getUrl());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itszp"
        },
        "content": "            FileUtils.copyFileToDirectory(file, directoryTo);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itszp"
        },
        "content": "            File currentFile \u003d new File(editFilePath + this.originalImageName);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itszp"
        },
        "content": "            File tempFile \u003d new File(editFileName);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itszp"
        },
        "content": "            FileUtils.moveFile(currentFile, tempFile);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itszp"
        },
        "content": "            FileUtils.copyFileToDirectory(file, directoryTo);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itszp"
        },
        "content": "            File originalFile \u003d new File(originalFileName);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itszp"
        },
        "content": "            FileUtils.moveFile(currentFile, originalFile);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itszp"
        },
        "content": "            this.originalImage \u003d new Image(originalFile.getAbsolutePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itszp"
        },
        "content": "            this.tempImage \u003d new Image(tempFile.getAbsolutePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itszp"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itszp"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itszp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itszp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * Saves the image into tempFolder."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itszp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * @param image is the new image."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * @param filename is the name of the new image file."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itszp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public void saveIntoTempFolder(String filename, Image image) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itszp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itszp"
        },
        "content": "            File outputFile \u003d new File(filename);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itszp"
        },
        "content": "            File directory \u003d new File(editFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itszp"
        },
        "content": "            ImageIO.write(image.getBufferedImage(), image.getFileType(), outputFile);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itszp"
        },
        "content": "            FileUtils.copyFileToDirectory(outputFile, directory, false);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itszp"
        },
        "content": "            outputFile.delete();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itszp"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itszp"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itszp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itszp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * Returns the instance of the tempImage."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "itszp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public Image getTempImage() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "itszp"
        },
        "content": "        return tempImage;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "itszp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * Creates tempImage instance of temp_img.png located in temp folder."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "itszp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public void setTempImage() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "itszp"
        },
        "content": "        Image image \u003d new Image(editFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "itszp"
        },
        "content": "        this.tempImage \u003d image;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "itszp"
        },
        "content": "    /* @@author*/"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    /* @@author thamsimun */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * Update tempImage instance of temp_img.png located in temp folder."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public void updateTempImage(com.sksamuel.scrimage.Image image) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        tempList \u003d tempImage.getCommandHistory();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        tempIndex \u003d tempImage.getIndex();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        boolean hasWaterMark \u003d tempImage.hasWaterMark();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        image.output(tempImage.getUrl(), new JpegWriter(100, true));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        tempImage \u003d new Image(editFileName);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        tempImage.setIndex(tempIndex);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        tempImage.setHistory(tempList);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        tempImage.setWaterMark(hasWaterMark);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    /* @@author*/"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    /* @@author kayheen */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * Update tempImage instance of temp_img.png located in temp folder."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public void updateTempImage(BufferedImage bufferedimage) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        tempList \u003d tempImage.getCommandHistory();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        tempIndex \u003d tempImage.getIndex();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        boolean hasWaterMark \u003d tempImage.hasWaterMark();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            File outputFile \u003d new File(editFileName);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            ImageIO.write(bufferedimage, tempImage.getFileType(), outputFile);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        tempImage \u003d new Image(editFileName);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        tempImage.setHistory(tempList);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        tempImage.setIndex(tempIndex);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        tempImage.setWaterMark(hasWaterMark);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    /* @@author */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public void displayTempImage() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        Notifier.firePropertyChangeListener(\"import\", null, tempImage.getUrl());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    /* @@author randytqw */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     * Adds an executed command into Image history."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     * @param command Command to be added."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public void addCommand(Command command) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        tempImage.addHistory(command);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        updateHistory();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public List\u003cCommand\u003e getTempSubHistory() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        return tempImage.getSubHistory();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public void replaceTempWithOriginal() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        //List\u003cCommand\u003e tempList \u003d tempImage.getCommandHistory();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        //int index \u003d tempImage.getIndex();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            File newTemp \u003d new File(editFilePath + originalName);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            File directory \u003d new File(tempImage.getUrl());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            FileUtils.copyFile(newTemp, directory, false);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            BufferedImage tempBuffer \u003d originalImage.getBufferedImage();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            tempImage.setBufferedImage(tempBuffer);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            //tempImage.setHistory(tempList);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            //tempImage.setIndex(index);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public boolean canUndoTemp() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        return tempImage.canUndo();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public boolean canRedoTemp() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        return tempImage.canRedo();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public void setUndoTemp() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        tempImage.setUndo();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public void setRedoTemp() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        tempImage.setRedo();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public Command getCommandTemp() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        return tempImage.getCommand();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    /* @@author */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "itszp"
        },
        "content": "    /* @@author itszp */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "itszp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * Creates originalImage instance of {@code image} located in temp_folder."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "itszp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public void setOriginalImage(Image image) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "itszp"
        },
        "content": "        this.originalImage \u003d new Image(editFileName);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "itszp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * Overwrites ori_img.png with tempImage. Sets originalImageName as {@code name}."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "itszp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public void overwriteOriginal(String name) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "itszp"
        },
        "content": "        saveIntoTempFolder(\"ori_img.png\", tempImage);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "itszp"
        },
        "content": "        this.originalImageName \u003d name;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "itszp"
        },
        "content": "        this.originalImage \u003d new Image(editFileName);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "itszp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * Resets tempImage history."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "itszp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public void deleteHistory() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "itszp"
        },
        "content": "        tempImage.setHistory(new ArrayList\u003cCommand\u003e());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "itszp"
        },
        "content": "        tempImage.setIndex(0);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "itszp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "itszp"
        },
        "content": "     * Returns the original name of the image."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "itszp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public String getOriginalImageName() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "itszp"
        },
        "content": "        return this.originalImageName;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "itszp"
        },
        "content": "    /* @@author*/"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /* @@author Carrein */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Fires a notifier to update the EXIF pane of the Information Panel."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void updateExif() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Notifier.firePropertyChangeListener(\"refreshDetails\", null, this.tempImage);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Fires a notifier to update the EXIF pane of the Information Panel."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void updateHistory() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Notifier.firePropertyChangeListener(\"refreshHistory\", null, tempImage.getSubHistory());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Helper method to clean up temp folder on application exit."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void clearTemp() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "carrein"
        },
        "content": "        File dir \u003d new File(editFilePath);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "carrein"
        },
        "content": "        for (File file : dir.listFiles()) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "carrein"
        },
        "content": "            file.delete();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Generates a temp edit folder in the system to store edited images."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Temp edit folder is deleted on termination of the program by means of shutdown hook."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "carrein"
        },
        "content": "     *"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @return Absolute path to generated temp folder."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public String generateEdit() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String tempPath \u003d null;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "carrein"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "carrein"
        },
        "content": "            File editFolder \u003d Files.createTempDir();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "carrein"
        },
        "content": "            editFolder.deleteOnExit();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "carrein"
        },
        "content": "            tempPath \u003d editFolder.getAbsolutePath() + File.separator;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "carrein"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "carrein"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return tempPath;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public boolean tempImageDoNotExist() {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return tempImage \u003d\u003d null;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /* @@author*/"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itszp": 103,
      "kayheen": 22,
      "carrein": 59,
      "randytqw": 60,
      "thamsimun": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Returns the AddressBook"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Returns an unmodifiable view of the filtered person list"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "carrein"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitAddressBook();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selected person in the filtered person list."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * null if no person is selected."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the selected person in the filtered person list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * null if no person is selected."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    Person getSelectedPerson();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the selected person in the filtered person list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    void setSelectedPerson(Person person);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 10,
      "-": 117
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final SimpleObjectProperty\u003cPerson\u003e selectedPerson \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.addListener(this::ensureSelectedPersonIsValid);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.hasPerson(person);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.removePerson(target);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.addPerson(person);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected person \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        return selectedPerson;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person getSelectedPerson() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        return selectedPerson.getValue();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson(Person person) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        if (person !\u003d null \u0026\u0026 !filteredPersons.contains(person)) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        selectedPerson.setValue(person);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ensures {@code selectedPerson} is a valid person in {@code filteredPersons}."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    private void ensureSelectedPersonIsValid(ListChangeListener.Change\u003c? extends Person\u003e change) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            if (selectedPerson.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                // null is always a valid selected person, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean wasSelectedPersonReplaced \u003d change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedPerson.getValue());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            if (wasSelectedPersonReplaced) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                // Update selectedPerson to its new value."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedPerson.getValue());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                selectedPerson.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean wasSelectedPersonRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                    .anyMatch(removedPerson -\u003e selectedPerson.getValue().isSamePerson(removedPerson));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            if (wasSelectedPersonRemoved) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                // Select the person that came before it in the list,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "                // or clear the selection if there is no such person."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "                selectedPerson.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(selectedPerson.get(), other.selectedPerson.get());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "carrein": 2,
      "randytqw": 2,
      "-": 224
    }
  },
  {
    "path": "src/main/java/seedu/address/model/TransformationSet.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author thamsimun */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.commands.WaterMarkCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " * Represents a TransformationSet of preset commands."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " * TransformationSet manages the preset commands for users to use."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " * Uses singleton pattern to ensure only a single instance of TransformationSet is used the whole runtime of"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " * the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thamsimun"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "public class TransformationSet {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    // Represents a singleton copy of the TransformationSet."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private static TransformationSet instance \u003d null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    //List of transformation created by users."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private HashMap\u003cString, List\u003cCommand\u003e\u003e transformationMap;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private TransformationSet() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        this.transformationMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * Gets the current instance of TransformationSet."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * @return Returns the singleton TransformationSet instance."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public static TransformationSet getInstance() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        if (instance \u003d\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            instance \u003d new TransformationSet();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * Check if there is a watermarkcommand in the list of command found with the key."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * @param presetName name of the preset"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * @return true if there is a watermarkcommand, else false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public boolean hasWaterMarkCommand(String presetName) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        List\u003cCommand\u003e commandList \u003d transformationMap.get(presetName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        for (Command command: commandList) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            if (command instanceof WaterMarkCommand) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public List\u003cCommand\u003e findTransformation(String presetName) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        return transformationMap.get(presetName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public boolean isPresent(String presetName) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        return transformationMap.containsKey(presetName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public void addTransformation(String presetName, List\u003cCommand\u003e list) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        transformationMap.put(presetName, list);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        transformationMap.clear();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author*/"
      }
    ],
    "authorContributionMap": {
      "thamsimun": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/model/image/Height.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "/* @@author Carrein */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": "package seedu.address.model.image;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": " * Represents a Image\u0027s height in FomoFoto\u0027s Album."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidHeight(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": "public class Height {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": "            \"Height should not be zero or blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Constructs a {@code Height}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @param height A valid height."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public Height(String height) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "        requireNonNull(height);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "        checkArgument(isValidHeight(height), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": "        value \u003d height;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Returns true if a given string is a valid height."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static boolean isValidHeight(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": "        boolean check \u003d Integer.parseInt(test) \u003c\u003d 0 ? false : true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return check;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "carrein"
        },
        "content": "                || (other instanceof Height // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u0026\u0026 value.equals(((Height) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "carrein"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/model/image/Image.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "/* @@author Carrein */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": "package seedu.address.model.image;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.awt.image.BufferedImage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": "import javax.imageio.ImageIO;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.apache.commons.io.FilenameUtils;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "import com.drew.imaging.ImageMetadataReader;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": "import com.drew.metadata.Directory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "import com.drew.metadata.Metadata;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "import com.drew.metadata.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.logic.commands.SetPresetCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.logic.commands.WaterMarkCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": " * Represents an Image in FomoFoto."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": "public class Image {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Data fields."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private Height height;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private Width width;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private Size size;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private BufferedImage buffer;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private String url;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private String fileType;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private Metadata metadata;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private List\u003cCommand\u003e commandHistory;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private boolean hasWaterMark;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public Image(String url) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "carrein"
        },
        "content": "        requireAllNonNull(url);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "carrein"
        },
        "content": "        File file \u003d new File(url);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "carrein"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "carrein"
        },
        "content": "            this.buffer \u003d ImageIO.read(file);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "carrein"
        },
        "content": "            this.metadata \u003d ImageMetadataReader.readMetadata(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "carrein"
        },
        "content": "            buffer \u003d ImageIO.read(file);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "carrein"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "carrein"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "carrein"
        },
        "content": "        this.url \u003d url;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "carrein"
        },
        "content": "        this.fileType \u003d FilenameUtils.getExtension(url);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "carrein"
        },
        "content": "        this.size \u003d new Size(String.valueOf(file.length()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "carrein"
        },
        "content": "        this.name \u003d new Name(FilenameUtils.getBaseName(url),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "carrein"
        },
        "content": "                FilenameUtils.getExtension(url), FilenameUtils.getName(url));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "carrein"
        },
        "content": "        this.width \u003d new Width(String.valueOf(buffer.getWidth()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "carrein"
        },
        "content": "        this.height \u003d new Height(String.valueOf(buffer.getHeight()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "carrein"
        },
        "content": "        commandHistory \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "carrein"
        },
        "content": "        index \u003d 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "carrein"
        },
        "content": "        this.hasWaterMark \u003d false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public Image(File file) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "carrein"
        },
        "content": "        requireAllNonNull(file);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "carrein"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "carrein"
        },
        "content": "            this.buffer \u003d ImageIO.read(file);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "carrein"
        },
        "content": "            this.metadata \u003d ImageMetadataReader.readMetadata(file);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "carrein"
        },
        "content": "            buffer \u003d ImageIO.read(file);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "carrein"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "carrein"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "carrein"
        },
        "content": "        this.url \u003d file.getAbsolutePath();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "carrein"
        },
        "content": "        this.fileType \u003d FilenameUtils.getExtension(file.getName());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "carrein"
        },
        "content": "        this.size \u003d new Size(String.valueOf(file.length()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "carrein"
        },
        "content": "        this.name \u003d new Name(FilenameUtils.getBaseName(url),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "carrein"
        },
        "content": "                FilenameUtils.getExtension(url), FilenameUtils.getName(url));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "carrein"
        },
        "content": "        this.width \u003d new Width(String.valueOf(buffer.getWidth()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "carrein"
        },
        "content": "        this.height \u003d new Height(String.valueOf(buffer.getHeight()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "carrein"
        },
        "content": "        commandHistory \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "carrein"
        },
        "content": "        index \u003d 0;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "carrein"
        },
        "content": "        this.hasWaterMark \u003d false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public Height getHeight() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return height;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public Width getWidth() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return width;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public BufferedImage getBufferedImage() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return buffer;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public String getUrl() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return url;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public String getFileType() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return fileType;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public Size getSize() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return size;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public boolean hasWaterMark() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return hasWaterMark;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * This method changes the hasWaterMark field so that it reflects the current state of the tempImage."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "carrein"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @param x the new value to set"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void setWaterMark(boolean x) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "carrein"
        },
        "content": "        hasWaterMark \u003d x;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    /* @@author randytqw */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public List\u003cCommand\u003e getCommandHistory() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        return commandHistory;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public List\u003cCommand\u003e getSubHistory() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        return commandHistory.subList(0, index);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     * Adds a new transformation command into commandHistory"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     * if Undo command was last called command, remove all edits after previous undo."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     * @param command command to be added"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "randytqw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public void addHistory(Command command) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        if (index \u003c commandHistory.size()) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            commandHistory \u003d commandHistory.subList(0, index);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        commandHistory.add(command);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        index++;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public void setBufferedImage(BufferedImage buffer) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        this.buffer \u003d buffer;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        return commandHistory.get(index);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public void setIndex(int index) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public void setHistory(List history) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        this.commandHistory \u003d history;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public void setUndo() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        index--;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        if (commandHistory.get(index) instanceof WaterMarkCommand) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            setWaterMark(false);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        if (commandHistory.get(index) instanceof SetPresetCommand) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            SetPresetCommand presetCommand \u003d (SetPresetCommand) (commandHistory.get(index));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            if (presetCommand.hasWaterMarkCommand()) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "randytqw"
        },
        "content": "                setWaterMark(false);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public void setRedo() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        if (commandHistory.get(index) instanceof WaterMarkCommand) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            setWaterMark(true);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        if (commandHistory.get(index) instanceof SetPresetCommand) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            SetPresetCommand presetCommand \u003d (SetPresetCommand) (commandHistory.get(index));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            if (presetCommand.hasWaterMarkCommand()) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "randytqw"
        },
        "content": "                setWaterMark(true);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        index++;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        return index \u003e 0;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        return index \u003c commandHistory.size();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    /* @@author */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * A basic representation of the Image\u0027s fields."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * EG:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Name: sample.png"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Height: 1600"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Width: 1600"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "carrein"
        },
        "content": "     *"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @return the fields of the image."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "carrein"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "carrein"
        },
        "content": "        builder.append(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\")"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "carrein"
        },
        "content": "                .append(\"\\nName: \")"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "carrein"
        },
        "content": "                .append(getName())"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "carrein"
        },
        "content": "                .append(\"\\nHeight: \")"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "carrein"
        },
        "content": "                .append(getHeight())"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "carrein"
        },
        "content": "                .append(\"\\nWidth: \")"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "carrein"
        },
        "content": "                .append(getWidth())"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "carrein"
        },
        "content": "                .append(\"\\nFormat: \")"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "carrein"
        },
        "content": "                .append(getFileType())"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "carrein"
        },
        "content": "                .append(\"\\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Returns metadata for image in an ArrayList of Strings."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "carrein"
        },
        "content": "     *"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @return list of meta data tags."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public List\u003cString\u003e getMetadataList() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "carrein"
        },
        "content": "        List\u003cString\u003e tempList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "carrein"
        },
        "content": "        for (Directory directory : metadata.getDirectories()) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "carrein"
        },
        "content": "            for (Tag tag : directory.getTags()) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "carrein"
        },
        "content": "                tempList.add(tag.toString());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "carrein"
        },
        "content": "            }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return tempList;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "carrein"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kayheen": 1,
      "carrein": 169,
      "randytqw": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/model/image/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "/* @@author Carrein */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": "package seedu.address.model.image;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": " * Represents a Image\u0027s name in FomoFoto\u0027s Album."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": " * A Name comprises of three fields: A fully qualified name, the base name and the file extension."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidExtension(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Ensures the name of the file has to be valid and of an image type."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"([^\\\\s]+(\\\\.(?i)(jpg|jpeg|png|gif|bmp|tiff|tif))$)\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public final String baseName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public final String extName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @param baseName A valid base name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @param extName  A valid extension."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @param fullName A valid extension."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public Name(String baseName, String extName, String fullName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": "        requireNonNull(baseName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrein"
        },
        "content": "        requireNonNull(extName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrein"
        },
        "content": "        requireNonNull(fullName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrein"
        },
        "content": "        checkArgument(isValidExtension(fullName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": "        this.baseName \u003d baseName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrein"
        },
        "content": "        this.extName \u003d extName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrein"
        },
        "content": "        this.fullName \u003d fullName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static boolean isValidExtension(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public String getBaseName() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return baseName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public String getExtName() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return extName;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public String getFullName() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return baseName + \".\" + extName;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "carrein"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "carrein"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/model/image/Size.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "/* @@author Carrein */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": "package seedu.address.model.image;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": " * Represents a Image\u0027s size in FomoFoto\u0027s Album."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidSize(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": "public class Size {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": "            \"Size should not be less than 0, blank or above configured max size.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Constructs a {@code Size}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @param size A valid height."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public Size(String size) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "        requireNonNull(size);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "        checkArgument(isValidSize(size), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": "        value \u003d size;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Returns true if a given string is a valid height."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static boolean isValidSize(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": "        boolean check \u003d Integer.parseInt(test) \u003c\u003d 0 ? false : true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return check;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "carrein"
        },
        "content": "                || (other instanceof Size // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u0026\u0026 value.equals(((Size) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "carrein"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/model/image/Width.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "/* @@author Carrein */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": "package seedu.address.model.image;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": " * Represents a Image\u0027s width in FomoFoto\u0027s Album."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidWidth(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": "public class Width {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": "            \"Width should not be zero or blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Constructs a {@code Width}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @param width A valid width."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public Width(String width) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "        requireNonNull(width);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "        checkArgument(isValidWidth(width), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": "        value \u003d width;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Returns true if a given string is a valid width."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static boolean isValidWidth(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": "        boolean check \u003d Integer.parseInt(test) \u003c\u003d 0 ? false : true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return check;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "carrein"
        },
        "content": "                || (other instanceof Width // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u0026\u0026 value.equals(((Width) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "carrein"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AddressBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.AddressBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 45,
      "thamsimun": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAddressBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private final Path backupFilePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        backupFilePath \u003d Paths.get(filePath.toString() + \".backup\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                filePath, JsonSerializableAddressBook.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        saveAddressBook(addressBook, backupFilePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 79,
      "thamsimun": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        addressBookStorage.backupAddressBook(addressBook);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 77,
      "thamsimun": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "/* @@author Carrein */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": "public class CommandCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private static final String FXML \u003d \"CommandListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private Text commandName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private Text arguments;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public CommandCard(Command command) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": "        commandName.setText(\"\\uD83D\\uDCD6 \" + command.getCommandName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": "        arguments.setText(\"Arguments: \" + command.getArguments());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrein"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ImageCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "/* @@author Carrein */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.model.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": "public class ImageCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private static final String FXML \u003d \"ImageListCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public final Image image;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private Text name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private Text height;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private Text width;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private Text size;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private ImageView thumbnail;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public ImageCard(Image image) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrein"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "carrein"
        },
        "content": "        this.image \u003d image;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrein"
        },
        "content": "        File file \u003d new File(image.getUrl());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "carrein"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "carrein"
        },
        "content": "            thumbnail.setImage(new javafx.scene.image.Image(file.toURI().toURL().toExternalForm()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "carrein"
        },
        "content": "        } catch (MalformedURLException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "carrein"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "carrein"
        },
        "content": "        name.setText(\"\\uD83D\\uDDBC \" + image.getName().getFullName());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "carrein"
        },
        "content": "        height.setText(\"Height: \" + image.getHeight().value + \" px\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "carrein"
        },
        "content": "        width.setText(\"Width: \" + image.getWidth().value + \" px\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "carrein"
        },
        "content": "        size.setText(\"Size: \" + image.getSize().value + \" bytes\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "carrein"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ImagePanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "/* @@author Carrein */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.beans.PropertyChangeEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.beans.PropertyChangeListener;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": "import javafx.scene.layout.Pane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": " * The Image Panel of the App."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": "public class ImagePanel extends UiPart\u003cRegion\u003e implements PropertyChangeListener {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private static final String FXML \u003d \"ImagePanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private ImageView imageView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public ImagePanel(Pane pane) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Notifier.addPropertyChangeListener(this);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": "        imageView.setPreserveRatio(true);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Updates the imageview based on incoming event parameter."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @param event url of new image to display."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void propertyChange(PropertyChangeEvent event) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrein"
        },
        "content": "        if (event.getPropertyName().equals(\"import\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": "            File f \u003d new File(event.getNewValue().toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrein"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrein"
        },
        "content": "                Image i \u003d new Image(f.toURI().toURL().toExternalForm());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrein"
        },
        "content": "                imageView.setImage(i);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrein"
        },
        "content": "            } catch (MalformedURLException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "carrein"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrein"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "carrein"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "carrein": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/InformationPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "/* @@author Carrein */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.beans.PropertyChangeEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.beans.PropertyChangeListener;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.model.Album;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.model.image.Image;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": " * The Image Panel of the App."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": "public class InformationPanel extends UiPart\u003cRegion\u003e implements PropertyChangeListener {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private static final String FXML \u003d \"InformationPanel.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private TabPane informationPanel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private final ListView\u003cImage\u003e imageListView \u003d new ListView\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private final ListView\u003cString\u003e metaListView \u003d new ListView\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private final ListView\u003cCommand\u003e commandListView \u003d new ListView\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private final Tab albumTab \u003d informationPanel.getTabs().get(0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private final Tab detailsTab \u003d informationPanel.getTabs().get(1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private final Tab historyTab \u003d informationPanel.getTabs().get(2);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private final Album album \u003d Album.getInstance();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private int selectedIndex \u003d 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public InformationPanel() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrein"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Notifier.addPropertyChangeListener(this);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrein"
        },
        "content": "        refreshAlbum();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "carrein"
        },
        "content": "        // Tab is already preset to index 0 on launch - increment to select next tab."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrein"
        },
        "content": "        selectedIndex++;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Image} using a {@code ImageCard}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "carrein"
        },
        "content": "    class ImageListViewCell extends ListCell\u003cImage\u003e {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "carrein"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "carrein"
        },
        "content": "        protected void updateItem(Image image, boolean empty) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "carrein"
        },
        "content": "            super.updateItem(image, empty);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "carrein"
        },
        "content": "            if (empty || image \u003d\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "carrein"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "carrein"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "carrein"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "carrein"
        },
        "content": "                setGraphic(new ImageCard(image).getRoot());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "carrein"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Image} using a {@code ImageCard}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "carrein"
        },
        "content": "    class CommandListViewCell extends ListCell\u003cCommand\u003e {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "carrein"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "carrein"
        },
        "content": "        protected void updateItem(Command command, boolean empty) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "carrein"
        },
        "content": "            super.updateItem(command, empty);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "carrein"
        },
        "content": "            if (empty || command \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "carrein"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "carrein"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "carrein"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "carrein"
        },
        "content": "                setGraphic(new CommandCard(command).getRoot());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "carrein"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Updates the imageview based on incoming event parameter."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "carrein"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @param event url of new image to display."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void propertyChange(PropertyChangeEvent event) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "carrein"
        },
        "content": "        if (event.getPropertyName().equals(\"refreshAlbum\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "carrein"
        },
        "content": "            refreshAlbum();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "carrein"
        },
        "content": "        if (event.getPropertyName().equals(\"refreshDetails\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "carrein"
        },
        "content": "            refreshDetails(event);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "carrein"
        },
        "content": "        if (event.getPropertyName().equals(\"refreshHistory\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "carrein"
        },
        "content": "            refreshHistory(event);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "carrein"
        },
        "content": "        if (event.getPropertyName().equals(\"switchTab\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "carrein"
        },
        "content": "            switchTab();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Helper method to refresh the EXIF pane of Information Panel."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private void refreshAlbum() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "carrein"
        },
        "content": "        List\u003cImage\u003e imageList \u003d album.getImageList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "carrein"
        },
        "content": "        imageListView.setItems(FXCollections.observableArrayList(imageList));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "carrein"
        },
        "content": "        imageListView.setCellFactory(listView -\u003e new ImageListViewCell());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "carrein"
        },
        "content": "        albumTab.setContent(imageListView);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Helper method to refresh the EXIF pane of Information Panel."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private void refreshDetails(PropertyChangeEvent event) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Image tempImage \u003d (Image) event.getNewValue();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "carrein"
        },
        "content": "        List\u003cString\u003e metaList \u003d tempImage.getMetadataList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "carrein"
        },
        "content": "        metaListView.setItems(FXCollections.observableArrayList(metaList));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "carrein"
        },
        "content": "        detailsTab.setContent(metaListView);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Helper method to refresh the history pane of Information Panel."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private void refreshHistory(PropertyChangeEvent event) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "carrein"
        },
        "content": "        List\u003cCommand\u003e commandList \u003d (List\u003cCommand\u003e) event.getNewValue();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "carrein"
        },
        "content": "        commandListView.setItems(FXCollections.observableArrayList(commandList));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "carrein"
        },
        "content": "        commandListView.setCellFactory(listView -\u003e new CommandListViewCell());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "carrein"
        },
        "content": "        historyTab.setContent(commandListView);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Helper method to switch the information tabs."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private void switchTab() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "carrein"
        },
        "content": "        int tabLength \u003d informationPanel.getTabs().size();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "carrein"
        },
        "content": "        if (selectedIndex \u003e\u003d tabLength) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "carrein"
        },
        "content": "            selectedIndex \u003d 0;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "carrein"
        },
        "content": "        informationPanel.getSelectionModel().select(selectedIndex);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "carrein"
        },
        "content": "        selectedIndex++;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "carrein"
        },
        "content": "}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "carrein": 141
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/InitPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "/* @@author Carrein */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.beans.PropertyChangeEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.beans.PropertyChangeListener;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": "import javafx.scene.text.TextFlow;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": " * The initial text panel for FomoFoto."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "public class InitPanel extends UiPart\u003cRegion\u003e implements PropertyChangeListener {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private static final String FXML \u003d \"InitPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private List\u003cNode\u003e nodeList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private HBox initView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private TextFlow initText;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public InitPanel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": "        nodeList \u003d initText.getChildren();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Notifier.addPropertyChangeListener(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * Hide the initText if an image is being displayed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrein"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * @param event"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void propertyChange(PropertyChangeEvent event) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrein"
        },
        "content": "        if (event.getPropertyName().equals(\"import\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrein"
        },
        "content": "            for (Node n : nodeList) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrein"
        },
        "content": "                n.setVisible(false);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "carrein"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "carrein"
        },
        "content": "    //TODO method to display initText if clear command is called"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "carrein"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private ImagePanel imagePanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private InformationPanel informationPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private InitPanel initPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private StackPane imagePlaceholder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private StackPane informationPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "carrein"
        },
        "content": "        informationPanel \u003d new InformationPanel();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "carrein"
        },
        "content": "        informationPlaceholder.getChildren().add(informationPanel.getRoot());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "carrein"
        },
        "content": "        initPanel \u003d new InitPanel();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "carrein"
        },
        "content": "        imagePanel \u003d new ImagePanel(imagePlaceholder);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "carrein"
        },
        "content": "        imagePlaceholder.getChildren().add(initPanel.getRoot());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "carrein"
        },
        "content": "        imagePlaceholder.getChildren().add(imagePanel.getRoot());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath(), logic.getAddressBook());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand, logic.getHistory());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 13,
      "-": 194
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Notifier.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "/* @@author Carrein */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.beans.PropertyChangeListener;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.beans.PropertyChangeSupport;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": " * Basic listener class used to convey updates to UI elements."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": "public class Notifier {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private static PropertyChangeSupport support \u003d new PropertyChangeSupport(Notifier.class);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static void addPropertyChangeListener(PropertyChangeListener l) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": "        support.addPropertyChangeListener(l);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static void removePropertyChangeListener(PropertyChangeListener l) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "        support.removePropertyChangeListener(l);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static void firePropertyChangeListener(String propertyName, Object oldValue, Object newValue) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": "        support.firePropertyChange(propertyName, oldValue, newValue);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public static PropertyChangeSupport getSupport() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": "        return support;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private static final String[] TAG_COLOUR_STYLES \u003d {\"teal\", \"red\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        \"yellow\", \"blue\", \"orange\", \"brown\", \"green\", \"pink\", \"black\", \"grey\"};"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        initTags(person);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        // person.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * Returns the colour style for {@code tagName}\u0027s label."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * @param tagName"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * @return colourStyle"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public static String getTagColourStyleFor(String tagName) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        return TAG_COLOUR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOUR_STYLES.length];"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * Initialises the Tags"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * @param person"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private void initTags(Person person) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        person.getTags().forEach(tag -\u003e {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            Label tagLabel \u003d new Label(tag.tagName);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            tagLabel.getStyleClass().add(getTagColourStyleFor(tag.tagName));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            tags.getChildren().add(tagLabel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        });"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kayheen": 24,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itszp"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/fomofoto_icon.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itszp": 1,
      "-": 85
    }
  },
  {
    "path": "src/main/resources/view/CommandListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c!-- @@author Carrein --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003cVBox fx:id\u003d\"imagePane\" xmlns\u003d\"http://javafx.com/javafx/10.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": "      \u003cStackPane alignment\u003d\"TOP_LEFT\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "            \u003cInsets bottom\u003d\"3\" left\u003d\"6\" right\u003d\"6\" top\u003d\"6\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "            \u003cText fx:id\u003d\"commandName\" fill\u003d\"WHITE\" text\u003d\"COMMAND\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": "            \u003c/Text\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "      \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": "      \u003cStackPane alignment\u003d\"TOP_LEFT\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": "            \u003cInsets bottom\u003d\"6\" left\u003d\"6\" right\u003d\"6\" top\u003d\"3\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": "            \u003cText fx:id\u003d\"arguments\" fill\u003d\"WHITE\" text\u003d\"ARGUMENTS\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": "            \u003c/Text\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrein"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrein"
        },
        "content": "      \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrein"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "carrein": 38
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "carrein"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kayheen"
        },
        "content": "#tags .teal {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    -fx-text-fill: #3e7b91;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "kayheen"
        },
        "content": "}"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "kayheen"
        },
        "content": "#tags .red {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    -fx-text-fill: red;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "kayheen"
        },
        "content": "}"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "kayheen"
        },
        "content": "#tags .yellow {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    -fx-text-fill: yellow;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "kayheen"
        },
        "content": "}"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "kayheen"
        },
        "content": "#tags .blue {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    -fx-text-fill: blue;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "kayheen"
        },
        "content": "}"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "kayheen"
        },
        "content": "#tags .orange {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    -fx-text-fill: orange;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "kayheen"
        },
        "content": "}"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "kayheen"
        },
        "content": "#tags .brown {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    -fx-background-color: brown;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "kayheen"
        },
        "content": "}"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "kayheen"
        },
        "content": "#tags .green {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    -fx-text-fill: green;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "kayheen"
        },
        "content": "}"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "kayheen"
        },
        "content": "#tags .pink {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    -fx-background-color: pink;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "kayheen"
        },
        "content": "}"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "kayheen"
        },
        "content": "#tags .black {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "kayheen"
        },
        "content": "}"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "kayheen"
        },
        "content": "#tags .grey {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    -fx-text-fill: grey;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "kayheen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kayheen": 50,
      "carrein": 1,
      "-": 350
    }
  },
  {
    "path": "src/main/resources/view/ImageListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c!-- @@author Carrein --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003cVBox fx:id\u003d\"imagePane\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "      \u003cStackPane alignment\u003d\"TOP_LEFT\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "            \u003cInsets bottom\u003d\"0\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "            \u003cText fx:id\u003d\"name\" fill\u003d\"WHITE\" text\u003d\"NAME\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": "            \u003c/Text\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": "      \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": "      \u003cHBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": "            \u003cStackPane style\u003d\"-fx-padding: 10;\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cImageView fx:id\u003d\"thumbnail\" fitHeight\u003d\"75.0\" fitWidth\u003d\"75.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrein"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrein"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrein"
        },
        "content": "            \u003cGridPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": "               \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrein"
        },
        "content": "               \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrein"
        },
        "content": "               \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cRowConstraints prefHeight\u003d\"15.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cRowConstraints vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cRowConstraints vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cRowConstraints vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cRowConstraints prefHeight\u003d\"15.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "carrein"
        },
        "content": "               \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "carrein"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cText fx:id\u003d\"height\" fill\u003d\"WHITE\" text\u003d\"HEIGHT\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "carrein"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "carrein"
        },
        "content": "                        \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "carrein"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003c/Text\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cText fx:id\u003d\"width\" fill\u003d\"WHITE\" text\u003d\"WIDTH\" GridPane.rowIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "carrein"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "carrein"
        },
        "content": "                        \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "carrein"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003c/Text\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cText fx:id\u003d\"size\" fill\u003d\"WHITE\" text\u003d\"SIZE\" GridPane.rowIndex\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "carrein"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "carrein"
        },
        "content": "                        \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "carrein"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003c/Text\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "carrein"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "carrein"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "carrein"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "carrein"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "carrein"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "carrein": 69
    }
  },
  {
    "path": "src/main/resources/view/ImagePanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c!-- @@author Carrein --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/10.0.1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": "   \u003cImageView fx:id\u003d\"imageView\" fitHeight\u003d\"300.0\" fitWidth\u003d\"300.0\" nodeOrientation\u003d\"INHERIT\" StackPane.alignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "carrein": 10
    }
  },
  {
    "path": "src/main/resources/view/InformationPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c!-- @@author Carrein --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003cTabPane fx:id\u003d\"informationPanel\" tabClosingPolicy\u003d\"UNAVAILABLE\" xmlns\u003d\"http://javafx.com/javafx/10.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": "  \u003ctabs\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": "    \u003cTab text\u003d\"Album Images\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "      \u003ccontent\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": "        \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "          \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "            \u003cListView prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cText fx:id\u003d\"arguments2\" fill\u003d\"WHITE\" layoutX\u003d\"14.0\" layoutY\u003d\"27.0\" text\u003d\"No data to display.\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": "                        \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003c/Text\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "          \u003c/children\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": "        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": "      \u003c/content\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": "    \u003c/Tab\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": "    \u003cTab text\u003d\"EXIF Profile\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": "      \u003ccontent\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": "        \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": "          \u003cchildren\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": "            \u003cListView prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cText fx:id\u003d\"arguments1\" fill\u003d\"WHITE\" layoutX\u003d\"14.0\" layoutY\u003d\"27.0\" text\u003d\"No data to display.\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrein"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrein"
        },
        "content": "                        \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrein"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003c/Text\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrein"
        },
        "content": "          \u003c/children\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrein"
        },
        "content": "        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrein"
        },
        "content": "      \u003c/content\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrein"
        },
        "content": "    \u003c/Tab\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "carrein"
        },
        "content": "    \u003cTab text\u003d\"Command History\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrein"
        },
        "content": "      \u003ccontent\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "carrein"
        },
        "content": "        \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "carrein"
        },
        "content": "          \u003cchildren\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "carrein"
        },
        "content": "            \u003cListView prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cText fx:id\u003d\"arguments\" fill\u003d\"WHITE\" layoutX\u003d\"14.0\" layoutY\u003d\"27.0\" text\u003d\"No data to display.\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "carrein"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "carrein"
        },
        "content": "                        \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "carrein"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003c/Text\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "carrein"
        },
        "content": "          \u003c/children\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "carrein"
        },
        "content": "        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "carrein"
        },
        "content": "      \u003c/content\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "carrein"
        },
        "content": "    \u003c/Tab\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "carrein"
        },
        "content": "  \u003c/tabs\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c/TabPane\u003e"
      }
    ],
    "authorContributionMap": {
      "carrein": 58
    }
  },
  {
    "path": "src/main/resources/view/InitPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c!-- @@author Carrein --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c?import javafx.scene.text.TextFlow?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003cHBox fx:id\u003d\"initView\" alignment\u003d\"CENTER\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/10.0.1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "        \u003cTextFlow fx:id\u003d\"initText\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": "          \u003cVBox\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "              \u003cText fill\u003d\"WHITE\" text\u003d\"📷 FomoFoto\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u003cfont\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"32.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u003c/font\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": "              \u003c/Text\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "              \u003cText\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u003cfont\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u003c/font\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": "              \u003c/Text\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": "              \u003cText fill\u003d\"WHITE\" text\u003d\"Quick Start:\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u003cfont\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u003c/font\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": "              \u003c/Text\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": "              \u003cText fill\u003d\"WHITE\" text\u003d\"Import image from your computer:\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u003cfont\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u003c/font\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrein"
        },
        "content": "              \u003c/Text\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": "              \u003cText fill\u003d\"WHITE\" style\u003d\"-fx-font-weight: bold;\" text\u003d\"import C:\\User\\Pictures\\MyImage.png\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u003cfont\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u003c/font\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrein"
        },
        "content": "              \u003c/Text\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "carrein"
        },
        "content": "              \u003cText\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u003cfont\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u003c/font\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "carrein"
        },
        "content": "              \u003c/Text\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "carrein"
        },
        "content": "              \u003cText fill\u003d\"WHITE\" text\u003d\"Open image for editing:\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u003cfont\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u003c/font\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "carrein"
        },
        "content": "              \u003c/Text\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "carrein"
        },
        "content": "              \u003cText fill\u003d\"WHITE\" style\u003d\"-fx-font-weight: bold;\" text\u003d\"open MyImage.png\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u003cfont\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u003c/font\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "carrein"
        },
        "content": "              \u003c/Text\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "carrein"
        },
        "content": "              \u003cText\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u003cfont\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u003c/font\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "carrein"
        },
        "content": "              \u003c/Text\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "carrein"
        },
        "content": "              \u003cText fill\u003d\"WHITE\" text\u003d\"Apply edit to image:\"\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u003cfont\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u003c/font\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "carrein"
        },
        "content": "              \u003c/Text\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "carrein"
        },
        "content": "              \u003cText fill\u003d\"WHITE\" style\u003d\"-fx-font-weight: bold;\" text\u003d\"rotate 90\"\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u003cfont\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u003c/font\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "carrein"
        },
        "content": "              \u003c/Text\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "carrein"
        },
        "content": "              \u003cText\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u003cfont\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u003c/font\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "carrein"
        },
        "content": "              \u003c/Text\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "carrein"
        },
        "content": "              \u003cHBox\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cText fill\u003d\"WHITE\" text\u003d\"View all commands by entering: \"\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "carrein"
        },
        "content": "                    \u003cfont\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "carrein"
        },
        "content": "                      \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "carrein"
        },
        "content": "                    \u003c/font\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003c/Text\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003cText fill\u003d\"WHITE\" style\u003d\"-fx-font-weight: bold;\" text\u003d\"help\"\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "carrein"
        },
        "content": "                    \u003cfont\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "carrein"
        },
        "content": "                      \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "carrein"
        },
        "content": "                    \u003c/font\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "carrein"
        },
        "content": "                  \u003c/Text\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "carrein"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "carrein"
        },
        "content": "              \u003c/HBox\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "carrein"
        },
        "content": "                     \u003cText\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "carrein"
        },
        "content": "                        \u003cfont\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "carrein"
        },
        "content": "                           \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "carrein"
        },
        "content": "                        \u003c/font\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "carrein"
        },
        "content": "                     \u003c/Text\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "carrein"
        },
        "content": "                     \u003cHBox\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "carrein"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "carrein"
        },
        "content": "                           \u003cText fill\u003d\"WHITE\" text\u003d\"Import a sample set of images: \"\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "carrein"
        },
        "content": "                              \u003cfont\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "carrein"
        },
        "content": "                                 \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "carrein"
        },
        "content": "                              \u003c/font\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "carrein"
        },
        "content": "                           \u003c/Text\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "carrein"
        },
        "content": "                           \u003cText fill\u003d\"WHITE\" style\u003d\"-fx-font-weight: bold;\" text\u003d\"import sample\"\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "carrein"
        },
        "content": "                              \u003cfont\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "carrein"
        },
        "content": "                                 \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "carrein"
        },
        "content": "                              \u003c/font\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "carrein"
        },
        "content": "                           \u003c/Text\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "carrein"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "carrein"
        },
        "content": "                     \u003c/HBox\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "carrein"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "carrein"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "carrein"
        },
        "content": "        \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "carrein"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "carrein"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "carrein"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "carrein"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "carrein": 117
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itszp"
        },
        "content": "         title\u003d\"FomoFoto Image Editor\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itszp"
        },
        "content": "    \u003cImage url\u003d\"@/images/fomofoto_icon.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "carrein"
        },
        "content": "          \u003cStackPane fx:id\u003d\"imagePlaceholder\" prefWidth\u003d\"140\" \u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "carrein"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "carrein"
        },
        "content": "          \u003cStackPane fx:id\u003d\"informationPlaceholder\" prefWidth\u003d\"140\" \u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "itszp": 2,
      "carrein": 4,
      "-": 62
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cGridPane styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" halignment\u003d\"RIGHT\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cLabel fx:id\u003d\"syncStatus\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cLabel fx:id\u003d\"saveLocationStatus\" GridPane.columnIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kayheen": 1,
      "-": 14
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private final PersonListPanelHandle personListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "    //private final BrowserPanelHandle browserPanel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanelHandle(getChildNode(PersonListPanelHandle.PERSON_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": "        //browserPanel \u003d new BrowserPanelHandle(getChildNode(BrowserPanelHandle.BROWSER_ID));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /* public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return browserPanel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 4,
      "-": 47
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle to a person card in the person list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EMAIL_FIELD_ID \u003d \"#email\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label addressLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label emailLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressLabel.getText();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return emailLabel.getText();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if this handle contains {@code person}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Person person) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return getName().equals(person.getName().fullName)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getAddress().equals(person.getAddress().value)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getPhone().equals(person.getPhone().value)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getEmail().equals(person.getEmail().value)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(person.getTags().stream()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                        .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                        .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public List\u003cString\u003e getTagStyleClasses(String tag) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                .filter(label -\u003e label.getText().equals(tag))"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                .map(Label::getStyleClass)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                .orElse(null);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kayheen": 9,
      "-": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/NotifierTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "/* @@author Carrein */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.ui.InitPanel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.ui.Notifier;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": "public class NotifierTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private final InitPanel initPanel \u003d new InitPanel();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void valid_register() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Notifier.addPropertyChangeListener(initPanel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertTrue(Notifier.getSupport().hasListeners(\"initPanel\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void invalid_register() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertTrue(Notifier.getSupport().hasListeners(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void valid_unregister() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Notifier.removePropertyChangeListener(initPanel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertFalse(Notifier.getSupport().hasListeners(\"initPanel\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/ResourceWalkerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "/* @@author Carrein */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static seedu.address.commons.core.Config.SAMPLE_FOLDER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.logic.ResourceWalker;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.model.Album;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": "public class ResourceWalkerTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private final ResourceWalker resourceWalker \u003d new ResourceWalker();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private final Album album \u003d Album.getInstance();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "        album.clearAlbum();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void invalid_walk() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e resourceWalker.walk(null)); //null"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertTrue(album.getImageList().size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void valid_walk() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": "            resourceWalker.walk(SAMPLE_FOLDER);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertTrue(album.getImageList().size() \u003e 0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itszp"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/fomofoto_icon.png\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.getImage(null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(errorMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false, errorMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itszp": 1,
      "-": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CLEAR_SUCCESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.logic.commands.CropCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEditManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private CurrentEdit currentEdit \u003d new CurrentEditManager();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "carrein"
        },
        "content": "        logic \u003d new LogicManager(model, storage, currentEdit);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String invalidCommand \u003d \"soitends?\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String cropCommand \u003d CropCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertCommandException(cropCommand, MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String clearCommand \u003d ClearCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertCommandSuccess(clearCommand, MESSAGE_CLEAR_SUCCESS, model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 12,
      "-": 133,
      "thamsimun": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/BlackWhiteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author thamsimun */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.parser.BlackWhiteCommandParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.parser.ImportCommandParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.parser.OpenCommandParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.Album;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEditManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "public class BlackWhiteCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private Album album \u003d Album.getInstance();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private CurrentEdit currentEdit \u003d new CurrentEditManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public void createImagesInAlbum() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        album.clearAlbum();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            BlackWhiteCommandParser parserBlackWhite \u003d new BlackWhiteCommandParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            BlackWhiteCommand blackwhite \u003d parserBlackWhite.parse(\" 123\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            String expectedMessage \u003d Messages.MESSAGE_DID_NOT_OPEN;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            assertCommandFailure(blackwhite, model, commandHistory, expectedMessage, currentEdit);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            ImportCommandParser parser \u003d new ImportCommandParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            parser.parse(\"sample\").execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            OpenCommandParser parser2 \u003d new OpenCommandParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            parser2.parse(\"iu.jpg\").execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public void execute_validBlackWhiteCheckIsNewCommand_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            BlackWhiteCommandParser parser \u003d new BlackWhiteCommandParser();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            BlackWhiteCommand command \u003d parser.parse(\" 123\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            String expectedMessage \u003d Messages.MESSAGE_BLACKWHITE_SUCCESS;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            assertCommandSuccess(command, model, commandHistory, expectedMessage, currentEdit);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public void clearAlbum() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        album.clearAlbum();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        currentEdit.clearTemp();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author*/"
      }
    ],
    "authorContributionMap": {
      "thamsimun": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/BrightnessCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author thamsimun */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.parser.BrightnessCommandParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.parser.ImportCommandParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.parser.OpenCommandParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.Album;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEditManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "public class BrightnessCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private Album album \u003d Album.getInstance();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private CurrentEdit currentEdit \u003d new CurrentEditManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public void createImagesInAlbum() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        album.clearAlbum();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            BrightnessCommandParser parserBrightness \u003d new BrightnessCommandParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            BrightnessCommand brightness \u003d parserBrightness.parse(\" 1.3\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            String expectedMessage \u003d Messages.MESSAGE_DID_NOT_OPEN;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            assertCommandFailure(brightness, model, commandHistory, expectedMessage, currentEdit);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            ImportCommandParser parser \u003d new ImportCommandParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            parser.parse(\"sample\").execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            OpenCommandParser parser2 \u003d new OpenCommandParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            parser2.parse(\"iu.jpg\").execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public void execute_validBrightnessCheckIsNewCommand_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            BrightnessCommandParser parser \u003d new BrightnessCommandParser();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            BrightnessCommand command \u003d parser.parse(\" 1.3\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            String expectedMessage \u003d Messages.MESSAGE_BRIGHTNESS_SUCCESS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            assertCommandSuccess(command, model, commandHistory, expectedMessage, currentEdit);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public void clearAlbum() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        album.clearAlbum();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        currentEdit.clearTemp();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author*/"
      }
    ],
    "authorContributionMap": {
      "thamsimun": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CLEAR_SUCCESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEditManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "@Ignore"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private CurrentEdit currentEdit \u003d new CurrentEditManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, MESSAGE_CLEAR_SUCCESS, expectedModel,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "            currentEdit);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, MESSAGE_CLEAR_SUCCESS, expectedModel,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrein"
        },
        "content": "            currentEdit);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 7,
      "-": 35,
      "thamsimun": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                                            CommandResult expectedCommandResult, Model expectedModel,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrein"
        },
        "content": "                                            CurrentEdit currentEdit) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrein"
        },
        "content": "            CommandResult result \u003d command.execute(currentEdit, actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    /* @@kayheen */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     * the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kayheen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model model, CommandHistory commandHistory,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                                            String expectedMessage, CurrentEdit currentEdit) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            CommandResult result \u003d command.execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", e);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /* @@author */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandHistory, CommandResult, Model,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "carrein"
        },
        "content": "     * CurrentEdit)}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "carrein"
        },
        "content": "            String expectedMessage, Model expectedModel, CurrentEdit currentEdit) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        assertCommandSuccess(command, actualModel, actualCommandHistory, expectedCommandResult, expectedModel,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "carrein"
        },
        "content": "            currentEdit);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            String expectedMessage, CurrentEdit actualCurrentEdit) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedSelectedPerson \u003d actualModel.getSelectedPerson();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        Image expectedImage \u003d actualCurrentEdit.getTempImage();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            command.execute(actualCurrentEdit, actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedSelectedPerson, actualModel.getSelectedPerson());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            assertEquals(expectedImage, actualCurrentEdit.getTempImage());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged but tempimage in currentedit might change."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public static void assertPresetCommandFailure(Command command, Model actualModel,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                                                  CommandHistory actualCommandHistory, String expectedMessage,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                                                  CurrentEdit currentEdit) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedSelectedPerson \u003d actualModel.getSelectedPerson();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "carrein"
        },
        "content": "            command.execute(currentEdit, actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedSelectedPerson, actualModel.getSelectedPerson());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kayheen": 18,
      "carrein": 6,
      "-": 104,
      "thamsimun": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ContrastCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author thamsimun */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.parser.ContrastCommandParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.parser.ImportCommandParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.parser.OpenCommandParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.Album;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEditManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "public class ContrastCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private Album album \u003d Album.getInstance();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private CurrentEdit currentEdit \u003d new CurrentEditManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public void createImagesInAlbum() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        album.clearAlbum();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            ContrastCommandParser parserContrast \u003d new ContrastCommandParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            ContrastCommand contrast \u003d parserContrast.parse(\" 1.3\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            String expectedMessage \u003d Messages.MESSAGE_DID_NOT_OPEN;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            assertCommandFailure(contrast, model, commandHistory, expectedMessage, currentEdit);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            ImportCommandParser parser \u003d new ImportCommandParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            parser.parse(\"sample\").execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            OpenCommandParser parser2 \u003d new OpenCommandParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            parser2.parse(\"iu.jpg\").execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public void execute_validContrastCheckIsNewCommand_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            ContrastCommandParser parser \u003d new ContrastCommandParser();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            ContrastCommand command \u003d parser.parse(\" 1.3\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            String expectedMessage \u003d Messages.MESSAGE_CONTRAST_SUCCESS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            assertCommandSuccess(command, model, commandHistory, expectedMessage, currentEdit);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public void clearAlbum() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        album.clearAlbum();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        currentEdit.clearTemp();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author*/"
      }
    ],
    "authorContributionMap": {
      "thamsimun": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CropCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kayheen"
        },
        "content": "/* @@author kayheen */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kayheen"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.parser.CropCommandParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.parser.ImportCommandParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.parser.OpenCommandParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.model.Album;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.model.CurrentEditManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kayheen"
        },
        "content": "public class CropCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private Album album \u003d Album.getInstance();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private CurrentEdit currentEdit \u003d new CurrentEditManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public void createImagesInAlbum() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        album.clearAlbum();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            // when image is null, should throw an error"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            CropCommandParser parserCrop \u003d new CropCommandParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            CropCommand rotate \u003d parserCrop.parse(\" 0 0 200 200\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            String expectedMessage \u003d Messages.MESSAGE_DID_NOT_OPEN;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            assertCommandFailure(rotate, model, commandHistory, expectedMessage, currentEdit);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            ImportCommandParser parser \u003d new ImportCommandParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            parser.parse(\"sample\").execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            OpenCommandParser parser2 \u003d new OpenCommandParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            parser2.parse(\"iu.jpg\").execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public void execute_validCrop_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            CropCommandParser parser \u003d new CropCommandParser();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            CropCommand command \u003d parser.parse(\" 0 0 200 200\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            String expectedMessage \u003d Messages.MESSAGE_CROP_SUCCESS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            assertCommandSuccess(command, model, commandHistory, expectedMessage, currentEdit);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public void execute_invalidXOrYOrWidthOrHeightInCrop_failure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            CropCommandParser parser \u003d new CropCommandParser();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            int currWidth \u003d Integer.parseInt(currentEdit.getTempImage().getWidth().value);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            int currHeight \u003d Integer.parseInt(currentEdit.getTempImage().getHeight().value);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            // test if width exceed."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            CropCommand command \u003d parser.parse(\" 50 0 \" + currWidth + \" \" + currHeight);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            // test if height exceed."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            CropCommand command1 \u003d parser.parse(\" 0 50 \" + currWidth + \" \" + currHeight);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            int wrongX \u003d currWidth + 5;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            int wrongY \u003d currHeight + 10;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            // test if x-coordinate wrong."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            CropCommand command2 \u003d parser.parse(\" \" + wrongX + \" 0 200 100\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            // test if y-coordinate wrong."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            CropCommand command3 \u003d parser.parse(\" 0 \" + wrongY + \" 200 200\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            String expectedMessage \u003d \"Invalid crop bounds, bounds for the inputs as follows:\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                    + \"0 \u003c\u003d x-coordinate \u003c\u003d \" + currWidth"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                    + \", 0 \u003c\u003d y-coordinate \u003c\u003d \" + currHeight + \",\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                    + \"0 \u003c\u003d x + width \u003c\u003d \" + currWidth"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                    + \", 0 \u003c\u003d y + height \u003c\u003d \" + currHeight;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            assertCommandFailure(command, model, commandHistory, expectedMessage, currentEdit);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            assertCommandFailure(command1, model, commandHistory, expectedMessage, currentEdit);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            assertCommandFailure(command2, model, commandHistory, expectedMessage, currentEdit);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            assertCommandFailure(command3, model, commandHistory, expectedMessage, currentEdit);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public void clearAlbum() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        album.clearAlbum();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        currentEdit.clearTemp();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kayheen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kayheen": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEditManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private CurrentEdit currentEdit \u003d new CurrentEditManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, commandHistory, expectedCommandResult, expectedModel,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "            currentEdit);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 1,
      "-": 21,
      "thamsimun": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExportCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "randytqw"
        },
        "content": "/* @@author randytqw */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "randytqw"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.parser.ExportCommandParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.parser.ImportCommandParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.model.Album;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.model.CurrentEditManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "randytqw"
        },
        "content": "public class ExportCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    private CurrentEdit currentEdit \u003d new CurrentEditManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        //Empty Album"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            ExportCommandParser exportParser \u003d new ExportCommandParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            ExportCommand command1 \u003d exportParser.parse(\" f/iu.jpg d/\" + System.getProperty(\"java.io.tmpdir\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            assertCommandFailure(command1, model, commandHistory, Messages.MESSAGE_FILE_NOT_FOUND,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "randytqw"
        },
        "content": "                currentEdit);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            System.out.println(e.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        //set up"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            ImportCommandParser importParser \u003d new ImportCommandParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            importParser.parse(\"sample\").execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            System.out.println(e.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        //Invalid Directory"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            ExportCommandParser exportParser \u003d new ExportCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            ExportCommand command1 \u003d exportParser.parse(\" f/iu.jpg d/lalala\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            assertCommandFailure(command1, model, commandHistory, Messages.MESSAGE_INVALID_PATH,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "randytqw"
        },
        "content": "                currentEdit);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            System.out.println(e.toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        //File not in album"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            ExportCommandParser exportParser \u003d new ExportCommandParser();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            ExportCommand command2 \u003d exportParser.parse(\" f/hello.jpg d/\" + System.getProperty(\"java.io.tmpdir\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            assertCommandFailure(command2, model, commandHistory, Messages.MESSAGE_FILE_NOT_FOUND, currentEdit);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            System.out.println(e.toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        //Successful Export"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            ExportCommandParser exportParser \u003d new ExportCommandParser();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            ExportCommand command3 \u003d exportParser.parse(\" f/iu.jpg d/\" + System.getProperty(\"java.io.tmpdir\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            assertCommandSuccess(command3, model, commandHistory, Messages.MESSAGE_EXPORT_SUCCESS, currentEdit);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            System.out.println(e.toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            currentEdit);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            currentEdit);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE, currentEdit);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public void clearAlbum() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        Album album \u003d Album.getInstance();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        album.clearAlbum();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        currentEdit.clearTemp();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "randytqw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "randytqw": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEditManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private CurrentEdit currentEdit \u003d new CurrentEditManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, commandHistory, expectedCommandResult, expectedModel,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "            currentEdit);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 1,
      "-": 21,
      "thamsimun": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ImportCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "/* @@author Carrein */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static seedu.address.logic.commands.ImportCommand.MESSAGE_DIR_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static seedu.address.logic.commands.ImportCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.model.Album;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.model.CurrentEditManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "public class ImportCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private Album album \u003d Album.getInstance();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private CurrentEdit currentEdit \u003d new CurrentEditManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": "        album.clearAlbum();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void execute_successful_singleImport() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_SUCCESS, false, false);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertCommandSuccess(new ImportCommand(false), model, commandHistory, expectedCommandResult,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrein"
        },
        "content": "                expectedModel, currentEdit);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void execute_successful_directoryImport() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrein"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_DIR_SUCCESS, false, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertCommandSuccess(new ImportCommand(true), model, commandHistory, expectedCommandResult,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrein"
        },
        "content": "                expectedModel, currentEdit);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrein"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListFilesCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itszp"
        },
        "content": "/* @@author itszp */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itszp"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itszp"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itszp"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itszp"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itszp"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itszp"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itszp"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.logic.parser.ImportCommandParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.model.Album;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.model.CurrentEditManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itszp"
        },
        "content": "public class ListFilesCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itszp"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itszp"
        },
        "content": "    private Album album \u003d Album.getInstance();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itszp"
        },
        "content": "    private CurrentEdit currentEdit \u003d new CurrentEditManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itszp"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itszp"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public void importSampleToAssets() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itszp"
        },
        "content": "        album.clearAlbum();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itszp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itszp"
        },
        "content": "            ImportCommandParser parser \u003d new ImportCommandParser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itszp"
        },
        "content": "            parser.parse(\"sample\").execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itszp"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itszp"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itszp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itszp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public void execute_listSampleFiles_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itszp"
        },
        "content": "        ListFilesCommand command \u003d new ListFilesCommand();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itszp"
        },
        "content": "        String expectedMessage \u003d String.format(ListFilesCommand.MESSAGE_LIST_FILES_HEADER,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itszp"
        },
        "content": "                Arrays.toString(album.getFileNames()) + \"\\n\" + ListFilesCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itszp"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, currentEdit);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itszp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public void execute_listEmpty_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itszp"
        },
        "content": "        album.clearAlbum();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itszp"
        },
        "content": "        ListFilesCommand command \u003d new ListFilesCommand();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itszp"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, ListFilesCommand.MESSAGE_ASSETS_EMPTY, currentEdit);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itszp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public void execute_listOneFile_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itszp"
        },
        "content": "        album.clearAlbum();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itszp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itszp"
        },
        "content": "            String validPngTest \u003d \"src/main/resources/imageTest/valid/validPNGTest.png\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itszp"
        },
        "content": "            ImportCommandParser parser \u003d new ImportCommandParser();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itszp"
        },
        "content": "            parser.parse(validPngTest).execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itszp"
        },
        "content": "            ListFilesCommand command \u003d new ListFilesCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itszp"
        },
        "content": "            String expectedMessage \u003d String.format(ListFilesCommand.MESSAGE_LIST_FILES_HEADER,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itszp"
        },
        "content": "                    Arrays.toString(album.getFileNames()) + \"\\n\" + ListFilesCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itszp"
        },
        "content": "            assertCommandSuccess(command, model, commandHistory, expectedMessage, currentEdit);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itszp"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itszp"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itszp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itszp"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public void clearAlbum() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itszp"
        },
        "content": "        album.clearAlbum();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itszp"
        },
        "content": "        currentEdit.clearTemp();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itszp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itszp": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/OpenCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itszp"
        },
        "content": "/* @@author itszp */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itszp"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itszp"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itszp"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itszp"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_FILE_NOT_FOUND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itszp"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itszp"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itszp"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itszp"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itszp"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.logic.parser.ImportCommandParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.model.Album;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.model.CurrentEditManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itszp"
        },
        "content": "public class OpenCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itszp"
        },
        "content": "    private Album album \u003d Album.getInstance();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itszp"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itszp"
        },
        "content": "    private CurrentEdit currentEdit \u003d new CurrentEditManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itszp"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itszp"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public void importSampleToAssets() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itszp"
        },
        "content": "        album.clearAlbum();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itszp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itszp"
        },
        "content": "            ImportCommandParser parser \u003d new ImportCommandParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itszp"
        },
        "content": "            parser.parse(\"sample\").execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itszp"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itszp"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itszp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itszp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public void execute_openImage_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itszp"
        },
        "content": "        OpenCommand command \u003d new OpenCommand(\"validPNGTest.png\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itszp"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, OpenCommand.MESSAGE_SUCCESS, currentEdit);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itszp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public void execute_openImage_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itszp"
        },
        "content": "        OpenCommand command \u003d new OpenCommand(\"notfound.png\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itszp"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, MESSAGE_FILE_NOT_FOUND, currentEdit);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itszp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public void execute_openOnEmptyAssets_failure() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itszp"
        },
        "content": "        album.clearAlbum();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itszp"
        },
        "content": "        OpenCommand command \u003d new OpenCommand(\"validPNGTest.png\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itszp"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, MESSAGE_FILE_NOT_FOUND, currentEdit);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itszp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public void equals_test_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itszp"
        },
        "content": "        assertEquals(new OpenCommand(\"validPNGTest.png\"), new OpenCommand(\"validPNGTest.png\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itszp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public void equals_test_failure() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itszp"
        },
        "content": "        assertNotEquals(new OpenCommand(\"validPNGTest.png\"), new OpenCommand(\"ui.jpg\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itszp"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public void clearAlbum() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itszp"
        },
        "content": "        album.clearAlbum();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itszp"
        },
        "content": "        currentEdit.clearTemp();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itszp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itszp": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "randytqw"
        },
        "content": "/* @@author randytqw */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "randytqw"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.parser.BrightnessCommandParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.parser.ContrastCommandParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.parser.ImportCommandParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.parser.OpenCommandParser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.model.Album;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.model.CurrentEditManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "randytqw"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    private CurrentEdit currentEdit \u003d new CurrentEditManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        //Image not opened yet"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            new RedoCommand().execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            assertCommandFailure(new RedoCommand(), model, commandHistory, Messages.MESSAGE_DID_NOT_OPEN,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "randytqw"
        },
        "content": "                currentEdit);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        //set up"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            ImportCommandParser importParser \u003d new ImportCommandParser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            importParser.parse(\"sample\").execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            OpenCommandParser openParser \u003d new OpenCommandParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            openParser.parse(\"iu.jpg\").execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        //No Undoable states"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            new RedoCommand().execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "randytqw"
        },
        "content": "                currentEdit);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            ContrastCommandParser contrastParser \u003d new ContrastCommandParser();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            ContrastCommand command1 \u003d contrastParser.parse(\" 2.0\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            BrightnessCommandParser brightnessParser \u003d new BrightnessCommandParser();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            BrightnessCommand command2 \u003d brightnessParser.parse(\" 2.0\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            assertCommandSuccess(command1, model, commandHistory, Messages.MESSAGE_CONTRAST_SUCCESS, currentEdit);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            assertCommandSuccess(command2, model, commandHistory, Messages.MESSAGE_BRIGHTNESS_SUCCESS, currentEdit);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, currentEdit);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, currentEdit);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE, currentEdit);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            currentEdit);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            currentEdit);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE, currentEdit);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public void clearAlbum() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        Album album \u003d Album.getInstance();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        album.clearAlbum();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        currentEdit.clearTemp();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "randytqw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "randytqw": 98
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ResizeCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kayheen"
        },
        "content": "/* @@author kayheen */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kayheen"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.parser.ImportCommandParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.parser.OpenCommandParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.parser.ResizeCommandParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.model.Album;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.model.CurrentEditManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kayheen"
        },
        "content": "public class ResizeCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private Album album \u003d Album.getInstance();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private CurrentEdit currentEdit \u003d new CurrentEditManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public void createImagesInAlbum() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        album.clearAlbum();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            // when image is null, should throw an error"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            ResizeCommandParser parserResize \u003d new ResizeCommandParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            ResizeCommand rotate \u003d parserResize.parse(\" 90 100\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            String expectedMessage \u003d Messages.MESSAGE_DID_NOT_OPEN;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            assertCommandFailure(rotate, model, commandHistory, expectedMessage, currentEdit);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            ImportCommandParser parser \u003d new ImportCommandParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            parser.parse(\"sample\").execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            OpenCommandParser parser2 \u003d new OpenCommandParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            parser2.parse(\"iu.jpg\").execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public void execute_validResize_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            ResizeCommandParser parser \u003d new ResizeCommandParser();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            ResizeCommand command \u003d parser.parse(\" 200 200\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            String expectedMessage \u003d Messages.MESSAGE_RESIZE_SUCCESS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            assertCommandSuccess(command, model, commandHistory, expectedMessage, currentEdit);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public void execute_invalidArgs_fail() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            ResizeCommandParser parser \u003d new ResizeCommandParser();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            ResizeCommand command \u003d parser.parse(\" 9999 9999\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            String expectedMessage \u003d Messages.MESSAGE_RESIZE_VALUES_TOO_LARGE;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            assertCommandFailure(command, model, commandHistory, expectedMessage, currentEdit);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public void clearAlbum() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        album.clearAlbum();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        currentEdit.clearTemp();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kayheen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kayheen": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RotateCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kayheen"
        },
        "content": "/* @@author kayheen */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kayheen"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.parser.ImportCommandParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.parser.OpenCommandParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.parser.RotateCommandParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.model.Album;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.model.CurrentEditManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kayheen"
        },
        "content": "public class RotateCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private Album album \u003d Album.getInstance();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private CurrentEdit currentEdit \u003d new CurrentEditManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public void createImagesInAlbum() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        album.clearAlbum();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            // when image is null, should throw an error"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            RotateCommandParser parserRotate \u003d new RotateCommandParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            RotateCommand rotate \u003d parserRotate.parse(\" 90\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            String expectedMessage \u003d Messages.MESSAGE_DID_NOT_OPEN;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            assertCommandFailure(rotate, model, commandHistory, expectedMessage, currentEdit);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            ImportCommandParser parser \u003d new ImportCommandParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            parser.parse(\"sample\").execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            OpenCommandParser parser2 \u003d new OpenCommandParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            parser2.parse(\"iu.jpg\").execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public void execute_validRotateCheckIsNewCommand_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            RotateCommandParser parser \u003d new RotateCommandParser();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            RotateCommand command \u003d parser.parse(\" 90\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            String expectedMessage \u003d Messages.MESSAGE_ROTATE_SUCCESS;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            assertCommandSuccess(command, model, commandHistory, expectedMessage, currentEdit);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public void execute_invalidDegreeInRotate_failure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            RotateCommandParser parser \u003d new RotateCommandParser();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            RotateCommand command \u003d parser.parse(\" 45\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            RotateCommand command1 \u003d parser.parse(\" 170\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            RotateCommand command2 \u003d parser.parse(\" 200\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            RotateCommand command3 \u003d parser.parse(\" 390\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            String expectedMessage \u003d String.format(Messages.MESSAGE_ROTATE_DEGREE_ERROR,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                    RotateCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            assertCommandFailure(command, model, commandHistory, expectedMessage, currentEdit);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            assertCommandFailure(command1, model, commandHistory, expectedMessage, currentEdit);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            assertCommandFailure(command2, model, commandHistory, expectedMessage, currentEdit);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            assertCommandFailure(command3, model, commandHistory, expectedMessage, currentEdit);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public void clearAlbum() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        album.clearAlbum();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        currentEdit.clearTemp();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kayheen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kayheen": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SaveCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itszp"
        },
        "content": "/* @@author itszp */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itszp"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itszp"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itszp"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itszp"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_FILE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itszp"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNABLE_TO_SAVE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itszp"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itszp"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itszp"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itszp"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itszp"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.logic.parser.ImportCommandParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.logic.parser.OpenCommandParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.logic.parser.SaveCommandParser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.model.Album;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.model.CurrentEditManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itszp"
        },
        "content": "public class SaveCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itszp"
        },
        "content": "    private Album album \u003d Album.getInstance();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itszp"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itszp"
        },
        "content": "    private CurrentEdit currentEdit \u003d new CurrentEditManager();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itszp"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itszp"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public void importSampleToAssets() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itszp"
        },
        "content": "        album.clearAlbum();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itszp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itszp"
        },
        "content": "            ImportCommandParser parser \u003d new ImportCommandParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itszp"
        },
        "content": "            parser.parse(\"sample\").execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itszp"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itszp"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itszp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itszp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public void execute_saveImageWithoutOpen_failure() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itszp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itszp"
        },
        "content": "            SaveCommandParser saveParser \u003d new SaveCommandParser();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itszp"
        },
        "content": "            SaveCommand command \u003d saveParser.parse(\"newImage.png\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itszp"
        },
        "content": "            assertCommandFailure(command, model, commandHistory, MESSAGE_UNABLE_TO_SAVE, currentEdit);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itszp"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itszp"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itszp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itszp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public void execute_saveImageDuplicate_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itszp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itszp"
        },
        "content": "            OpenCommandParser openParser \u003d new OpenCommandParser();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itszp"
        },
        "content": "            openParser.parse(\"validPNGTest.png\").execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itszp"
        },
        "content": "            SaveCommandParser saveParser \u003d new SaveCommandParser();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itszp"
        },
        "content": "            SaveCommand command \u003d saveParser.parse(\"validPNGTest.png\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itszp"
        },
        "content": "            assertCommandFailure(command, model, commandHistory, MESSAGE_DUPLICATE_FILE, currentEdit);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itszp"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itszp"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itszp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itszp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public void execute_saveImageNewName_success() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itszp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itszp"
        },
        "content": "            OpenCommandParser openParser \u003d new OpenCommandParser();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itszp"
        },
        "content": "            openParser.parse(\"validPNGTest.png\").execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itszp"
        },
        "content": "            SaveCommandParser saveParser \u003d new SaveCommandParser();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itszp"
        },
        "content": "            SaveCommand command \u003d saveParser.parse(\"newImage.png\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itszp"
        },
        "content": "            String expectedMessage \u003d String.format(SaveCommand.MESSAGE_SUCCESS, \"newImage.png\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itszp"
        },
        "content": "            assertCommandSuccess(command, model, commandHistory, expectedMessage, currentEdit);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itszp"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itszp"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itszp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itszp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public void execute_saveImageOverwrite_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itszp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itszp"
        },
        "content": "            OpenCommandParser openParser \u003d new OpenCommandParser();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itszp"
        },
        "content": "            openParser.parse(\"validPNGTest.png\").execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itszp"
        },
        "content": "            SaveCommandParser saveParser \u003d new SaveCommandParser();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itszp"
        },
        "content": "            SaveCommand command \u003d saveParser.parse(\"\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itszp"
        },
        "content": "            String expectedMessage \u003d String.format(SaveCommand.MESSAGE_SUCCESS, \"validPNGTest.png\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itszp"
        },
        "content": "            assertCommandSuccess(command, model, commandHistory, expectedMessage, currentEdit);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itszp"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itszp"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itszp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itszp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public void equals_test_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "itszp"
        },
        "content": "        assertEquals(new SaveCommand(\"newImage.png\"), new SaveCommand(\"newImage.png\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "itszp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public void equals_test_failure() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "itszp"
        },
        "content": "        assertNotEquals(new SaveCommand(\"newImage.png\"), new OpenCommand(\"oldImage.jpg\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "itszp"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public void clearAlbum() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "itszp"
        },
        "content": "        album.clearAlbum();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "itszp"
        },
        "content": "        currentEdit.clearTemp();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "itszp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itszp": 111
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SavePresetCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author thamsimun */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertPresetCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.parser.BrightnessCommandParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.parser.ContrastCommandParser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.parser.ImportCommandParser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.parser.OpenCommandParser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.parser.RotateCommandParser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.parser.SavePresetCommandParser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.parser.WaterMarkCommandParser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.Album;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEditManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.TransformationSet;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "public class SavePresetCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private Album album \u003d Album.getInstance();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private TransformationSet transformationSet \u003d TransformationSet.getInstance();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private CurrentEdit currentEdit \u003d new CurrentEditManager();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public void createImagesInAlbum() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        album.clearAlbum();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        transformationSet.clear();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            SavePresetCommandParser parserSavePreset \u003d new SavePresetCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            SavePresetCommand savePreset \u003d parserSavePreset.parse(\" 1.3\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            String expectedMessage \u003d Messages.MESSAGE_DID_NOT_OPEN;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            assertCommandFailure(savePreset, model, commandHistory, expectedMessage, currentEdit);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            ImportCommandParser parser \u003d new ImportCommandParser();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            parser.parse(\"sample\").execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            OpenCommandParser parser2 \u003d new OpenCommandParser();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            parser2.parse(\"iu.jpg\").execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public void execute_savePreset_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        //Execute some editing commands to save in preset"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            ContrastCommandParser contrastParser \u003d new ContrastCommandParser();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            ContrastCommand contrastCommand \u003d contrastParser.parse(\" 1.3\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            contrastCommand.execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            WaterMarkCommandParser waterMarkCommandParser \u003d new WaterMarkCommandParser();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            WaterMarkCommand waterMarkCommand \u003d waterMarkCommandParser.parse(\" hi\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            waterMarkCommand.execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            UndoCommand undoCommand \u003d new UndoCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            undoCommand.execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            WaterMarkCommand waterMarkCommand1 \u003d waterMarkCommandParser.parse(\" test\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            waterMarkCommand1.execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            SavePresetCommandParser parser \u003d new SavePresetCommandParser();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            SavePresetCommand command \u003d parser.parse(\" preset1\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            List\u003cCommand\u003e presetList \u003d currentEdit.getTempImage().getSubHistory();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            StringBuilder toPrint \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            for (Command editcommand: presetList) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                toPrint.append(\"[\" + editcommand.toString() + \"]\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            String expectedMessage \u003d Messages.MESSAGE_SAVEPRESET_SUCCESS + \" \" + toPrint.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            assertCommandSuccess(command, model, commandHistory, expectedMessage, currentEdit);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public void execute_savePresetWhenEmpty_fail() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        //Save the no commands into the preset"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            SavePresetCommandParser parser \u003d new SavePresetCommandParser();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            SavePresetCommand command \u003d parser.parse(\" empty\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            String expectedMessage \u003d Messages.MESSAGE_SAVEPRESET_FAIL_EMPTY;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            assertCommandFailure(command, model, commandHistory, expectedMessage, currentEdit);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public void execute_savePresetWhenDuplicate_fail() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        //Save a preset with name \"hi\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            BrightnessCommandParser brightnessCommandParser \u003d new BrightnessCommandParser();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            BrightnessCommand brightnessCommand \u003d brightnessCommandParser.parse(\"1.3\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            brightnessCommand.execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            RotateCommandParser rotateCommandParser \u003d new RotateCommandParser();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            RotateCommand rotateCommand \u003d rotateCommandParser.parse(\"90\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            rotateCommand.execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            SavePresetCommandParser savePresetCommandParser \u003d new SavePresetCommandParser();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            SavePresetCommand savePresetCommand \u003d savePresetCommandParser.parse(\"hi\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            savePresetCommand.execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        //Save a preset with the same name \"hi\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            ContrastCommandParser contrastCommandParser \u003d new ContrastCommandParser();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            ContrastCommand contrastCommand \u003d contrastCommandParser.parse(\"1.3\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            contrastCommand.execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            SavePresetCommandParser savePresetCommandParser \u003d new SavePresetCommandParser();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            SavePresetCommand savePresetCommand \u003d savePresetCommandParser.parse(\"hi\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            String expectedMessage \u003d Messages.MESSAGE_SAVEPRESET_FAIL_DUPLICATE;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            assertPresetCommandFailure(savePresetCommand, model, commandHistory, expectedMessage, currentEdit);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public void clearTransformationAndAlbum() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        transformationSet.clear();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        album.clearAlbum();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author*/"
      }
    ],
    "authorContributionMap": {
      "thamsimun": 131
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SetPresetCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author thamsimun */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertPresetCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.parser.ContrastCommandParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.parser.ImportCommandParser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.parser.OpenCommandParser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.parser.SavePresetCommandParser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.parser.SetPresetCommandParser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.parser.WaterMarkCommandParser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.Album;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEditManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.TransformationSet;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.image.Image;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "public class SetPresetCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private Album album \u003d Album.getInstance();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private TransformationSet transformationSet \u003d TransformationSet.getInstance();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private CurrentEdit currentEdit \u003d new CurrentEditManager();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        album.clearAlbum();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        transformationSet.clear();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            SetPresetCommandParser parserSetPreset \u003d new SetPresetCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            SetPresetCommand setPreset \u003d parserSetPreset.parse(\" 1.3\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            String expectedMessage \u003d Messages.MESSAGE_DID_NOT_OPEN;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            assertCommandFailure(setPreset, model, commandHistory, expectedMessage, currentEdit);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            ImportCommandParser parser \u003d new ImportCommandParser();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            parser.parse(\"sample\").execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            OpenCommandParser parser2 \u003d new OpenCommandParser();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            parser2.parse(\"iu.jpg\").execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            ContrastCommandParser contrastCommandParser \u003d new ContrastCommandParser();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            contrastCommandParser.parse(\" 1.3\").execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            WaterMarkCommandParser waterMarkCommandParser \u003d new WaterMarkCommandParser();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            waterMarkCommandParser.parse(\"cute\").execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            SavePresetCommandParser savePresetCommandParser \u003d new SavePresetCommandParser();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            savePresetCommandParser.parse(\"success\").execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public void execute_setPresetOnDifferentImage_success() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            OpenCommandParser openCommandParser \u003d new OpenCommandParser();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            openCommandParser.parse(\"validJPGTest.jpg\").execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            SetPresetCommandParser setPresetCommandParser \u003d new SetPresetCommandParser();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            SetPresetCommand setPresetCommand \u003d setPresetCommandParser.parse(\"success\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            List\u003cCommand\u003e presetList \u003d transformationSet.findTransformation(\"success\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            StringBuilder toPrint \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            for (Command command: presetList) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                toPrint.append(\"[\" + command.toString() + \"]\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            String expectedMessage \u003d Messages.MESSAGE_SETPRESET_SUCCESS + \" \" + toPrint.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            assertCommandSuccess(setPresetCommand, model, commandHistory, expectedMessage, currentEdit);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public void execute_setPresetNotFound_fail() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            SetPresetCommandParser setPresetCommandParser \u003d new SetPresetCommandParser();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            SetPresetCommand setPresetCommand \u003d setPresetCommandParser.parse(\"fail\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            String expectedMessage \u003d Messages.MESSAGE_SETPRESET_FAIL_NOTFOUND;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            assertCommandFailure(setPresetCommand, model, commandHistory, expectedMessage, currentEdit);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public void execute_setPresetOnSameImagewithWatermarkAlready_fail() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        String expectedMessage \u003d \"\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        //"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            SetPresetCommandParser setPresetCommandParser \u003d new SetPresetCommandParser();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            SetPresetCommand setPresetCommand \u003d setPresetCommandParser.parse(\"success\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            List\u003cCommand\u003e presetList \u003d transformationSet.findTransformation(\"success\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            for (Command editCommand: presetList) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                    editCommand.execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                } catch (CommandException exception) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                    Image initialImage \u003d currentEdit.getTempImage();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                    List\u003cCommand\u003e listBefore \u003d initialImage.getSubHistory();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                    currentEdit.replaceTempWithOriginal();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                    currentEdit.getTempImage().setWaterMark(false);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                    for (Command pastCommand: listBefore) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                        pastCommand.execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                    expectedMessage \u003d \"Error in [\" + editCommand.toString() + \"]:\\n\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                        + exception.toString().substring(58);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            assertPresetCommandFailure(setPresetCommand, model, commandHistory, expectedMessage, currentEdit);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author*/"
      }
    ],
    "authorContributionMap": {
      "thamsimun": 126
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/TabCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static seedu.address.logic.commands.TabCommand.MESSAGE_TAB_SUCCESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.model.CurrentEditManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": "public class TabCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private CurrentEdit currentEdit \u003d new CurrentEditManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void execute_tab_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_TAB_SUCCESS, false, false);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertCommandSuccess(new TabCommand(), model, commandHistory, expectedCommandResult, expectedModel,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "            currentEdit);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "randytqw"
        },
        "content": "/* @@author randytqw */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "randytqw"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.parser.BrightnessCommandParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.parser.ContrastCommandParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.parser.ImportCommandParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.parser.OpenCommandParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.model.Album;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.model.CurrentEditManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "randytqw"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    private final Album album \u003d Album.getInstance();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    private CurrentEdit currentEdit \u003d new CurrentEditManager();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        album.clearAlbum();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        //Image not opened yet"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            new UndoCommand().execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            assertCommandFailure(new UndoCommand(), model, commandHistory, Messages.MESSAGE_DID_NOT_OPEN,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "randytqw"
        },
        "content": "                currentEdit);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        //set up"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            ImportCommandParser importParser \u003d new ImportCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            importParser.parse(\"sample\").execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            OpenCommandParser openParser \u003d new OpenCommandParser();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            openParser.parse(\"iu.jpg\").execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        //No Undoable states"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            new UndoCommand().execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "randytqw"
        },
        "content": "                currentEdit);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            ContrastCommandParser contrastParser \u003d new ContrastCommandParser();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            ContrastCommand command1 \u003d contrastParser.parse(\" 2.0\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            command1.execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            BrightnessCommandParser brightnessParser \u003d new BrightnessCommandParser();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            BrightnessCommand command2 \u003d brightnessParser.parse(\" 2.0\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            command2.execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            //assertCommandSuccess(command1, model, commandHistory, Messages.MESSAGE_CONTRAST_SUCCESS, currentEdit);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            // assertCommandSuccess(command2, model, commandHistory, Messages.MESSAGE_BRIGHTNESS_SUCCESS, currentEdit);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, currentEdit);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, currentEdit);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE, currentEdit);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            currentEdit);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            currentEdit);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE, currentEdit); */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public void clearAlbum() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        Album album \u003d Album.getInstance();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        album.clearAlbum();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        currentEdit.clearTemp();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "randytqw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "randytqw": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/WaterMarkCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kayheen"
        },
        "content": "/* @@author kayheen */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kayheen"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import java.util.OptionalDouble;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.parser.ImportCommandParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.parser.OpenCommandParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.parser.WaterMarkCommandParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.model.Album;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.model.CurrentEdit;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.model.CurrentEditManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kayheen"
        },
        "content": "public class WaterMarkCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private Album album \u003d Album.getInstance();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private CurrentEdit currentEdit \u003d new CurrentEditManager();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public void createImagesInAlbum() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            // when image is null, should throw an error"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            WaterMarkCommandParser parserRotate \u003d new WaterMarkCommandParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            WaterMarkCommand waterMark \u003d parserRotate.parse(\" FomoFoto\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            String expectedMessage \u003d Messages.MESSAGE_DID_NOT_OPEN;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            assertCommandFailure(waterMark, model, commandHistory, expectedMessage, currentEdit);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            ImportCommandParser parser \u003d new ImportCommandParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            parser.parse(\"sample\").execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            OpenCommandParser parser2 \u003d new OpenCommandParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            parser2.parse(\"iu.jpg\").execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    // This tests for when WaterMark Command is a new command and image has no watermark"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public void execute_validWaterMark_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            WaterMarkCommandParser parser \u003d new WaterMarkCommandParser();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            WaterMarkCommand command \u003d parser.parse(\" FomoFoto\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            String expectedMessage \u003d Messages.MESSAGE_WATERMARK_SUCCESS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            assertCommandSuccess(command, model, commandHistory, expectedMessage, currentEdit);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    // This tests for when WaterMark Command is a new command and image has a watermark."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public void execute_addWaterMarkWhenAlreadyHave_failure() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            // preparing a the initial image with watermark."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            WaterMarkCommandParser parser \u003d new WaterMarkCommandParser();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            parser.parse(\" FomoFoto\").execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            // execute the test here."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            WaterMarkCommand command \u003d parser.parse(\" FomoFoto\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            String expectedMessage \u003d Messages.MESSAGE_HAS_WATERMARK;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            assertCommandFailure(command, model, commandHistory, expectedMessage, currentEdit);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    // This tests for when WaterMark Command is undone on an image."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public void execute_addWaterMarkCommandUndoRedo_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            // add rotate, watermark, contrast commands"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            new RotateCommand(90).execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            new WaterMarkCommand(\"FomoFoto\", true).execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            new ContrastCommand(OptionalDouble.of(Double.parseDouble(\"0.5\"))).execute(currentEdit, model,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                    commandHistory);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            // undo contrast, undo wm"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            new UndoCommand().execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            new UndoCommand().execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            // image now should only have rotate applied to it."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            WaterMarkCommandParser parser \u003d new WaterMarkCommandParser();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            WaterMarkCommand command \u003d parser.parse(\" FomoFoto\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            String expectedMessage \u003d Messages.MESSAGE_WATERMARK_SUCCESS;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            assertCommandSuccess(command, model, commandHistory, expectedMessage, currentEdit);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    // This tests for when WaterMark Command is undone and then redone on an image."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public void execute_addWaterMarkCommandUndoRedo_failure() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            // same as previous test case."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            new RotateCommand(90).execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            new WaterMarkCommand(\"FomoFoto\", true).execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            new ContrastCommand(OptionalDouble.of(Double.parseDouble(\"0.5\"))).execute(currentEdit, model,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                    commandHistory);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            new UndoCommand().execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            new UndoCommand().execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            // redo the WaterMark Command to test that redo also allows the detection that image has a watermark."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            new RedoCommand().execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            // should fail here."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            WaterMarkCommandParser parser \u003d new WaterMarkCommandParser();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            WaterMarkCommand command \u003d parser.parse(\" FomoFoto\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            String expectedMessage \u003d Messages.MESSAGE_HAS_WATERMARK;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            assertCommandFailure(command, model, commandHistory, expectedMessage, currentEdit);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    // This tests for when a preset is set and applies on an image without a watermark (success)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public void execute_addWaterMarkCommandPreset_success() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            // imitates the case when a preset is added and a watermark command within a preset is created."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            new WaterMarkCommand(\"FomoFoto\", true).execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            WaterMarkCommand command \u003d new WaterMarkCommand(\"FomoFoto\", false);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            // opens a new image to edit on (new image opened does not have a watermark and hence should succeed)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            OpenCommandParser parser \u003d new OpenCommandParser();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            parser.parse(\"validPNGTest.png\").execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            String expectedMessage \u003d Messages.MESSAGE_WATERMARK_SUCCESS;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            assertCommandSuccess(command, model, commandHistory, expectedMessage, currentEdit);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    // This tests for when a preset is set and applies on an image with a watermark (failure)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public void execute_addWaterMarkCommandPreset_failure() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            // imitates the case when a preset is added and a watermark command within a preset is created."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            new WaterMarkCommand(\"FomoFoto\", true).execute(currentEdit, model, commandHistory);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            WaterMarkCommand command \u003d new WaterMarkCommand(\"FomoFoto\", false);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            // the test should fail because the current image already has a watermark before the preset is added."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            String expectedMessage \u003d Messages.MESSAGE_HAS_WATERMARK;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            assertCommandFailure(command, model, commandHistory, expectedMessage, currentEdit);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kayheen"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public void clearAlbum() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        album.clearAlbum();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        currentEdit.clearTemp();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kayheen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kayheen": 153
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/BlackWhiteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author thamsimun */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import java.util.OptionalInt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.commands.BlackWhiteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "public class BlackWhiteCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private BlackWhiteCommandParser parser \u003d new BlackWhiteCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public void parse_validArgs_returnsBlackWhiteCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        assertParseSuccess(parser, \" 123\", new BlackWhiteCommand(OptionalInt.of(123)));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        assertParseSuccess(parser, \" 9\", new BlackWhiteCommand(OptionalInt.of(9)));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        assertParseSuccess(parser, \"\", new BlackWhiteCommand(OptionalInt.empty()));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        assertParseFailure(parser, \" abc\", String.format(Messages.MESSAGE_BLACKWHITE_INT_ERROR,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            BlackWhiteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        assertParseFailure(parser, \" -13\", String.format(Messages.MESSAGE_NEGATIVE_ERROR,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            BlackWhiteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        assertParseFailure(parser, \" 123 13\", String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            BlackWhiteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        assertParseFailure(parser, \" 134 132 4\", String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            BlackWhiteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author*/"
      }
    ],
    "authorContributionMap": {
      "thamsimun": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/BrightnessCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author thamsimun */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import java.util.OptionalDouble;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.commands.BrightnessCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "public class BrightnessCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private BrightnessCommandParser parser \u003d new BrightnessCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public void parse_validArgs_returnsBrightnessCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        assertParseSuccess(parser, \" 1.3\", new BrightnessCommand(OptionalDouble.of(1.3)));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        assertParseSuccess(parser, \"0.5\", new BrightnessCommand(OptionalDouble.of(0.5)));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        assertParseSuccess(parser, \"\", new BrightnessCommand(OptionalDouble.empty()));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        assertParseFailure(parser, \" abc\", String.format(Messages.MESSAGE_BRIGHTNESS_DOUBLE_ERROR,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            BrightnessCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        assertParseFailure(parser, \" 1.3f\", String.format(Messages.MESSAGE_BRIGHTNESS_DOUBLE_ERROR,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            BrightnessCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        assertParseFailure(parser, \" 1.3d\", String.format(Messages.MESSAGE_BRIGHTNESS_DOUBLE_ERROR,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            BrightnessCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        assertParseFailure(parser, \" -1.3\", String.format(Messages.MESSAGE_NEGATIVE_ERROR,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            BrightnessCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        assertParseFailure(parser, \" 1.3 1.3\", String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            BrightnessCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        assertParseFailure(parser, \" 1.3 1.3 0.4\", String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            BrightnessCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author*/"
      }
    ],
    "authorContributionMap": {
      "thamsimun": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ContrastCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author thamsimun */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import java.util.OptionalDouble;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.commands.ContrastCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "public class ContrastCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private ContrastCommandParser parser \u003d new ContrastCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public void parse_validArgs_returnsContrastCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        assertParseSuccess(parser, \" 1.3\", new ContrastCommand(OptionalDouble.of(1.3)));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        assertParseSuccess(parser, \"0.5\", new ContrastCommand(OptionalDouble.of(0.5)));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        assertParseSuccess(parser, \"\", new ContrastCommand(OptionalDouble.empty()));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        assertParseFailure(parser, \" abc\", String.format(Messages.MESSAGE_CONTRAST_DOUBLE_ERROR,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            ContrastCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        assertParseFailure(parser, \" 1.3f\", String.format(Messages.MESSAGE_CONTRAST_DOUBLE_ERROR,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            ContrastCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        assertParseFailure(parser, \" 1.3d\", String.format(Messages.MESSAGE_CONTRAST_DOUBLE_ERROR,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            ContrastCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        assertParseFailure(parser, \" -1.3\", String.format(Messages.MESSAGE_NEGATIVE_ERROR,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            ContrastCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        assertParseFailure(parser, \" 1.3 1.3\", String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            ContrastCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        assertParseFailure(parser, \" 1.3 1.3 0.4\", String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            ContrastCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author*/"
      }
    ],
    "authorContributionMap": {
      "thamsimun": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CropCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kayheen"
        },
        "content": "/* @@author kayheen */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kayheen"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.commands.CropCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kayheen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kayheen"
        },
        "content": " * This tests the various inputs that users can possibly input into a crop command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kayheen"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kayheen"
        },
        "content": "public class CropCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private CropCommandParser parser \u003d new CropCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public void parse_validArgs_returnsCropCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertParseSuccess(parser, \" 0 0 200 200\", new CropCommand(0, 0, 200, 200));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertParseSuccess(parser, \" 20 20 100 100\", new CropCommand(20, 20, 100, 100));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertParseFailure(parser, \" abc cdf ghi jkl\", String.format(Messages.MESSAGE_CROP_INT_ERROR,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                CropCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertParseFailure(parser, \" 90.5 20 20 20\", String.format(Messages.MESSAGE_CROP_INT_ERROR,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                CropCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertParseFailure(parser, \" -2 0 200 200\", String.format(Messages.MESSAGE_CROP_INT_ERROR,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                CropCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertParseFailure(parser, \" 90 100 200 50 79\", String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                CropCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertParseFailure(parser, \"\", String.format(Messages.MESSAGE_CROP_INT_ERROR,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                CropCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kayheen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kayheen": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ExportCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "randytqw"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "randytqw"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "randytqw"
        },
        "content": "public class ExportCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    private ExportCommandParser parser \u003d new ExportCommandParser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        //All fields present."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        assertParseSuccess(parser, \" f/123 d/abc\", new ExportCommand(\"abc\", \"123\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        // missing filename prefix"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        assertParseFailure(parser, \" 123 d/abc\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        // missing directory prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        assertParseFailure(parser, \" f/abc 123\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "randytqw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        // missing both prefix"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "randytqw"
        },
        "content": "        assertParseFailure(parser, \"abc 123\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "randytqw"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "randytqw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "randytqw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "randytqw": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FomoFotoParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.commands.CropCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.commands.ResizeCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.commands.RotateCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "public class FomoFotoParserTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private final FomoFotoParser parser \u003d new FomoFotoParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    /* @author kayheen */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public void parseCommand_rotate() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertTrue(parser.parseCommand(RotateCommand.COMMAND_WORD + \" 90\") instanceof RotateCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        RotateCommand expected \u003d (RotateCommand) parser.parseCommand(RotateCommand.COMMAND_WORD + \" 90\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertEquals(new RotateCommand(90), expected);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public void parseCommand_crop() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertTrue(parser.parseCommand(CropCommand.COMMAND_WORD + \" 0 0 200 200\") instanceof CropCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        CropCommand expected \u003d (CropCommand) parser.parseCommand(CropCommand.COMMAND_WORD + \" 0 0 200 200\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertEquals(new CropCommand(0, 0, 200, 200), expected);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public void parseCommand_resize() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertTrue(parser.parseCommand(ResizeCommand.COMMAND_WORD + \" 200 400\") instanceof ResizeCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        ResizeCommand expected \u003d (ResizeCommand) parser.parseCommand(ResizeCommand.COMMAND_WORD + \" 200 400\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertEquals(new ResizeCommand(200, 400), expected);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    /* @author */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kayheen": 25,
      "carrein": 5,
      "-": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ImportCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "/* @@author Carrein */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.model.Album;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "public class ImportCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private ImportCommandParser parser \u003d new ImportCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private Album album \u003d Album.getInstance();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "        album.clearAlbum();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void parse_validFiles_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String validBmpTest \u003d \"src/main/resources/imageTest/valid/validBMPTest.bmp\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String validDuplicateTest \u003d \"src/main/resources/imageTest/valid/validDuplicateTest.jpg\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String validGifTest \u003d \"src/main/resources/imageTest/valid/validGIFTest.gif\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String validJpgTest \u003d \"src/main/resources/imageTest/valid/validJPGTest.jpg\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String validMimeTest \u003d \"src/main/resources/imageTest/valid/validMIMETest.png\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String validNoMimeTest \u003d \"src/main/resources/imageTest/valid/validNOMIMETest.png\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String validPngTest \u003d \"src/main/resources/imageTest/valid/validPNGTest.png\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String validTifTest \u003d \"src/main/resources/imageTest/valid/validTIFTest.tif\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String validUnreasonablySmallTest \u003d \"src/main/resources/imageTest/valid/validUnreasonablySmallTest.jpg\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertParseSuccess(parser, validBmpTest, new ImportCommand(false));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertParseSuccess(parser, validDuplicateTest, new ImportCommand(false));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertParseSuccess(parser, validGifTest, new ImportCommand(false));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertParseSuccess(parser, validJpgTest, new ImportCommand(false));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertParseSuccess(parser, validMimeTest, new ImportCommand(false));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertParseSuccess(parser, validNoMimeTest, new ImportCommand(false));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertParseSuccess(parser, validPngTest, new ImportCommand(false));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertParseSuccess(parser, validTifTest, new ImportCommand(false));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertParseSuccess(parser, validUnreasonablySmallTest, new ImportCommand(false));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void parse_sampleDir_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String samplePath \u003d \"sample\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertParseSuccess(parser, samplePath, new ImportCommand(true));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void parse_validDir_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String dirPath \u003d \"src/main/resources/imageTest/valid/\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertParseSuccess(parser, dirPath, new ImportCommand(true));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void parse_invalidDir_success() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String dirPath \u003d \"src/main/resources/imageTest/invalid/\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertParseSuccess(parser, dirPath, new ImportCommand(true));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void parse_emptyPath_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String emptyPath \u003d \"\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertParseFailure(parser, emptyPath, Messages.MESSAGE_INVALID_PATH);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void parse_invalidPath_failure() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String emptyPath \u003d \"src/main/resources/imageTest/invalid/invalidPath.txt\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertParseFailure(parser, emptyPath, Messages.MESSAGE_INVALID_PATH);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void parse_invalidFormat_failure() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String invalidPdf \u003d \"src/main/resources/imageTest/invalid/invalidPDF.pdf\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String invalidRar \u003d \"src/main/resources/imageTest/invalid/invalidRARTest.rar\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String invalidText \u003d \"src/main/resources/imageTest/invalid/invalidSampleTextTest.txt\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String invalidZip \u003d \"src/main/resources/imageTest/invalid/invalidZIPTest.zip\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "carrein"
        },
        "content": "        List\u003cString\u003e invalidFiles \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "carrein"
        },
        "content": "        invalidFiles.add(invalidPdf);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "carrein"
        },
        "content": "        invalidFiles.add(invalidRar);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "carrein"
        },
        "content": "        invalidFiles.add(invalidText);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "carrein"
        },
        "content": "        invalidFiles.add(invalidZip);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "carrein"
        },
        "content": "        for (String s : invalidFiles) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "carrein"
        },
        "content": "            assertParseFailure(parser, s, Messages.MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void parse_invalidHidden_failure() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String invalidText \u003d \"src/main/resources/imageTest/invalid/.invalidHiddenTest.txt\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String invalidImage \u003d \"src/main/resources/imageTest/invalid/.invalidHiddenImageTest.jpg\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "carrein"
        },
        "content": "        List\u003cString\u003e hiddenFiles \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "carrein"
        },
        "content": "        hiddenFiles.add(invalidText);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "carrein"
        },
        "content": "        hiddenFiles.add(invalidImage);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "carrein"
        },
        "content": "        for (String s : hiddenFiles) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "carrein"
        },
        "content": "            assertParseFailure(parser, s, Messages.MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void parse_invalidSize_failure() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String emptyPath \u003d \"src/main/resources/imageTest/invalid/invalidUnreasonableBigTest.jpg\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertParseFailure(parser, emptyPath, Messages.MESSAGE_INVALID_SIZE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void parse_invalidMagicNumber_failure() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String emptyPath \u003d \"src/main/resources/imageTest/invalid/invalidMagicNumberPDFtoPNG.png\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertParseFailure(parser, emptyPath, Messages.MESSAGE_UNABLE_TO_READ_FILE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void parse_invalidDuplicate_failure() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String firstFile \u003d \"src/main/resources/imageTest/valid/validDuplicateTest.jpg\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertParseSuccess(parser, firstFile, new ImportCommand(false));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertParseFailure(parser, firstFile, Messages.MESSAGE_DUPLICATE_FILE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "carrein"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 130
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/OpenCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itszp"
        },
        "content": "/* @@author itszp */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itszp"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itszp"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itszp"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itszp"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itszp"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.logic.commands.OpenCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itszp"
        },
        "content": "public class OpenCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itszp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public void parse_emptyString_failure() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itszp"
        },
        "content": "        OpenCommandParser parser \u003d new OpenCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itszp"
        },
        "content": "        String emptyString \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itszp"
        },
        "content": "        assertParseFailure(parser, emptyString, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itszp"
        },
        "content": "                OpenCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itszp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public void parse_validString_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itszp"
        },
        "content": "        OpenCommandParser parser \u003d new OpenCommandParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itszp"
        },
        "content": "        String sampleString \u003d \"sample.png\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itszp"
        },
        "content": "        assertParseSuccess(parser, sampleString, new OpenCommand(\"sample.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itszp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itszp": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ResizeCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kayheen"
        },
        "content": "/* @@author kayheen */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kayheen"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.commands.ResizeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kayheen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kayheen"
        },
        "content": " * This tests the various inputs that users can possibly input in a resize command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kayheen"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kayheen"
        },
        "content": "public class ResizeCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private ResizeCommandParser parser \u003d new ResizeCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public void parse_validArgs_returnsResizeCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertParseSuccess(parser, \" 200 200\", new ResizeCommand(200, 200));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertParseSuccess(parser, \" 10 20\", new ResizeCommand(10, 20));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertParseFailure(parser, \" abc cdf\", String.format(Messages.MESSAGE_RESIZE_VALUE_ERROR,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                ResizeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertParseFailure(parser, \" 90.5 20\", String.format(Messages.MESSAGE_RESIZE_VALUE_ERROR,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                ResizeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertParseFailure(parser, \" -2 -100\", String.format(Messages.MESSAGE_RESIZE_VALUE_ERROR,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                ResizeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertParseFailure(parser, \" 90 100 200\", String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                ResizeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertParseFailure(parser, \"\", String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                ResizeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kayheen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kayheen": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/RotateCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kayheen"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.commands.RotateCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kayheen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kayheen"
        },
        "content": " * This tests the various inputs that users can possibly input into the rotate command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kayheen"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kayheen"
        },
        "content": "public class RotateCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private RotateCommandParser parser \u003d new RotateCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public void parse_validArgs_returnsRotateCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertParseSuccess(parser, \" 90\", new RotateCommand(90));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertParseSuccess(parser, \" 180\", new RotateCommand(180));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertParseSuccess(parser, \" 270\", new RotateCommand(270));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertParseSuccess(parser, \" 150\", new RotateCommand(150));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertParseFailure(parser, \" abc\", String.format(Messages.MESSAGE_ROTATE_DEGREE_ERROR,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                RotateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertParseFailure(parser, \" 90.5\", String.format(Messages.MESSAGE_ROTATE_DEGREE_ERROR,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                RotateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertParseFailure(parser, \" -20\", String.format(Messages.MESSAGE_ROTATE_DEGREE_ERROR,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                RotateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertParseFailure(parser, \" 90 190\", String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                RotateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertParseFailure(parser, \"\", String.format(Messages.MESSAGE_ROTATE_DEGREE_ERROR,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                RotateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kayheen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kayheen": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SaveCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itszp"
        },
        "content": "/* @@author itszp */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itszp"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itszp"
        },
        "content": "import static seedu.address.commons.core.Config.VALID_FILE_TYPES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itszp"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_SAVE_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itszp"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_SAVE_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itszp"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itszp"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itszp"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itszp"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itszp"
        },
        "content": "import seedu.address.logic.commands.SaveCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itszp"
        },
        "content": "public class SaveCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itszp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public void parse_emptyString_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itszp"
        },
        "content": "        SaveCommandParser parser \u003d new SaveCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itszp"
        },
        "content": "        String emptyString \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itszp"
        },
        "content": "        assertParseSuccess(parser, emptyString, new SaveCommand(\"\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itszp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public void parse_validSaveNames_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itszp"
        },
        "content": "        String validJpg \u003d \"sample.jpg\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itszp"
        },
        "content": "        String validJpeg \u003d \"sample.jpeg\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itszp"
        },
        "content": "        String validPng \u003d \"sample.png\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itszp"
        },
        "content": "        String validGif \u003d \"sample.gif\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itszp"
        },
        "content": "        String validBmp \u003d \"sample.bmp\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itszp"
        },
        "content": "        String validTif \u003d \"sample.tif\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itszp"
        },
        "content": "        String validTiff \u003d \"sample.tiff\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itszp"
        },
        "content": "        SaveCommandParser parser \u003d new SaveCommandParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itszp"
        },
        "content": "        assertParseSuccess(parser, validJpg, new SaveCommand(\"sample.jpg\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itszp"
        },
        "content": "        assertParseSuccess(parser, validJpeg, new SaveCommand(\"sample.jpeg\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itszp"
        },
        "content": "        assertParseSuccess(parser, validPng, new SaveCommand(\"sample.png\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itszp"
        },
        "content": "        assertParseSuccess(parser, validGif, new SaveCommand(\"sample.gif\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itszp"
        },
        "content": "        assertParseSuccess(parser, validBmp, new SaveCommand(\"sample.bmp\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itszp"
        },
        "content": "        assertParseSuccess(parser, validTif, new SaveCommand(\"sample.tif\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itszp"
        },
        "content": "        assertParseSuccess(parser, validTiff, new SaveCommand(\"sample.tiff\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itszp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public void parse_invalidSaveName_failure() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itszp"
        },
        "content": "        String invalidJpg \u003d \".jpg\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itszp"
        },
        "content": "        String invalidJpeg \u003d \".jpeg\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itszp"
        },
        "content": "        String invalidPng \u003d \".png\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itszp"
        },
        "content": "        String invalidGif \u003d \".gif\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itszp"
        },
        "content": "        String invalidBmp \u003d \".bmp\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itszp"
        },
        "content": "        String invalidTif \u003d \".tif\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itszp"
        },
        "content": "        SaveCommandParser parser \u003d new SaveCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itszp"
        },
        "content": "        assertParseFailure(parser, invalidJpg, MESSAGE_INVALID_SAVE_NAME);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itszp"
        },
        "content": "        assertParseFailure(parser, invalidJpeg, MESSAGE_INVALID_SAVE_NAME);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itszp"
        },
        "content": "        assertParseFailure(parser, invalidPng, MESSAGE_INVALID_SAVE_NAME);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itszp"
        },
        "content": "        assertParseFailure(parser, invalidGif, MESSAGE_INVALID_SAVE_NAME);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itszp"
        },
        "content": "        assertParseFailure(parser, invalidBmp, MESSAGE_INVALID_SAVE_NAME);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itszp"
        },
        "content": "        assertParseFailure(parser, invalidTif, MESSAGE_INVALID_SAVE_NAME);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itszp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itszp"
        },
        "content": "    public void parse_invalidSaveType_failure() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itszp"
        },
        "content": "        String invalidNoPeriod \u003d \"jpg\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itszp"
        },
        "content": "        String invalidPdf \u003d \".pdf\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itszp"
        },
        "content": "        String invalidUnknownFormat \u003d \".p\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itszp"
        },
        "content": "        String invalidSpelling \u003d \".pngg\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itszp"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itszp"
        },
        "content": "        SaveCommandParser parser \u003d new SaveCommandParser();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itszp"
        },
        "content": "        assertParseFailure(parser, invalidNoPeriod, String.format(MESSAGE_INVALID_SAVE_TYPE,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itszp"
        },
        "content": "                Arrays.toString(VALID_FILE_TYPES)));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itszp"
        },
        "content": "        assertParseFailure(parser, invalidPdf, String.format(MESSAGE_INVALID_SAVE_TYPE,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itszp"
        },
        "content": "                Arrays.toString(VALID_FILE_TYPES)));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itszp"
        },
        "content": "        assertParseFailure(parser, invalidUnknownFormat, String.format(MESSAGE_INVALID_SAVE_TYPE,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itszp"
        },
        "content": "                Arrays.toString(VALID_FILE_TYPES)));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itszp"
        },
        "content": "        assertParseFailure(parser, invalidSpelling, String.format(MESSAGE_INVALID_SAVE_TYPE,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itszp"
        },
        "content": "                Arrays.toString(VALID_FILE_TYPES)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itszp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itszp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itszp": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SavePresetCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author thamsimun */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.commands.SavePresetCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "public class SavePresetCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private SavePresetCommandParser parser \u003d new SavePresetCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public void parse_validArgsWithTrueIsNewCommand_returnsSavePresetCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        assertParseSuccess(parser, \" hellohello123\", new SavePresetCommand(\"hellohello123\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        assertParseSuccess(parser, \" 你好你好你好123\", new SavePresetCommand(\"你好你好你好123\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        assertParseSuccess(parser, \" hello this string is long\", new SavePresetCommand(\"hello this \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            + \"string is long\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        assertParseSuccess(parser, \" 234987129$#%@\", new SavePresetCommand(\"234987129$#%@\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        assertParseFailure(parser, \" \", String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            SavePresetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author*/"
      }
    ],
    "authorContributionMap": {
      "thamsimun": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SetPresetCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author thamsimun */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.logic.commands.SetPresetCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "public class SetPresetCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    private SetPresetCommandParser parser \u003d new SetPresetCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public void parse_validArgsWithTrueIsNewCommand_returnsSetPresetCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        assertParseSuccess(parser, \" hellohello123\", new SetPresetCommand(\"hellohello123\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        assertParseSuccess(parser, \" 你好你好你好123\", new SetPresetCommand(\"你好你好你好123\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        assertParseSuccess(parser, \" hello this string is long\", new SetPresetCommand(\"hello this \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            + \"string is long\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        assertParseSuccess(parser, \" 234987129$#%@\", new SetPresetCommand(\"234987129$#%@\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thamsimun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "        assertParseFailure(parser, \" \", String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            SetPresetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "/* @@author*/"
      }
    ],
    "authorContributionMap": {
      "thamsimun": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/WaterMarkCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kayheen"
        },
        "content": "/* @@author kayheen */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kayheen"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.logic.commands.WaterMarkCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kayheen"
        },
        "content": "public class WaterMarkCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    private WaterMarkCommandParser parser \u003d new WaterMarkCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public void parse_validArgsWithTrueIsNewCommand_returnsWaterMarkCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertParseSuccess(parser, \" hellohello123\", new WaterMarkCommand(\"hellohello123\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                true));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertParseSuccess(parser, \" 你好你好你好123\", new WaterMarkCommand(\"你好你好你好123\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                true));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertParseSuccess(parser, \" hello this string is long\", new WaterMarkCommand(\"hello this string\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                + \" is long\", true));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertParseSuccess(parser, \" 234987129$#%@\", new WaterMarkCommand(\"234987129$#%@\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                true));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kayheen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        assertParseFailure(parser, \" \", String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                WaterMarkCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kayheen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kayheen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kayheen": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AlbumTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "/* @@author Carrein */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertArrayEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static seedu.address.commons.core.Config.ASSETS_FOLDER_TEMP_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.logic.parser.ImportCommandParser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.model.image.Image;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": "public class AlbumTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public final Album album \u003d Album.getInstance();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrein"
        },
        "content": "        album.clearAlbum();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertEquals(album.getImageList(), Collections.emptyList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void invalid_saveToAssets() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e album.saveToAssets(null, null)); //null"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void valid_getFileName() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertParseSuccess(new ImportCommandParser(), \"src/main/resources/imageTest/valid/iu.jpg\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "carrein"
        },
        "content": "                new ImportCommand(false));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String[] array \u003d {\"iu.jpg\"};"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertArrayEquals(album.getFileNames(), array);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void valid_retrieveImage() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Image image \u003d new Image(\"src/main/resources/imageTest/valid/iu.jpg\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertParseSuccess(new ImportCommandParser(), \"src/main/resources/imageTest/valid/iu.jpg\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "carrein"
        },
        "content": "                new ImportCommand(false));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertEquals(album.retrieveImage(\"iu.jpg\").toString(), image.toString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void invalid_retrieveImage() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e album.retrieveImage(null)); //null"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e album.retrieveImage(\"\")); //empty"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void invalid_checkFileExist() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertFalse(album.checkFileExist(null)); //null"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertFalse(album.checkFileExist(\"\")); //empty"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertFalse(album.checkFileExist(\" \")); //space"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertFalse(album.checkFileExist(\"dalladalla\")); //rubbish path"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertFalse(album.checkFileExist(\"iu.jpg\")); //valid path but does not exist"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void valid_checkFileExist() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertParseSuccess(new ImportCommandParser(), \"src/main/resources/imageTest/valid/iu.jpg\","
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "carrein"
        },
        "content": "                new ImportCommand(false));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertTrue(album.checkFileExist(\"iu.jpg\")); //valid path and file"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void valid_clearAlbum() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertParseSuccess(new ImportCommandParser(), \"src/main/resources/imageTest/valid/iu.jpg\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "carrein"
        },
        "content": "                new ImportCommand(false));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "carrein"
        },
        "content": "        album.clearAlbum();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "carrein"
        },
        "content": "        List\u003cImage\u003e emptyList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertTrue(album.getImageList().size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertTrue(album.getImageList().equals(emptyList));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void invalid_clearAlbum() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertParseSuccess(new ImportCommandParser(), \"src/main/resources/imageTest/valid/iu.jpg\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "carrein"
        },
        "content": "                new ImportCommand(false));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "carrein"
        },
        "content": "        album.clearAlbum();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertFalse(album.getImageList().size() \u003e 0);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void valid_addToImageList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "carrein"
        },
        "content": "        album.addToImageList(\"src/main/resources/imageTest/valid/iu.jpg\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertTrue(album.getImageList().size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void valid_populateAlbum() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "carrein"
        },
        "content": "        album.addToImageList(\"src/main/resources/imageTest/valid/iu.jpg\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertTrue(album.getImageList().size() \u003e 0);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void valid_generateAssets() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String tDir \u003d System.getProperty(\"user.dir\") + File.separator + ASSETS_FOLDER_TEMP_NAME + File.separator;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertEquals(album.generateAssets(), tDir);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertTrue(new File(tDir).exists());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void valid_imageExist() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "carrein"
        },
        "content": "        album.addToImageList(\"src/main/resources/imageTest/valid/iu.jpg\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertTrue(album.getImageList().size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "carrein"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 129
    }
  },
  {
    "path": "src/test/java/seedu/address/model/image/HeightTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "/* @@author Carrein */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": "package seedu.address.model.image;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": "public class HeightTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private final Size height \u003d new Size(\"10\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private final Size dup \u003d new Size(\"10\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Height(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void constructor_invalidHeight_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String invalidHeight \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Assert.assertThrows(NumberFormatException.class, () -\u003e new Height(invalidHeight));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void isValidHeight() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": "        // null height"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Assert.assertThrows(NumberFormatException.class, () -\u003e Height.isValidHeight(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": "        // invalid height"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Assert.assertThrows(NumberFormatException.class, () -\u003e Height.isValidHeight(\"\")); //empty height"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Assert.assertThrows(NumberFormatException.class, () -\u003e Height.isValidHeight(\" \")); //spaces height"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Assert.assertThrows(NumberFormatException.class, () -\u003e Height.isValidHeight(\"NaN\")); //bot a number"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertFalse(Height.isValidHeight(\"0\")); // zero height"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertFalse(Height.isValidHeight(Integer.toString(Integer.MIN_VALUE))); // negative value"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrein"
        },
        "content": "        // valid height"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertTrue(Height.isValidHeight(\"1\")); // minimum positive value"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertTrue(Height.isValidHeight(Integer.toString(Integer.MAX_VALUE))); // positive value"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void equality() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertTrue(height.equals(dup));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void stringify() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertEquals(height.toString(), \"10\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "carrein"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/model/image/ImageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "/* @@author Carrein */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": "package seedu.address.model.image;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": "public class ImageTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "                new Image((String) null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": "                new Image(\"src/main/resources/imageTest/valid/valid/validPNGTest\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void constructor_invalidFileArgument() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": "                new Image(new File(\"src/main/resources/imageTest/valid/valid/validPNGTest\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/model/image/NameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "/* @@author Carrein */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": "package seedu.address.model.image;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private final Name name \u003d new Name(\"sample\", \"jpg\", \"sample.jpg\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private final Name dup \u003d new Name(\"sample\", \"jpg\", \"sample.jpg\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null, null, null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName, invalidName, invalidName));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidExtension(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertFalse(Name.isValidExtension(\"\")); // empty string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertFalse(Name.isValidExtension(\" \")); // spaces only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertFalse(Name.isValidExtension(\"sample.txt\")); // invalid file format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertFalse(Name.isValidExtension(\"sample.\")); // missing extensions"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertFalse(Name.isValidExtension(\"sample\")); // raw name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrein"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertTrue(Name.isValidExtension(\"sample.jpg\")); // JPG format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertTrue(Name.isValidExtension(\"sample.tiff\")); // TIFF format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertTrue(Name.isValidExtension(\"sample.bmp\")); // BMP format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertTrue(Name.isValidExtension(\"sample.gif\")); // GIF format"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertTrue(Name.isValidExtension(\"sample.png\")); // PNG format"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void valid_getBaseName() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertEquals(name.getBaseName(), \"sample\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void valid_getExtName() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertEquals(name.getExtName(), \"jpg\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void valid_getFullName() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertEquals(name.getFullName(), \"sample.jpg\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void equality() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertTrue(name.equals(dup));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "carrein"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/model/image/SizeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "/* @@author Carrein */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": "package seedu.address.model.image;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": "public class SizeTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private final Size size \u003d new Size(\"10\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private final Size dup \u003d new Size(\"10\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Size(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void constructor_invalidSize_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String invalidSize \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Assert.assertThrows(NumberFormatException.class, () -\u003e new Size(invalidSize));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void isValidSize() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": "        // null width"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Assert.assertThrows(NumberFormatException.class, () -\u003e Size.isValidSize(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": "        // invalid width"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Assert.assertThrows(NumberFormatException.class, () -\u003e Size.isValidSize(\"\")); //empty size"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Assert.assertThrows(NumberFormatException.class, () -\u003e Size.isValidSize(\" \")); //spaces size"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Assert.assertThrows(NumberFormatException.class, () -\u003e Size.isValidSize(\"NaN\")); //not a number"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertFalse(Size.isValidSize(\"0\")); // zero size"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertFalse(Size.isValidSize(Integer.toString(Integer.MIN_VALUE))); // negative value"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertTrue(Size.isValidSize(Integer.toString(Integer.MAX_VALUE))); // value over 100mb"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrein"
        },
        "content": "        // valid size"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertTrue(Size.isValidSize(\"1\")); // minimum positive size"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertTrue(Size.isValidSize(\"100000000\")); // maximum positive size"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void equality() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertTrue(size.equals(dup));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void stringify() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertEquals(size.toString(), \"10\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "carrein"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/model/image/WidthTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "/* @@author Carrein */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrein"
        },
        "content": "package seedu.address.model.image;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": "public class WidthTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private final Size width \u003d new Size(\"10\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private final Size dup \u003d new Size(\"10\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Width(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void constructor_invalidWidth_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String invalidWidth \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Assert.assertThrows(NumberFormatException.class, () -\u003e new Width(invalidWidth));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void isValidWidth() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrein"
        },
        "content": "        // null width"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Assert.assertThrows(NumberFormatException.class, () -\u003e Width.isValidWidth(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrein"
        },
        "content": "        // invalid width"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Assert.assertThrows(NumberFormatException.class, () -\u003e Width.isValidWidth(\"\")); //empty width"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Assert.assertThrows(NumberFormatException.class, () -\u003e Width.isValidWidth(\" \")); //spaces width"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrein"
        },
        "content": "        Assert.assertThrows(NumberFormatException.class, () -\u003e Width.isValidWidth(\"NaN\")); //not a number"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertFalse(Width.isValidWidth(\"0\")); // zero width"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertFalse(Width.isValidWidth(Integer.toString(Integer.MIN_VALUE))); // negative value"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrein"
        },
        "content": "        // valid width"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertTrue(Width.isValidWidth(\"1\")); // minimum positive value"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertTrue(Width.isValidWidth(Integer.toString(Integer.MAX_VALUE))); // positive value"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void equality() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertTrue(width.equals(dup));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "carrein"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "carrein"
        },
        "content": "    public void stringify() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertEquals(width.toString(), \"10\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "carrein"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/BrowserPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrein"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private SimpleObjectProperty\u003cPerson\u003e selectedPerson \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": "    //private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanelHandle browserPanelHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrein"
        },
        "content": "   */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "/* @Before"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel(selectedPerson));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(browserPanel);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // default web page"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BrowserPanel.DEFAULT_PAGE, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // associated web page of a person"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e selectedPerson.set(ALICE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedPersonUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + ALICE.getName().fullName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(browserPanelHandle);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPersonUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }*//*"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "carrein"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "carrein": 7,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CommandBoxTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": "    private static final String COMMAND_THAT_SUCCEEDS \u003d ClearCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ArrayList\u003cString\u003e history \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandBoxHandle commandBoxHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(commandText -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandText.equals(COMMAND_THAT_SUCCEEDS)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                return new CommandResult(\"Command successful\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(\"Command failed\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }, history);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(commandBox);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithFailedCommand() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify that style is changed correctly even after multiple consecutive failed commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_handleKeyPress() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.A);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithUp() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands (latest command is failure)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "carrein"
        },
        "content": "        String thirdCommand \u003d \"clear\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, thirdCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithDown() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text remains \u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(keycode);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommand, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 3,
      "-": 156
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/MainWindowCloseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StageHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "import seedu.address.model.CurrentEditManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains tests for closing of the {@code MainWindow}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowCloseTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private EmptyMainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storageManager \u003d new StorageManager(jsonAddressBookStorage, jsonUserPrefsStorage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.setupStage(stage -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            this.stage \u003d stage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thamsimun"
        },
        "content": "            mainWindow \u003d new MainWindow(stage, new LogicManager(new ModelManager(), storageManager,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrein"
        },
        "content": "                new CurrentEditManager()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle \u003d new EmptyMainWindowHandle(stage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle.focus();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_menuBarExitButton_allWindowsClosed() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuExitButton();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_externalRequest_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuHelpButton();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.closeMainWindowExternally();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * A handle for an empty {@code MainWindow}. The components in {@code MainWindow} are not initialized."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EmptyMainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        private EmptyMainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            super(stage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} by clicking on the menu bar\u0027s exit button."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuExitButton() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"File\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Exit\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} through an external request {@code MainWindow} (e.g pressing the \u0027X\u0027 button on"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "         * the {@code MainWindow} or closing the app through the taskbar)."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        private void closeMainWindowExternally() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(() -\u003e stage.fireEvent(new WindowEvent(stage, WindowEvent.WINDOW_CLOSE_REQUEST)));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * Opens the {@code HelpWindow} by clicking on the menu bar\u0027s help button."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuHelpButton() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Help\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"F1\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 1,
      "-": 97,
      "thamsimun": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kayheen"
        },
        "content": "import seedu.address.ui.PersonCard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                actualCard.getTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kayheen"
        },
        "content": "        expectedPerson.getTags().stream().map(tag -\u003e tag.tagName).forEach(tag -\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                assertEquals(Arrays.asList(\"label\", PersonCard.getTagColourStyleFor(tag)),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kayheen"
        },
        "content": "                        actualCard.getTagStyleClasses(tag)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.length; i++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        int numberOfPeople \u003d personListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kayheen": 5,
      "-": 73
    }
  },
  {
    "path": "src/test/java/systemtests/AddressBookSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": "//import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrein"
        },
        "content": "//import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrein"
        },
        "content": "//import java.net.URL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrein"
        },
        "content": "//import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "carrein"
        },
        "content": "@Ignore"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class AddressBookSystemTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "carrein"
        },
        "content": "        //waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getPersonListPanel();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /* public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "carrein"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "carrein"
        },
        "content": "        //waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes all persons in the address book."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void deleteAllPersons() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same person objects as {@code expectedModel}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the person list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(expectedModel.getAddressBook()), testApp.readStorageAddressBook());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "carrein"
        },
        "content": "        //getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().rememberSelectedPersonCard();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url is now displaying the"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * default page."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /*    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            assertFalse(getPersonListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "carrein"
        },
        "content": "    /*    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            getPersonListPanel().navigateToCard(getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            URL expectedUrl;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new AssertionError(\"URL expected to be valid.\", mue);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "carrein"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "carrein"
        },
        "content": "        //assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "carrein"
        },
        "content": "        //assertEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 19,
      "-": 243
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrein"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CLEAR_SUCCESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrein"
        },
        "content": "@Ignore"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo clearing address book -\u003e original address book restored */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo clearing address book -\u003e cleared */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before clearing -\u003e entire address book cleared */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear empty address book -\u003e cleared */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "carrein"
        },
        "content": "        assertCommandSuccess(command, MESSAGE_CLEAR_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 4,
      "-": 91
    }
  },
  {
    "path": "src/test/java/systemtests/ClockRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TestRule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runner.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runners.model.Statement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * This rule makes the time stamp in the status bar predictable during a test."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Before the test starts, the rule replaces the clock in the status bar with a fixed clock."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * At the end of the test, the rule restores the original clock."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Clock#fixed(Instant, ZoneId)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrein"
        },
        "content": "@Ignore"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClockRule implements TestRule {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Clock injectedClock;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void before() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void after() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Statement apply(final Statement base, final Description description) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Statement() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            public void evaluate() throws Throwable {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                before();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    base.evaluate();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                    after();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public Clock getInjectedClock() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return injectedClock;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the clock in the status bar with a fixed clock having the current time as its instance."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setInjectedClockToCurrentTime() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 3,
      "-": 57
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrein"
        },
        "content": "@Ignore"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().click();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrein"
        },
        "content": "        /*        getBrowserPanel().click();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "carrein"
        },
        "content": "                getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "carrein"
        },
        "content": "                assertHelpWindowNotOpen();*/"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "carrein"
        },
        "content": "        //assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 7,
      "-": 90
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods to set up {@code Model} for testing."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "@Ignore"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelHelper {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Predicate\u003cPerson\u003e PREDICATE_MATCHING_NO_PERSONS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setFilteredList(Model model, List\u003cPerson\u003e toDisplay) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cPredicate\u003cPerson\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate.orElse(PREDICATE_MATCHING_NO_PERSONS));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ModelHelper#setFilteredList(Model, List)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setFilteredList(Model model, Person... toDisplay) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        setFilteredList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Person} equals to {@code other}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Predicate\u003cPerson\u003e getPredicateMatching(Person other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return person -\u003e person.equals(other);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 4,
      "-": 39
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrein"
        },
        "content": "@Ignore"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBook_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Person[] expectedList \u003d SampleDataUtil.getSamplePersons();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 2,
      "-": 51
    }
  },
  {
    "path": "src/test/java/systemtests/SystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrein"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrein"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrein"
        },
        "content": "@Ignore"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class SystemTestSetupHelper {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp setupApplication(Supplier\u003cReadOnlyAddressBook\u003e addressBook, Path saveFileLocation) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(addressBook, saveFileLocation));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrein": 3,
      "-": 74
    }
  }
]
