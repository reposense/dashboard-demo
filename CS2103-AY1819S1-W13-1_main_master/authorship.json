[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chantca95"
        },
        "content": "\u003d InsuRen"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "https://travis-ci.org/CS2103-AY1819S1-W13-1/main[image:https://travis-ci.org/CS2103-AY1819S1-W13-1/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "https://ci.appveyor.com/project/denzelchung/main-1gn9v/branch/master[image:https://ci.appveyor.com/api/projects/status/0cw1hdcgcqu31k9l/branch/master?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S1-W13-1/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103-AY1819S1-W13-1/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chantca95"
        },
        "content": "\u0027Ren\u0027 in Mandarin translates to \u0027person\u0027 or \u0027people\u0027, and true to our name, this app is all about managing one\u0027s"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chantca95"
        },
        "content": "network of clients in an organized, efficient and intuitive manner. InsuRen is geared to the needs of the modern"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chantca95"
        },
        "content": "Insurance salesman, but anyone whose business is their strong rapport with their clients will find this"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chantca95"
        },
        "content": "to be an indispensable tool."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chantca95"
        },
        "content": "Managing one\u0027s clientele has never been easier! InsuRen is designed to be used"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chantca95"
        },
        "content": "without the hassle of a mouse, as users interact with their database purely through intuitive text commands."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chantca95"
        },
        "content": "Some key features of our product include:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chantca95"
        },
        "content": "* Adding tags to contacts and sorting contacts by tags."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chantca95"
        },
        "content": "* Scheduling meetings for each contact and consolidating all meetings into a weekly timetable."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chantca95"
        },
        "content": "* Keeping track of clients\u0027 payment dues."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chantca95"
        },
        "content": "* Importing contacts from external databases and exporting the contacts in InsuRen\u0027s database."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chantca95"
        },
        "content": "* And many more!"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chantca95"
        },
        "content": "* This project was evolved from the \"AddressBook-Level4\" project created by SE-EDU initiative at https://github.com/se-edu/"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "-": 26,
      "denzelchung": 3,
      "chantca95": 16
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "  \"authors\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "      \"githubId\": \"A19Sean\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "      \"displayName\": \"AUYOK... SEAN\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "      \"authorNames\": [\"A19Sean\", \"Auyok Sean\"]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    },"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "      \"githubId\": \"chantca95\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "      \"displayName\": \"CHAN ... ALEX\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "      \"authorNames\": [\"chantca95\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    },"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "      \"githubId\": \"AyushChatto\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "      \"displayName\": \"CHATT...AYUSH\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "      \"authorNames\": [\"AyushChatto\"]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    },"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "      \"githubId\": \"denzelchung\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "      \"displayName\": \"CHUNG...ENZEL\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "      \"authorNames\": [\"denzelchung\"]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    },"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "      \"githubId\": \"zioul123\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "      \"displayName\": \"KIM-C...LOUIZ\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "      \"authorNames\": [\"zioul123\"]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "A19Sean": 30
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    archiveName \u003d \u0027insuren.jar\u0027"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        \u0027site-name\u0027: \u0027InsuRen\u0027,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/CS2103-AY1819S1-W13-1/main\u0027,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "zioul123": 1,
      "-": 238,
      "denzelchung": 3
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zioul123"
        },
        "content": "InsuRen was developed by the https://github.com/CS2103-AY1819S1-W13-1[W13-1] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zioul123"
        },
        "content": "\u003d\u003d\u003d Auyok Sean"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zioul123"
        },
        "content": "image::a19sean.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "{empty}[https://github.com/A19Sean[github]] [\u003c\u003cA19Sean#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zioul123"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zioul123"
        },
        "content": "Responsibilities: Documentation and Code Quality, UI Component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zioul123"
        },
        "content": "\u003d\u003d\u003d Chattoraj Ayush"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zioul123"
        },
        "content": "image::ayushchatto.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "{empty}[https://github.com/AyushChatto[github]] [\u003c\u003cAyushChatto#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zioul123"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zioul123"
        },
        "content": "Responsibilities: Workflow, Git, and Github, Logic Component"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zioul123"
        },
        "content": "\u003d\u003d\u003d Alex Chan"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zioul123"
        },
        "content": "image::chantca95.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "{empty}[https://github.com/chantca95[github]] [\u003c\u003cchantca95#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chantca95"
        },
        "content": "Responsibilities: Testing, UI Component, Documentation"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zioul123"
        },
        "content": "\u003d\u003d\u003d Denzel Chung"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zioul123"
        },
        "content": "image::denzelchung.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "{empty}[https://github.com/denzelchung[github]] [\u003c\u003cdenzelchung#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zioul123"
        },
        "content": "Responsibilities: Integration, Storage Component"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zioul123"
        },
        "content": "\u003d\u003d\u003d Louiz Kim-Chan"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zioul123"
        },
        "content": "image::zioul123.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "{empty}[https://github.com/zioul123[github]] [\u003c\u003czioul123#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zioul123"
        },
        "content": "Role: Team lead +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zioul123"
        },
        "content": "Responsibilities: Deliverables and deadlines, Model Component"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "zioul123": 19,
      "-": 31,
      "AyushChatto": 4,
      "denzelchung": 1,
      "chantca95": 1
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2103-AY1819S1-W13-1/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "* *Email us* : You can also reach us at `louiz.kc [at] u.nus.edu`, `sean.auyok [at] u.nus.edu`, `ayush.chattoraj [at] u.nus.edu`, `alexchan [at] u.nus.edu`, `e0177160 [at] u.nus.edu`."
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "denzelchung": 2
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "\u003d InsuRen - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-W13-1/main/tree/master"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "By: `Team W13-1`      Since: `Sep 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson.java`] and link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/address/commons/util/XmlUtilTest.java[`XmlUtilTest.java`] and link:{repoURL}/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zioul123"
        },
        "content": "After forking the repo, the documentation will still have the CS2103-AY1819S1-W13-1 branding and refer to the `CS2103-AY1819S1-W13-1/main` repo."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zioul123"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `CS2103-AY1819S1-W13-1/main`), you should do the following:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zioul123"
        },
        "content": "When you are ready to start coding, get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zioul123"
        },
        "content": "* stores the contact information data."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in xml format and read it back."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zioul123"
        },
        "content": "// tag::byNameCommands[]"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zioul123"
        },
        "content": "\u003d\u003d\u003d By-Name-Commands Feature"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zioul123"
        },
        "content": "\u003d\u003d\u003d\u003d General Current Implementation"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zioul123"
        },
        "content": "The \"by-name-commands\" are extensions to the regular Commands, facilitated by classes that extend the regular `Command` classes. Currently implemented are the `EditByNameCommand` and the `DeleteByNameCommand`."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zioul123"
        },
        "content": "They make use of `String` identifiers and the `PersonFinderUtil` to find the `Person` that the `Command` refers to, rather than an `Index`. +"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zioul123"
        },
        "content": "This allows time to be saved when trying to run a command, because instead of having to run a `find` or `list` command to display a `Person`, then type the command based on the `Index` of the list that the `Person` appears under, commands can be targeted swiftly and precisely."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zioul123"
        },
        "content": "The \"by-name-commands\" depend on the following operation/classes:"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zioul123"
        },
        "content": "* `PersonFinderUtil#findPerson(Model model, String personIdentifier)` -- Finds and returns the `Person` that is uniquely identified by the `personIdentifier` in the `Model` provided."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zioul123"
        },
        "content": "* `NameContainsAllKeywordsPredicate` -- Tests as true when the name of a `Person` matches all the keywords in the command\u0027s arguments."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zioul123"
        },
        "content": "** The `PersonFinderUtil#findPerson` method makes use of the `NameContainsAllKeywordsPredicate`, which is in contrast to the `NameContainsKeywordsPredicate` used in the `FindCommand`."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zioul123"
        },
        "content": "** When editing/deleting by name, we need a more specific filter, rather than a general one. Instead of finding a `Person` that contains at least one identifier term in their name, the `Person` found must contain *all* identifier terms in their name."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zioul123"
        },
        "content": "The following sequence diagram shows how a command is generated by the `AddressBookParser`. When a `\u003ccmd\u003e` (`edit`/`delete`) is provided, the `\u003ccmd\u003eCommandParser` will either generate a `\u003ccmd\u003eCommand` or a `\u003ccmd\u003eByNameCommand`."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zioul123"
        },
        "content": "image::ByNameCommandSequenceDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zioul123"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zioul123"
        },
        "content": "In the following section, the shorthand format `\\_ByNameCommand` and `_Command` when used in the same context will refer to a similar type of command, e.g. `DeleteByNameCommand` and `DeleteCommand`, but `_` is general to refer to either `Delete` or `Edit`."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zioul123"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zioul123"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Whether a `_ByNameCommand` should Extend the Regular `_Command`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zioul123"
        },
        "content": "* **Alternative 1 (current choice):** It extends the `Command` as shown:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zioul123"
        },
        "content": "image::ByNameCommandClassDiagram.png[width\u003d\"150\"]"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zioul123"
        },
        "content": "** Pros: Due to polymorphism, a `_ByNameCommand` can replace instances of `_Command` seamlessly in the code without having to"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zioul123"
        },
        "content": "change many parts to add this additional feature. It also makes sense, because a `_ByNameCommand` \"is a\" `_Command` (e.g. an `EditByNameCommand` is an `EditCommand`)"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zioul123"
        },
        "content": "** Cons: There is an unused field in `EditCommand` (`index`)."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "zioul123"
        },
        "content": "* **Alternative 2:** Create a new `_ByNameCommand`, standalone from the `_Command`"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "zioul123"
        },
        "content": "** Pros: Can save a bit of memory space on execution, since parts of the `_Command` that are not used do not provide extra baggage to the `_ByNameCommand` (e.g. no extra `Index` in the `EditByNameCommand`)"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zioul123"
        },
        "content": "** Cons: There is a need to modify more parts of the Logic component in the code base to accommodate a new command."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zioul123"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: When the Person is Searched/Matched"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zioul123"
        },
        "content": "* **Alternative 1 (current choice):** During the execution of `execute`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zioul123"
        },
        "content": "** Additional details: A `String personIdentifier` will be stored in the command, and upon `execute`, a person is first matched, then the edit is carried out."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zioul123"
        },
        "content": "** Pros: Execute takes in the model as an argument, making searching for a `Person` convenient."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zioul123"
        },
        "content": "** Cons: The same `_ByNameCommand` executed at a different time can have a different result since it does not have a unique `Person`, but an identifier to find a name."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "zioul123"
        },
        "content": "* **Alternative 2:** Before creation of the command"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "zioul123"
        },
        "content": "** Additional details: The command will have a `Person`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "zioul123"
        },
        "content": "** Pros: The command is deterministic, since it targets a unique `Person`."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "zioul123"
        },
        "content": "** Cons: Need to gain access to the model before the person can be found, which is not usually done by `AddressBookParser`; high level changes are necessary."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "zioul123"
        },
        "content": "// tag::editByName[]"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "zioul123"
        },
        "content": "\u003d\u003d\u003d\u003d Edit By Name feature"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "zioul123"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "zioul123"
        },
        "content": "The edit by name mechanism is facilitated by the new `Command`, `EditByNameCommand`."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "zioul123"
        },
        "content": "It extends `EditCommand` with a \"Person Identifier\" String that is used in place of the Index (of a displayed list) used in the normal `EditCommand`."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "zioul123"
        },
        "content": "Additionally, it implements/depends on the following operations:"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "zioul123"
        },
        "content": "* `EditByNameCommand#execute()` -- Executes the command encapsulated by this `EditByNameCommand`."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "zioul123"
        },
        "content": "Given below is an example usage scenario and how the Edit-By-Name mechanism behaves at each step."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "zioul123"
        },
        "content": "Step 1. The user launches the application and already has at least one client\u0027s contact in InsuRen."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "zioul123"
        },
        "content": "image::EditByNameCommand1StateDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "zioul123"
        },
        "content": "Step 2. The user executes `edit Alice p/91232233` to edit Alice\u0027s phone number. However, there are more than two people with a name that matches Alice, so InsuRen notifies the user."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "zioul123"
        },
        "content": "image::EditByNameCommand2StateDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "zioul123"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "zioul123"
        },
        "content": "If a command fails its execution due to multiple or no people matching the identifier, it will not edit any contact details."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "zioul123"
        },
        "content": "Step 3. The user uses a much more specific name identifier, `edit Alice Tay Ren Ying p/91232233`, but this does not match any contact, so InsuRen notifies the user."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "zioul123"
        },
        "content": "image::EditByNameCommand3StateDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "zioul123"
        },
        "content": "Step 4. The user uses a name identifier that uniquely identifies one person, `edit Alice Tay p/91232233`. The edit command is carried out, and the contact details of the identified person are changed accordingly."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "zioul123"
        },
        "content": "image::EditByNameCommand4StateDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "zioul123"
        },
        "content": "The following activity diagram summarizes what happens when a user executes the `EditByNameCommand`:"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "zioul123"
        },
        "content": "image::EditByNameCommandActivityDiagram.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "zioul123"
        },
        "content": "// end::editByName[]"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "zioul123"
        },
        "content": "// tag::deleteByName[]"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "zioul123"
        },
        "content": "\u003d\u003d\u003d\u003d Delete By Name feature"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "zioul123"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "zioul123"
        },
        "content": "The delete by name mechanism is facilitated by the new `Command`, `DeleteByNameCommand`."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "zioul123"
        },
        "content": "It extends `DeleteCommand` with a \"Person Identifier\" String that is used in place of the Index (of a displayed list) used in the normal `DeleteCommand`."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "zioul123"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "zioul123"
        },
        "content": "* `DeleteByNameCommand#execute()` -- Executes the command encapsulated by this `DeleteByNameCommand`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "zioul123"
        },
        "content": "Given below is an example usage scenario and how the Delete-By-Name mechanism behaves at each step."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "zioul123"
        },
        "content": "Step 1. The user launches the application and already has at least one client\u0027s contact in InsuRen."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "zioul123"
        },
        "content": "image::DeleteByNameCommand1StateDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "zioul123"
        },
        "content": "Step 2. The user executes `delete Alice` to delete Alice from InsuRen. However, there are more than two people with a name that matches Alice, so InsuRen notifies the user."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "zioul123"
        },
        "content": "image::DeleteByNameCommand2StateDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "zioul123"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "zioul123"
        },
        "content": "If a command fails its execution due to multiple or no people matching the identifier, it will not delete any contact details."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "zioul123"
        },
        "content": "Step 3. The user uses a much more specific name identifier, `delete Alice Tay Ren Ying`, but this does not match any contact, so InsuRen notifies the user."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "zioul123"
        },
        "content": "image::DeleteByNameCommand3StateDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "zioul123"
        },
        "content": "Step 4. The user uses a name identifier that uniquely identifies one person, `delete Alice Tay`. The delete command is carried out, Alice Tay is removed from InsuRen\u0027s contact list."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "zioul123"
        },
        "content": "image::DeleteByNameCommand4StateDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "zioul123"
        },
        "content": "The following activity diagram summarizes what happens when a user executes the `DeleteByNameCommand`:"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "zioul123"
        },
        "content": "image::DeleteByNameCommandActivityDiagram.png[width\u003d\"350\"]"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "zioul123"
        },
        "content": "// end::deleteByName[]"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "zioul123"
        },
        "content": "// end::byNameCommands[]"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "// tag::schedule[]"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "\u003d\u003d\u003d Schedule feature"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "chantca95"
        },
        "content": "The schedule mechanism is facilitated by the new `Command`, `Schedule`. It extends `AddressBook` with a list of meetings, stored internally as a `UniqueMeetingList`. It also allows meetings to be associated to InsuRen entries, since each `Person` can have up to one `Meeting`."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "The complete list of meetings, as well as the meetings scheduled on a single day, can subsequently be accessed using the `Meetings` command."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "Additionally, the `Schedule` Command implements the following operations:"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "* `ScheduleCommand#createScheduledPerson(Person personToSchedule, Meeting meeting)` - Returns a `Person` object that has a meeting scheduled according to `meeting`."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "* `ScheduleCommand#execute()` - Executes the command encapsulated by `ScheduleCommand`."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "Given below is an example usage scenario and how the Schedule mechanism behaves at each step."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "Step 1. The user launches the application and already has at least one client\u0027s contact in InsuRen."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "image::ScheduleCommand1StateDiagram.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "Step 2. The user executes `schedule 1 m/16/10/18 1800` to schedule a meeting with the person in the first index at 1800 hours on 16th October, 2018. However, there is already a meeting scheduled at this time, so it is flagged out to the user."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "No meetings are scheduled if there is a clash"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "image::ScheduleCommand2StateDiagram.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "Step 3. The user executes `schedule 1 m/32/10/18 1830` but since this is not a valid date, InsuRen flags it out to the user."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "image::ScheduleCommand3StateDiagram.png[width\u003d\"700\"]"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "Step 4. The user executes `schedule 1 m/16/10/18 1830`. The meeting is schedule and the person card is changed to reflect the same accordingly."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "image::ScheduleCommand4StateDiagram.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "The following activity diagram summarises what happens when a user executes the `ScheduleCommand`:"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "zioul123"
        },
        "content": "image::ScheduleCommandActivityDiagram.png[width\u003d\"350\"]"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "The following sequence diagram shows how the operation itself works."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "image::ScheduleSequenceDiagram.png[width\u003d\"700\"]"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Where meetings are stored"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "* **Alternative 1 (Current choice):** The meetings are stored in both the `Person` model and in the global meeting list `UniqueMeetingList`."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "** Pros: Easy to ensure no clashes occur between meetings."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "** Cons: Significant changes need to be made to the model to accomodate this."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "* **Alternative 2: ** The meetings are stored in only the `Person` model."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "** Pros: Minimal changes to the model required; prevents duplication of data."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "** Cons: Difficult to ensure uniqueness of meeting times."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "* **Alternative 3: ** The meetings are stored in only the `UniqueMeetingList`."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "** Pros: Prevents the duplication of data; easy to ensure no clashes."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "** Cons: Would need additional data structures to pair the meeting to the entry."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Date storage format"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "* **Alternative 1 (Current choice):** The date and time is stored as a 10-character string."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "** Pros: Allows the setting of a `none` value, and offers flexibility."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "** Cons: Does not utilize the Java API libraries for dates and times."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "* **Alternative 2:** The date and time is stored as a `DateAndTime` object."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "** Pros: Ability to use Java API functions for dates."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "** Cons: Less flexible as all dates entered must be valid."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "// end::schedule[]"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "chantca95"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "chantca95"
        },
        "content": "// tag::import[]"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "chantca95"
        },
        "content": "\u003d\u003d\u003d Import feature"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "chantca95"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "chantca95"
        },
        "content": "The import contacts feature is facilitated by the new `Command`, `import`. It adds a list of contacts from a properly formatted csv file"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "to `AddressBook`. The rules pertaining to accepted formatting of csv files can be found in the user guide. Additionally, it"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "chantca95"
        },
        "content": "implements the following operations:"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "chantca95"
        },
        "content": "* `getFileFromUserInput(String)` -- gets a File from the path indicated by a user\u0027s text input."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "chantca95"
        },
        "content": "* `getFileFromFileBrowser()` -- gets a File via a file browser."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "chantca95"
        },
        "content": "* `parseFile(File) and parseLinesFromFile(BufferedReader)` -- parses the file from either of the above two methods. Prepares an"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "chantca95"
        },
        "content": "arrayList of Persons to add to the contact list."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "chantca95"
        },
        "content": "Given below is an example usage scenario and how the import mechanism behaves at each step."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "chantca95"
        },
        "content": "Step 1. The user launches an application and there is either a list of existing contacts or the list is empty."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "chantca95"
        },
        "content": "Step 2. The user executes import command (i for shorthand). If the user ONLY types import, a file browser will pop up."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "chantca95"
        },
        "content": "If the user includes a file path, InsuRen will attempt to retrieve the file from the given path."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "chantca95"
        },
        "content": "image::import.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "chantca95"
        },
        "content": "image::import_user_input.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "chantca95"
        },
        "content": "Step 3. If no such file exists, InsuRen will report an error."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "chantca95"
        },
        "content": "image::import_user_input_fail.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "chantca95"
        },
        "content": "Step 4. If the file is successfully loaded (regardless of method), InsuRen checks for duplicates and incomplete contacts."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "chantca95"
        },
        "content": "Insuren compiles a list of contacts and runs the `add` Command on all of them, adding them to the list of existing contacts."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "chantca95"
        },
        "content": "Step 5. A relevant message will be displayed, depending on whether there were successful imports, duplicate contacts etc."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "chantca95"
        },
        "content": "image::import_success.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "chantca95"
        },
        "content": "image::import_duplicates.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "chantca95"
        },
        "content": "The following activity diagram summarizes what happens when a user executes the `Import` Command:"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "chantca95"
        },
        "content": "image::importActivityDiagram.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "chantca95"
        },
        "content": "The following sequence diagram shows what happens when a user executes the `Import` Command (user input mode only,"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "chantca95"
        },
        "content": "file browser mode omitted):"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "chantca95"
        },
        "content": "image::ImportSequenceDiagram2.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "chantca95"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "chantca95"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How import executes"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "chantca95"
        },
        "content": "* **Alternative 1 (current choice):** Build from `Add` command:"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "chantca95"
        },
        "content": "Import makes use of the `hasPerson` method of `Model` to check for duplicate contacts in the csv file being imported."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "chantca95"
        },
        "content": "It also manually checks if any entry in the csv file is incomplete in that it has no name value."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "chantca95"
        },
        "content": "Lastly, the import command also utilizes the format checking methods in `Name`, `Email`, `Address` etc. to catch any"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "chantca95"
        },
        "content": "entries with invalid formats"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "chantca95"
        },
        "content": "** Pros: Easy to implement, any future modifications to Add or any changes to the validity of `Name`, `Email` etc will"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "chantca95"
        },
        "content": "not cause import to crash."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "chantca95"
        },
        "content": "** Cons: Higher coupling."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "chantca95"
        },
        "content": "// end::import[]"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "chantca95"
        },
        "content": "// tag::export[]"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "chantca95"
        },
        "content": "\u003d\u003d\u003d Export feature"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "chantca95"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "chantca95"
        },
        "content": "The export contacts feature is facilitated by the new `Command`, `export`. It takes the current list of contacts in InsuRen"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "chantca95"
        },
        "content": "and exports it as a csv file, whose file name is given by the user and MUST end with .csv. The exported contact list will be"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "chantca95"
        },
        "content": "saved in the root directory of the project. `export` implements the following operations:"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "chantca95"
        },
        "content": "* `parse(String)` - parses the user\u0027s given file name String and checks if it is valid."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "chantca95"
        },
        "content": "* `populateFile(PrintWriter, Model)` - populates the (already initialized) file with data from the current Model."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "chantca95"
        },
        "content": "* `insertPersonIntoCsv(Person, PrintWriter) and cleanEntry(String)` - these two methods add contacts to the csv in the same"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "chantca95"
        },
        "content": "order as they are displayed in InsuRen. Fields are cleaned by removing commas and brackets before being inserted in to the csv."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "chantca95"
        },
        "content": "Given below is an example usage scenario and how the export mechanism behaves at each step."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "chantca95"
        },
        "content": "Step 1. The user launches an application and there is either a list of existing contacts or the list is empty."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "chantca95"
        },
        "content": "Step 2. The user executes export command (x for shorthand), followed by FILE_NAME. If no file name is given or the file name"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "chantca95"
        },
        "content": "does not end with .csv, InsuRen throws an error message."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "chantca95"
        },
        "content": "Step 3. InsuRen fetches the current contact list, creates a new .csv file and copies all contacts into it."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "chantca95"
        },
        "content": "The following activity diagram summarizes what happens when a user executes the `Export` Command:"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "chantca95"
        },
        "content": "image::ExportActivityDiagram.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "chantca95"
        },
        "content": "The following sequence diagram shows what happens when a user executes the `Export` Command:"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "chantca95"
        },
        "content": "image::ExportSequenceDiagram2.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "chantca95"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "chantca95"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How export executes"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "chantca95"
        },
        "content": "* **Alternative 1 (current choice):** Read contacts from a ReadOnlyAddressBook:"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "chantca95"
        },
        "content": "Export makes use of model.getAddressBook() and the getPersonList method within."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "chantca95"
        },
        "content": "** Pros: Easy to implement. Since we are only dealing with a ReadOnlyAddressBook, the state of InsuRen will not be altered."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "chantca95"
        },
        "content": "** Cons: Only able to capture snapshots of the contact list. Not dynamically updated."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "chantca95"
        },
        "content": "// end::export[]"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "// tag::addpicture[]"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "\u003d\u003d\u003d Add Picture feature"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "The picture mechanism is facilitated by the new `PictureCommand`."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "It extends `Command` with an execution to set a picture, stored internally in `Person` as `picture`."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "Given below is an example usage scenario and how the picture mechanism behaves at each step."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "Step 1. The user launches the application and already has at least one client\u0027s contact in InsuRen."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "image::PictureCommand1StateDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "Step 2. The user executes `pic 4 l/images/invalidpath.jpg` to add a picture for David. However, the file `invalidpath.jpg` does not exist."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "`Picture#isValidPicture()` validates the given file path and InsuRen informs the user that the path given is invalid."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "image::PictureCommand2StateDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "If a command fails its execution, it will not pass the validation check, `Picture#isValidPicture()`, so InsuRen will not update the user\u0027s picture and instead return an error message."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "Step 3. The user now decides to execute `pic 4 l/images/david.jpg`, a valid image located in his drive, to add a picture for David."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "The `pic` command calls `Model#getFilteredPersonList()` to retrieve the list of contacts and filters `index` 4."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "The `PictureCommandParser` retrieves the input from the user and validates it."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "`ParserUtil#parseFileLocation()` is called and the picture path is checked. If the path is valid, it then calls `Picture#setPicture()` to update the picture for the contact. Finally, `Model#commitAddressBook()` is called, causing the modified state of the address book after the `pic 4 l/images/david.jpg` command executes to be saved."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "image::PictureCommand3StateDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "The following activity diagram summarizes what happens when a user executes the `PictureCommand`:"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "image::PictureCommandActivityDiagram.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "The following sequence diagram shows what happens when a user executes the `PictureCommand`:"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "image::PictureCommandSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How picture is stored"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "* **Alternative 1 (current choice):** `Person` has a picture field."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "** Pros: `Picture` can have it\u0027s own `Picture#isValidPicture()` method to validate the input. It is consistent with the other fields within `Person`."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "** Cons: More memory is used as there is a need to store an object. A new `Picture` class has to be made and implemented."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "* **Alternative 2:** `Person` will store a `Path` or `String` instead."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "** Pros: Will use less memory (do not have to implement a new class and store an object)."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "** Cons: All checks have to be done within the `execute` method. Might overlook certain details and cause bugs."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Type of picture"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "* **Alternative 1 (current choice):** Picture can be a `.jpg` or `.png` file."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "** Pros: `.jpg` and `.png` are common file formats that the user is used to."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "** Cons: Not flexible in what image files are accepted."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "* **Alternative 2:** In addition to alternative 1, the picture can also be a valid `URL` containing an image."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "** Pros: More flexible. User does not have to download the image file onto his local disk in order to use it. Can retrieve pictures of his contacts online and use it directly."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "** Cons: Additional checks have to be done (i.e. check if the `URL` is valid, check if the `URL` is an image file, what happens if the `URL` or server is broken?)"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Path validation"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "* **Alternative 1 (current choice):** File location input from user is checked against `Files#exists()` and whether it ends with a `.png` or `.jpg`."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "** Pros: More secure. `Files#exists()` checks whether the file is on the disk while the other checks for the file extension."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "** Cons: Will have to check twice."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "* **Alternative 2:** Just do `Files#exists()`."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "** Pros: Straightforward and simple."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "** Cons: Less secure, might result in an error if the file is not checked properly."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "// end::addpicture[]"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "// tag::tagcommand[]"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "\u003d\u003d\u003d Tag feature"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "Each contact in Insuren can have any number of tags. The `tag` command allows the user to easily find contacts by tags."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "The user can also easily edit or delete tags using the tag command, allowing for better management of tags in Insuren."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "Given below is an example usage scenario and how the tag command behaves at each step."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "Step 1. The user launches the application and already has a few tagged contacts in InsuRen."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "image::TagCommand1StateDiagram.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "Step 2. The user executes `tag Important` to retrieve all contacts tagged with `Important`. Tags are **case-sensitive**."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "image::TagCommand2StateDiagram.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "Step 3. The user executes `tag Family Colleague` to retrieve all contacts tagged with `Family` or `Colleague`."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "image::TagCommand3StateDiagram.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "Step 4. If the user wants to change all instances of the `Colleague` tag to `Work`, the user can input `tag edit"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "Colleague Work`. `edit` is **not** case-sensitive."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "image::TagCommand4StateDiagram.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "Step 5. If the user would like to delete the `close` tag, the user simply executes `tag close delete`."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "`delete` is **not** case-sensitive."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "image::TagCommand5StateDiagram.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "Step 6. If the user would like to delete the `Family` and `Colleague` tags together, the user simply executes `tag"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "Family Colleague delete`. Both tags will be deleted."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "image::TagCommand6StateDiagram.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "All tag commands can be undone or redone with `undo` or `redo` respectively. +"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "The following activity diagram summarizes what happens when a user executes the `PictureCommand`:"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "image::TagCommandActivityDiagram.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "The following sequence diagram shows what happens when a user executes the `TagCommand`:"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "image::TagCommandSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How tag command works"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "* **Alternative 1 (current choice):** Search through the address book\u0027s list of persons to find all persons with any matching tag."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "** Pros: Consistent with `find` command, easy to implement."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "** Cons: Performance can be slow especially if InsuRen has many contacts as InsuRen will look through every person."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "* **Alternative 2:** A hashmap is used with the key values being each unique tag and the values being a list of persons associated with each tag."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "** Pros: Will have faster lookup, O(1) access time to get the list of persons associated with a tag."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "** Cons: Will use more memory storing a separate data structure. This separate data structure also has to be updated with the right list of persons"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "every time a person\u0027s details are edited or a person is deleted. Programming such a data structure would require significantly more effort."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "// end::tagcommand[]"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "Due to the Singapore Personal Data Protection Act (PDPA), any disclosure of the user\u0027s personal information is considered to have severe implications."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "Thus, all data that are being stored in `Storage` should be encrypted using a secure encryption scheme with a secret key."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "When the user opens InsuRen, he should be prompted to login before he is able to access the secure data."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "// tag::addpictureurl[]"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "\u003d\u003d\u003d [Proposed] Add Picture from URL"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "The current implementation of the `pic` command in v1.4 only allows users to upload images that are available on their local drives."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "Giving users the option to upload images that is available on the internet would be much more convenient to the user."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "Users can simply go to their client\u0027s Facebook or other social media accounts to retrieve the image URL."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "// end::addpictureurl[]"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "chantca95"
        },
        "content": "A project often depends on third-party libraries. For example, InsuRen depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "* Insurance Agents"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "* needs to manage many meetings with clients"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "*Value proposition*:"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": "* Specific to Insurance Agents"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "* Manage contacts faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |New User |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |Insurance Agent getting new customers |Add clients (including incomplete ones) |Be able to add clients who did not fill their forms completely"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |Insurance Agent |delete a client\u0027s details |remove clients that I no longer need"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |Insurance Agent |find a client by name |locate details of clients without having to go through the entire list"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |Insurance Agent |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "|`*` |Insurance Agent with many clients |sort clients by name |locate a client easily"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |Insurance Agent |Maintain updated contacts to my clients |Maintain my network"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |Insurance Agent with many meetings |See when my meetings with clients are |Set aside time to meet them"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |Insurance Agent, concerned about customer’s plan being cancelled |Be notified when customer\u0027s deadlines for payments are near |Notify my clients of impending payments on time"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |Experienced Insurance Agent |Mass import contact details (via excel) |Load my existing contacts without keying them manually"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |Insurance Agent |Export email addresses |Email the contacts"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |Insurance Agent who needs to maintain contact |Add a picture for my contacts |To identify them by picture and name"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "|`* *` |Insurance Agent who needs to maintain contact |Display frequently contacted people |Contact them fast"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |Insurance Agent |Remove accidental duplicates |Keep my contact book neat"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "|`* *` |Insurance Agent who has different networks |View tagged contacts |Quickly view related contacts"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "|`* *` |Insurance Agent who has tagged contacts |Edit tags |Keep my contact book updated"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "|`* *` |Insurance Agent who has tagged contacts |Delete tags |Keep my contact book updated"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "(For all use cases below, the *System* is the `InsuRen` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "zioul123"
        },
        "content": "// tag::addUseCase[]"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use Case: Add Clients"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "1. User requests to add client, specifying the compulsory field (name) and non-compulsory fields (address, email, phone number, and tags)."
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "2. InsuRen stores the new client, and displays a confirmation message."
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "* 1a. The user does not include the person’s name."
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "** 1a1. InsuRen shows an error message."
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "zioul123"
        },
        "content": "// end::addUseCase[]"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Delete person"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "2.  InsuRen shows a list of persons"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "3.  User requests to delete a specific person in the list"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "4.  InsuRen deletes the person"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "** 3a1. InsuRen shows an error message."
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use Case: See Meeting Timings with Clients"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "1. User inputs the customers’ meeting times in their address book entries."
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "2. InsuRen stores the meeting times, and displays them in the person card of the client."
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "3. User searches for meetings with clients by time, and InsuRen returns the client details if there is a meeting scheduled at that time."
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. There are no meetings scheduled for the time searched."
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "** 2a1. InsuRen returns the next meeting after the specified time."
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": "* 2b. There are no meetings scheduled for any time after the searched time."
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "** 2b1. InsuRen states that there are no meetings scheduled"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use Case: Add meeting field to an entry"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": "1. User adds meeting time with specific client."
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "2. InsuRen will add meeting field to specified contact. Meeting will be displayed the next time user executes ‘list’."
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "* 1a. User inputs invalid contact/meeting time."
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "** 1a1. InsuRen prints error message, prompting user to re-enter a valid ‘schedule’ command."
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use Case: Be notified of expiring plans"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": "1. User inputs an expiry date field for each client’s insurance plan."
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "2. InsuRen alerts the user of clients with expiring insurance plans every time it is initialized."
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. There are no plans expiring soon."
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "** 2a1. InsuRen notifies the user that there are no imminent expiries."
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "chantca95"
        },
        "content": "// tag::import[]"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "chantca95"
        },
        "content": "\u003d\u003d\u003d Use Case: Mass import contacts into InsuRen"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": "1. User requests to add import contacts from a file in a user-given directory."
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "2. InsuRen loads new contacts from import file, appending the new contacts to the end of the existing contact list."
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "chantca95"
        },
        "content": "* 1a. File does not exist at directory path or invalid file type (must be .csv or .txt)"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "** 1a1. InsuRen shows an error message."
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "chantca95"
        },
        "content": "// end::import[]"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "chantca95"
        },
        "content": "// tag::export[]"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "chantca95"
        },
        "content": "\u003d\u003d\u003d Use Case: Export contact list from InsuRen"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "chantca95"
        },
        "content": "1. User requests to export current state of InsuRen to a csv file whose name is given by the user."
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "chantca95"
        },
        "content": "2. InsuRen compiles all contacts into a csv (with the given name), saves it in the root project/application directory."
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "chantca95"
        },
        "content": "* 1a. No file name given, or given file name does not contain .csv suffix"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "** 1a1. InsuRen shows an error message."
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "chantca95"
        },
        "content": "// end::export[]"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "zioul123"
        },
        "content": "// tag::editUseCase[]"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use Case: Edit Clients by Name"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": "1. User requests to edit client, specifying the name of the client and any fields to be modified."
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "2. InsuRen edits the client’s respective fields, and displays a confirmation message."
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": "* 1a. The user does not include the person’s name."
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "** 1a1. InsuRen shows an error message."
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "zioul123"
        },
        "content": "*\t1b. The user does not include any field to edit."
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "zioul123"
        },
        "content": "** 1b1. InsuRen shows an error message."
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "zioul123"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": "*\t1c. There are multiple clients with the same name."
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "zioul123"
        },
        "content": "** 1c1. InsuRen shows an error message, prompting the user to either use a more specific name, or edit by index."
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "zioul123"
        },
        "content": "+"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "zioul123"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "zioul123"
        },
        "content": "// end::editUseCase[]"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "zioul123"
        },
        "content": "// tag::deleteUseCase[]"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "zioul123"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "zioul123"
        },
        "content": "\u003d\u003d\u003d Use Case: Delete Clients by Name"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "zioul123"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "zioul123"
        },
        "content": "1. User requests to delete a client, specifying the name of the client."
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "zioul123"
        },
        "content": "2. InsuRen deletes the specified client from storage, and displays a confirmation message."
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "zioul123"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "zioul123"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "zioul123"
        },
        "content": "* 1a. The user does not include the person’s name."
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "zioul123"
        },
        "content": "+"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "zioul123"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "zioul123"
        },
        "content": "** 1a1. InsuRen shows an error message."
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "zioul123"
        },
        "content": "+"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "zioul123"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "zioul123"
        },
        "content": "* 1b. There are multiple clients with the same name."
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "zioul123"
        },
        "content": "+"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "zioul123"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "zioul123"
        },
        "content": "** 1b1. InsuRen shows an error message, prompting the user to either use a more specific name, or delete by index."
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "zioul123"
        },
        "content": "+"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "zioul123"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "zioul123"
        },
        "content": "// end::deleteUseCase[]"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "// tag::picUseCase[]"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use Case: Upload Picture of Client"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": "1. User requests upload picture of client."
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "2. InsuRen requests for the client’s ID."
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "3. User specifies the client’s ID."
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "4. InsuRen requests for the file location."
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": "5. User specifies the file location."
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "6. InsuRen uploads the file and tags it to the client’s profile."
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "*\t3a. InsuRen detects an error in the entered data."
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "** 3a1. InsuRen requests for the correct data."
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes from step 3."
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "* 5a. InsuRen detects an error in the entered data."
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "** 5a1. InsuRen requests for the correct data."
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes from step 5."
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "// end::picUseCase[]"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "// tag::tagUseCase[]"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "\u003d\u003d\u003d Use Case: View tagged contacts"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "1. User requests all contacts with any number of user-specified tags."
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "2. InsuRen lists all contacts that contain any one of the user-specified tags."
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "* 1a. User enters tags that are not present in any contacts in Insuren."
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "** 1a1. InsuRen shows an empty contact list."
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "\u003d\u003d\u003d Use Case: Edit tags"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "1. User requests to edit a tag, specifying an existing tag and a new tag name."
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "2. InsuRen updates all contacts with the existing tag, changing the tag name to the new user-specified tag name."
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "3. InsuRen lists all contacts whose tags have been updated."
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "* 1a. User enters tags that are not present in any contacts in Insuren."
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "** 1a1. InsuRen shows an empty contact list, stating that 0 contacts have their tags changed."
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "* 1b. User does not enter any tag to edit."
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "+"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "** 1b1. InsuRen shows an error message."
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "+"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "* 1c. User does not enter a new tag name."
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "+"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "** 1c1. InsuRen shows an error message."
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "+"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "\u003d\u003d\u003d Use Case: Delete tags"
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "1. User requests to delete a tag, specifying any number of tags he or she wants to delete."
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "2. InsuRen finds all instances of any of the user-specified tags and deletes them from each contact."
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "3. InsuRen lists all contacts whose tags have been deleted."
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "* 1a. User enters tags that are not present in any contacts in Insuren."
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "** 1a1. InsuRen shows an empty contact list, stating that 0 contacts have their tags deleted."
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "* 1b. User does not enter any tag to delete."
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "** 1b1. InsuRen shows an empty contact list, stating that 0 contacts have their tags deleted."
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "// end::tagUseCase[]"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "// tag::nfr[]"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ".  InsuRen should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ".  InsuRen should be able to hold up to 1000 clients\u0027 contact without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ".  InsuRen should process a user command in 1 second or less, without any noticeable delay."
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ".  InsuRen should display a clear and concise error message to provide feedback to the user when an invalid input is received."
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ".  InsuRen should be backward compatible with data produced by earlier versions of Insuren."
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ".  InsuRen should be open-source."
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ".  InsuRen is offered as a free product."
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ".  All data entries are backed-up regularly."
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ".  All data entries are stored in a xml file."
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ".  A user should be able to learn and use the product without any form of training."
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ".  The UI should be responsive to changes."
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ".  The product should be self-explanatory and intuitive such that an insurance agent is able to adapt to it within the first 10 minutes of using the product for the first time."
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ".  When the program crashes, all data up till the point of crash will still be available upon relaunch of the program."
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ".  The system should work by running on the JAR file without any installation."
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ".  The system should work even if the user does not have any internet connection."
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ".  The JAR file should be small in size (\u003c 50 MB)."
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "// end::nfr[]"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "   Expected: Shows the GUI with a set of sample clients. The window size may not be optimum."
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "zioul123"
        },
        "content": "// tag::testingAdd[]"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "zioul123"
        },
        "content": "\u003d\u003d\u003d Adding a person"
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "zioul123"
        },
        "content": ". Adding a person to InsuRen"
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "zioul123"
        },
        "content": ".. Prerequisites: No `Person` in the list is identifiable as identical to those that are to be added during this test."
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "zioul123"
        },
        "content": "... Identifiable as identical means that:"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "zioul123"
        },
        "content": ".... `name` is the same *and*"
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "zioul123"
        },
        "content": ".... `phone` *or* `email` is the same"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "zioul123"
        },
        "content": ".. Test case: `add n/Anne Loh p/11114444 e/abc@email.com a/44th Street t/Friend` +"
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "zioul123"
        },
        "content": "   Expected: Anne Loh is added. Details of the client are shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "zioul123"
        },
        "content": ".. Test case: `add n/Ben Chua t/Friend` +"
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "zioul123"
        },
        "content": "   Expected: Ben Chua is added. Details of the client are shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "zioul123"
        },
        "content": ".. Test case: `add n/Anne Loh p/22223333 e/def@email.com` +"
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "zioul123"
        },
        "content": "   Expected: Anne Loh is added. Details of the client are shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "zioul123"
        },
        "content": ".. Test case: `add n/Anne Loh p/22223333` +"
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "zioul123"
        },
        "content": "   Expected: Nothing is updated. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "zioul123"
        },
        "content": ".. Test case: `add n/Anne Loh p/22223333 a/abc street` +"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "zioul123"
        },
        "content": "   Expected: Nothing is updated. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "zioul123"
        },
        "content": ".. Test case: `add n/Anne Loh e/abc@email.com a/abc street` +"
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "zioul123"
        },
        "content": "   Expected: Nothing is updated. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "zioul123"
        },
        "content": ".. Test case: `add n/Anne Loh` +"
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "zioul123"
        },
        "content": "   Expected: Anne Loh is added. Details of the client are shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "zioul123"
        },
        "content": "// end::testingAdd[]"
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "zioul123"
        },
        "content": "// tag::testingEdit[]"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "zioul123"
        },
        "content": "\u003d\u003d\u003d Editing a person"
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "zioul123"
        },
        "content": ". Editing a person"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "zioul123"
        },
        "content": ".. Editing by Index"
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "zioul123"
        },
        "content": "... Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "zioul123"
        },
        "content": "... Test case: `edit 1 n/Abcde t/` +"
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    Expected: First client is renamed \"Abcde\" and tags are deleted. Details of the edited client shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "zioul123"
        },
        "content": "... Test case: `edit 0 p/18854835 t/friend t/jailed` +"
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    Expected: No person is edited. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "zioul123"
        },
        "content": "... Other incorrect edit commands to try: `edit` (no arguments), `edit x t/friend` (where x is larger than the list size or negative), `edit 3` (where no fields are provided) +"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    Expected: Similar to previous."
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "zioul123"
        },
        "content": ".. Editing by Name"
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "zioul123"
        },
        "content": "... Prerequisites: Make sure that nobody in InsuRen has the name/part of their name as Alice, Lee, Lim, Chua or Bob, then add people to the list with the names `Alice Lee`, `Alice Chua`, `Alice Lim` and `Bob`."
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "zioul123"
        },
        "content": "... Test case: `edit Bob e/abc@email.com`"
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    Expected: Bob\u0027s email is changed to abc@email.com. Details of the edited client shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "zioul123"
        },
        "content": "... Test case: `edit Alice Chua n/Bobby Chua`"
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    Expected: Alice Chua is renamed to Bobby Chua. Details of the edited client shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "zioul123"
        },
        "content": "... Test case: `edit Alice p/883838333` +"
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    Expected: No person is edited. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "zioul123"
        },
        "content": "... Other incorrect edit commands to try: `edit x n/abc` (where x matches nobody in the list), `edit Alice Lim` (where no fields are provided) +"
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    Expected: Similar to previous."
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "zioul123"
        },
        "content": "// end::testingEdit[]"
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "zioul123"
        },
        "content": "// tag::testingDelete[]"
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "zioul123"
        },
        "content": ". Deleting a person"
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "zioul123"
        },
        "content": ".. Deleting by Index"
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "zioul123"
        },
        "content": "... Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "zioul123"
        },
        "content": "... Test case: `delete 1` +"
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    Expected: First client is deleted from the list. Details of the deleted client shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "zioul123"
        },
        "content": "... Test case: `delete 0` +"
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "-"
        },
        "content": "    Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "zioul123"
        },
        "content": "... Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size or negative) +"
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "-"
        },
        "content": "    Expected: Similar to previous."
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "zioul123"
        },
        "content": ".. Deleting by Name"
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "zioul123"
        },
        "content": "... Prerequisites: Make sure that nobody in InsuRen has the name/part of their name as Alice, Lee, Lim, Chua or Bob, then add people to the list with the names `Alice Lee`, `Alice Chua`, `Alice Lim` and `Bob`."
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "zioul123"
        },
        "content": "... Test case: `delete Bob`"
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    Expected: Bob is deleted. Details of the deleted client shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "zioul123"
        },
        "content": "... Test case: `delete Alice Chua`"
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    Expected: Alice Chua is deleted. Details of the deleted client shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "zioul123"
        },
        "content": "... Test case: `delete Alice` +"
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "zioul123"
        },
        "content": "... Other incorrect delete commands to try: `delete x` (where x matches nobody in the list) +"
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    Expected: Similar to previous."
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "zioul123"
        },
        "content": "// end::testingDelete[]"
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ". Dealing with missing image files"
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ".. Prerequisites: A person has an updated picture aside from the default picture."
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ".. Assumption: `/Users/John/Downloads/Insuren/images/petertan.jpg` is the client\u0027s picture."
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ".. Test case: rename, delete, or move the image file `/Users/John/Downloads/Insuren/images/petertan.jpg` such that there is no `petertan.jpg` file in the `images` folder. +"
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "   Expected: The default placeholder picture will be used."
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "chantca95"
        },
        "content": "// tag::manualTestingImport[]"
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "chantca95"
        },
        "content": "\u003d\u003d\u003d Importing contacts"
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "chantca95"
        },
        "content": ". Importing a fresh list of contacts into an empty InsuRen."
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "chantca95"
        },
        "content": ".. Prerequisites: clear all persons using the `clear` command. No persons in the list."
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "chantca95"
        },
        "content": "Also ensure that there is a populated csv file within the application\u0027s ROOT directory. An example of an acceptable csv is shown in the user guide. Let\u0027s call this file asdf.csv"
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "chantca95"
        },
        "content": ".. Test case: `import l/asdf.csv` +"
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "chantca95"
        },
        "content": "   Expected: InsuRen will be populated with the contacts in asdf.csv."
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "chantca95"
        },
        "content": ". Importing a contact into InsuRen when such contacts are already in InsuRen."
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "chantca95"
        },
        "content": ".. Prerequisites: Take the starting point of this test to be the end of the previous - ie. after you have"
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "chantca95"
        },
        "content": "successfully imported contacts from asdf.csv."
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "chantca95"
        },
        "content": ".. Test case: `import` +"
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "chantca95"
        },
        "content": "   Expected: A file browser will pop up. Navigate to and select asdf.csv one more time. Error messages should be"
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "chantca95"
        },
        "content": "   displayed, stating that no contacts have been imported as InsuRen has found duplicate contacts."
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "chantca95"
        },
        "content": ". Importing invalid contacts into InsuRen."
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "chantca95"
        },
        "content": ".. Prerequisites: Clear InsuRen like in (1) above, then deliberately corrupt some of the entries in asdf.csv by removing names or giving invalid phone numbers, meetings etc."
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "chantca95"
        },
        "content": ".. Test case: `import l/asdf.csv` +"
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "chantca95"
        },
        "content": "   Expected: Valid contacts will be imported into InsuRen. Additionally, an error will be displayed, stating that InsuRen has found invalid contacts."
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "chantca95"
        },
        "content": "// end::manualTestingImport[]"
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "chantca95"
        },
        "content": "// tag::manualTestingExport[]"
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "chantca95"
        },
        "content": "\u003d\u003d\u003d Exporting contacts"
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "chantca95"
        },
        "content": ". Exporting InsuRen\u0027s current contacts into a new csv file."
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "chantca95"
        },
        "content": ".. Prerequisites: Ensure that InsuRen has at least 1 contact."
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "chantca95"
        },
        "content": ".. Test case: `export contacts.csv` +"
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "chantca95"
        },
        "content": "   Expected: A new contacts.csv file will appear in the ROOT directory, populated with InsuRen\u0027s current contacts."
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "chantca95"
        },
        "content": ". Exporting into an invalid file."
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "chantca95"
        },
        "content": ".. Prerequisites: Ensure that InsuRen has at least 1 contact."
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "chantca95"
        },
        "content": ".. Test case: `export asdf` +"
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "chantca95"
        },
        "content": "   Expected: Error message will be thrown by InsuRen, stating that an incorrect export file name has been provided."
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "chantca95"
        },
        "content": "// end::manualTestingExport[]"
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "// tag::testingpicture[]"
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "\u003d\u003d\u003d Adding picture"
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ". Adding a picture to a person while all persons are listed"
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list. `/Users/John/Downloads/Insuren/images/petertan.jpg` is a valid file path."
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ".. Test case: `pic 1 l//Users/John/Downloads/Insuren/images/petertan.jpg` +"
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "   Expected: First client\u0027s picture is updated. Details of the updated client shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ".. Test case: `pic 0 l//Users/John/Downloads/Insuren/images/petertan.jpg` +"
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "   Expected: Nothing is updated. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ".. Test case: `pic 1 l//Users/John/Downloads/Insuren/images/invalid_image_path.jpg` +"
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "   Expected: Nothing is updated. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ".. Test case: `pic 1 l//Users/John/Downloads/Insuren/images/invalid_image_type.mp3` +"
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "   Expected: Nothing is updated. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ".. Other incorrect picture commands to try: `pic`, `pic x` (where x is larger than the list size) +"
      },
      {
        "lineNumber": 1544,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1545,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "// end::testingpicture[]"
      },
      {
        "lineNumber": 1546,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 1547,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "// tag::testingTag[]"
      },
      {
        "lineNumber": 1548,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "\u003d\u003d\u003d Viewing tags"
      },
      {
        "lineNumber": 1549,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 1550,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ". Viewing all user-specified tags"
      },
      {
        "lineNumber": 1551,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 1552,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ".. Prerequisites: InsuRen should have these contacts initially:"
      },
      {
        "lineNumber": 1553,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "* `n/Anne Loh t/Friend`"
      },
      {
        "lineNumber": 1554,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "* `n/Ben Chua t/Friend`"
      },
      {
        "lineNumber": 1555,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "* `n/Charlie Dong t/Friend t/Buddy`"
      },
      {
        "lineNumber": 1556,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "* `n/David Ee t/Buddy`"
      },
      {
        "lineNumber": 1557,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "* `n/Euler Foo t/Buddy t/Close`"
      },
      {
        "lineNumber": 1558,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "* `n/Fiona Goh`"
      },
      {
        "lineNumber": 1559,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 1560,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ".. Test case: `tag Friend` +"
      },
      {
        "lineNumber": 1561,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "   Expected: `Anne Loh`, `Ben Chua` and `Charlie Dong` contacts are displayed."
      },
      {
        "lineNumber": 1562,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ".. Test case: `tag Friend Buddy` +"
      },
      {
        "lineNumber": 1563,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "   Expected: `Anne Loh`, `Ben Chua`, `Charlie Dong`, `David Ee` and `Euler Foo` contacts are displayed."
      },
      {
        "lineNumber": 1564,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ".. Test case: `tag Friend Close` +"
      },
      {
        "lineNumber": 1565,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "   Expected: `Anne Loh`, `Ben Chua`, `Charlie Dong` and `Euler Foo` contacts are displayed."
      },
      {
        "lineNumber": 1566,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ".. Test case: `tag friend Close` +"
      },
      {
        "lineNumber": 1567,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "   Expected: `Euler Foo` contact is displayed."
      },
      {
        "lineNumber": 1568,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ".. Test case: `tag Friend buddy close` +"
      },
      {
        "lineNumber": 1569,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "   Expected: `Anne Loh`, `Ben Chua` and `Charlie Dong` contacts are displayed."
      },
      {
        "lineNumber": 1570,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ".. Test case: `tag friend buddy close` +"
      },
      {
        "lineNumber": 1571,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "   Expected: No contacts are displayed."
      },
      {
        "lineNumber": 1572,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ".. Test case: `tag` +"
      },
      {
        "lineNumber": 1573,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "   Expected: Error details shown in the status message."
      },
      {
        "lineNumber": 1574,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 1575,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "\u003d\u003d\u003d Editing tags"
      },
      {
        "lineNumber": 1576,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 1577,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ". Editing a user-specified tag"
      },
      {
        "lineNumber": 1578,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 1579,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ".. Prerequisites: InsuRen should have these contacts initially:"
      },
      {
        "lineNumber": 1580,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "* `n/Anne Loh t/Friend`"
      },
      {
        "lineNumber": 1581,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "* `n/Ben Chua t/Friend`"
      },
      {
        "lineNumber": 1582,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "* `n/Charlie Dong t/Friend t/Buddy`"
      },
      {
        "lineNumber": 1583,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "* `n/David Ee t/Buddy`"
      },
      {
        "lineNumber": 1584,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "* `n/Euler Foo t/Buddy t/Close`"
      },
      {
        "lineNumber": 1585,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "* `n/Fiona Goh`"
      },
      {
        "lineNumber": 1586,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 1587,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ".. Test case: `tag edit Friend friend` +"
      },
      {
        "lineNumber": 1588,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "   Expected: `Anne Loh`, `Ben Chua` and `Charlie Dong` contacts are displayed. Their tags are updated to `friend`."
      },
      {
        "lineNumber": 1589,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ".. Test case: `tag edit Close bestie` +"
      },
      {
        "lineNumber": 1590,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "   Expected: `Euler Foo` contact is displayed. His tags are now `t/Buddy t/bestie`."
      },
      {
        "lineNumber": 1591,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ".. Test case: `tag edit test testing` +"
      },
      {
        "lineNumber": 1592,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "   Expected: No contacts are displayed, no tags are edited."
      },
      {
        "lineNumber": 1593,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ".. Test case: `tag edit test` +"
      },
      {
        "lineNumber": 1594,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "   Expected: Nothing is updated. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1595,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ".. Test case: `tag edit` +"
      },
      {
        "lineNumber": 1596,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "   Expected: Nothing is updated. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1597,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 1598,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "\u003d\u003d\u003d Deleting tags"
      },
      {
        "lineNumber": 1599,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 1600,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ". Deleting all user-specified tags"
      },
      {
        "lineNumber": 1601,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 1602,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ".. Prerequisites: InsuRen should have these contacts initially:"
      },
      {
        "lineNumber": 1603,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "* `n/Anne Loh t/Friend`"
      },
      {
        "lineNumber": 1604,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "* `n/Ben Chua t/Friend`"
      },
      {
        "lineNumber": 1605,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "* `n/Charlie Dong t/Friend t/Buddy`"
      },
      {
        "lineNumber": 1606,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "* `n/David Ee t/Buddy`"
      },
      {
        "lineNumber": 1607,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "* `n/Euler Foo t/Buddy t/Close t/Family`"
      },
      {
        "lineNumber": 1608,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "* `n/Fiona Goh t/Family`"
      },
      {
        "lineNumber": 1609,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "* `n/George Ho t/Family t/Dad`"
      },
      {
        "lineNumber": 1610,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 1611,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ".. Test case: `tag delete friend` +"
      },
      {
        "lineNumber": 1612,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "   Expected: Nothing is updated. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1613,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ".. Test case: `tag delete friend buddy close` +"
      },
      {
        "lineNumber": 1614,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "   Expected: Nothing is updated. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1615,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ".. Test case: `tag delete Close` +"
      },
      {
        "lineNumber": 1616,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "   Expected: `Euler Foo` is displayed. His tags are updated to `t/Buddy`. `Close` tag is deleted."
      },
      {
        "lineNumber": 1617,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ".. Test case: `tag delete Friend` +"
      },
      {
        "lineNumber": 1618,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "   Expected: `Anne Loh`, `Ben Chua` and `Charlie Dong` contacts are displayed. They no longer have the `Friend` tag."
      },
      {
        "lineNumber": 1619,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ".. Test case: `tag delete Buddy Family` +"
      },
      {
        "lineNumber": 1620,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "   Expected: `Charlie Dong`, `David Ee`, `Euler Foo`, `Fiona Goh` and `George Ho` contacts are displayed."
      },
      {
        "lineNumber": 1621,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "   They all do no have the `Buddy` or `Family` tags."
      },
      {
        "lineNumber": 1622,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ".. Test case: `tag delete` \u003d"
      },
      {
        "lineNumber": 1623,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "   Expected: Nothing is updated. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1624,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "// end::testingTag[]"
      },
      {
        "lineNumber": 1625,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1626,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "// tag::testingschedule[]"
      },
      {
        "lineNumber": 1627,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "\u003d\u003d\u003d Adding a Meeting"
      },
      {
        "lineNumber": 1628,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 1629,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ". Adding a meeting to a person while all persons all listed."
      },
      {
        "lineNumber": 1630,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 1631,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1632,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ".. Test case: `schedule 1 m/21/02/18 1430` +"
      },
      {
        "lineNumber": 1633,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "   Expected: First client is scheduled for a meeting on 21st February 2018, at 1430. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1634,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ".. Test case: `schedule 0 m/21/02/18 1430` +"
      },
      {
        "lineNumber": 1635,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "   Expected: Nothing is updated. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1636,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ".. Test case: `schedule 1 m/31/02/18 1430` +"
      },
      {
        "lineNumber": 1637,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "   Expected: Nothing is updated. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1638,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ".. Test case: `schedule 1 m/21/02/18 2630` +"
      },
      {
        "lineNumber": 1639,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "   Expected: Nothing is updated. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1640,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "// end::testingschedule[]"
      },
      {
        "lineNumber": 1641,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 1642,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "// tag::testingmeetings[]"
      },
      {
        "lineNumber": 1643,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "\u003d\u003d\u003d Searching by Meetings"
      },
      {
        "lineNumber": 1644,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 1645,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ". Searching for people by meetings."
      },
      {
        "lineNumber": 1646,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 1647,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ".. Prerequisites: Two persons in the list. One must have a meeting scheduled on 21st February 2018, and the other must have a meeting scheduled on 23rd February 2018."
      },
      {
        "lineNumber": 1648,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ".. Test case: `meetings 21/02/18` +"
      },
      {
        "lineNumber": 1649,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "   Expected: The client with the meeting on 21st February 2018 is listed."
      },
      {
        "lineNumber": 1650,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ".. Test case: `meetings 23/02/18` +"
      },
      {
        "lineNumber": 1651,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "   Expected: The client with the meeting on 23rd February 2018 is listed."
      },
      {
        "lineNumber": 1652,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ".. Test case: `meetings` +"
      },
      {
        "lineNumber": 1653,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "   Expected: Both clients are listed."
      },
      {
        "lineNumber": 1654,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ".. Test case: `meetings 24/02/18` +"
      },
      {
        "lineNumber": 1655,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "   Expected: No clients are listed."
      },
      {
        "lineNumber": 1656,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ".. Test case: `meetings 31/02/18` +"
      },
      {
        "lineNumber": 1657,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "   Expected: Nothing is updated. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1658,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "// end::testingmeetings[]"
      }
    ],
    "authorContributionMap": {
      "zioul123": 219,
      "A19Sean": 183,
      "-": 858,
      "denzelchung": 150,
      "AyushChatto": 99,
      "chantca95": 149
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "\u003d InsuRen - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-W13-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "By: `Team W13-1`      Since: `Sep 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zioul123"
        },
        "content": "InsuRen is for insurance salesmen who *prefer to use a desktop app for managing contacts*. It can help to *manage one’s network of clients in an organized, efficient and intuitive manner.* More importantly, InsuRen is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, InsuRen can get your contact management tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ".  Download the latest `insuren.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for InsuRen."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* *`list`* : lists all contacts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chantca95"
        },
        "content": "* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the InsuRen."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* **`delete`**`3` : deletes the 3rd contact shown in the current list"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "* All commands have a shorthand version for easy access. Simply replace the command word with the shorthand. All other syntax is identical."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "Shorthand: `h`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Adding a person: `add`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zioul123"
        },
        "content": "Adds a person to InsuRen. +"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zioul123"
        },
        "content": "Format: `add n/NAME [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zioul123"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zioul123"
        },
        "content": "We recommend against (but do not forbid) using `edit` or `delete` (case-insensitive) as tags, as you may run into complications when using the `tag edit` and `tag delete` functionality."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "Shorthand: `a`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zioul123"
        },
        "content": "Only the Name field is compulsory, all other fields need not be included."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zioul123"
        },
        "content": "A person can have one name, phone, email and address, and any number of tags (including 0)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zioul123"
        },
        "content": "* `add n/John Doe p/98765432 e/johnd@example.com a/John street block 123 #01-01` +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zioul123"
        },
        "content": "Adds a `Person` with name John Doe, phone number 98765432, email johnd@example.com, and address John street block 123 #01-01, to InsuRen, provided that he does not already exist in InsuRen."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zioul123"
        },
        "content": "* `a n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal` +"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zioul123"
        },
        "content": "Adds a `Person` with name Betsy Crowe, phone number 1234567, email betsycrowe@example.com, address Newgate Prison, and tags friend and criminal to InsuRen, provided that she does not already exist in InsuRen."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zioul123"
        },
        "content": "* `add n/Abigail` +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zioul123"
        },
        "content": "Adds a `Person` with name Abigail to InsuRen."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing all persons : `list`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chantca95"
        },
        "content": "Shows a list of all persons in InsuRen. +"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "Shorthand: `l`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zioul123"
        },
        "content": "// tag::editByName[]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing a person : `edit`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zioul123"
        },
        "content": "Edits an existing person in InsuRen by the displayed list\u0027s index or by an existing name. +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zioul123"
        },
        "content": "Format: `edit INDEX/EXISTING_NAME [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zioul123"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zioul123"
        },
        "content": "We recommend against (but do not forbid) using `edit` or `delete` (case-insensitive) as tags, as you may run into complications when using the `tag edit` and `tag delete` functionality."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "Shorthand: `e`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zioul123"
        },
        "content": "* You can edit a person by *index* or by *name*."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zioul123"
        },
        "content": "** For editing the person at the specified `INDEX`, the index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zioul123"
        },
        "content": "*** The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zioul123"
        },
        "content": "** For editing the person with a name matching the EXISTING_NAME, the name *​must uniquely identify a person.*"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zioul123"
        },
        "content": "*** If nobody matches the EXISTING_NAME, or there are multiple contacts matching it, InsuRen will notify you and not carry out changes."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zioul123"
        },
        "content": "*** You can be less specific or more specific in the existing name to identify a person, but in the case that two people have exactly the same name, you have to use the edit by index command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zioul123"
        },
        "content": "* `e 2 n/Betsy Crower t/` +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "* `edit John Doe p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zioul123"
        },
        "content": "Edits the phone number and email address of John Doe to be ​91234567​ and johndoe@example.com​ respectively, if John Doe can be uniquely identified by name in InsuRen."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zioul123"
        },
        "content": "* `e Johnny n/Betsy Crower` +"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zioul123"
        },
        "content": "Edits the name of Johnny to be `Betsy Crower` if Johnny can be uniquely identified by name in InsuRen."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zioul123"
        },
        "content": "// end::editByName[]"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Locating persons by name: `find`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "Finds persons whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "Shorthand: `f`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* `find John` +"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy Tim John` +"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "Returns any person having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zioul123"
        },
        "content": "// tag::deleteByName[]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person : `delete`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zioul123"
        },
        "content": "Deletes the specified person from InsuRen by the displayed list\u0027s index or by an existing name. +"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zioul123"
        },
        "content": "Format: `delete INDEX/EXISTING_NAME`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "Shorthand: `d`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zioul123"
        },
        "content": "* Deletes the person by *index* or by *name*."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zioul123"
        },
        "content": "** For deleting by `INDEX`,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zioul123"
        },
        "content": "*** The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zioul123"
        },
        "content": "*** The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zioul123"
        },
        "content": "** For deleting by `EXISTING_NAME`,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zioul123"
        },
        "content": "*** The name *​must uniquely identify a person.*"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zioul123"
        },
        "content": "*** If nobody matches the EXISTING_NAME, or there are multiple contacts matching it, InsuRen will notify you and not carry out changes."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zioul123"
        },
        "content": "*** You can be less specific or more specific in the existing name to identify a person, but in the case that two people have exactly the same name, you have to delete by `INDEX`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chantca95"
        },
        "content": "Deletes the 2nd person in InsuRen."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zioul123"
        },
        "content": "`d 1` +"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zioul123"
        },
        "content": "* `delete John` +"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zioul123"
        },
        "content": "Deletes John if John can be uniquely identified by name in InsuRen."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zioul123"
        },
        "content": "* `d Abel Lee` +"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zioul123"
        },
        "content": "Deletes Abel Lee if Abel Lee can be uniquely identified by name in InsuRen."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zioul123"
        },
        "content": "// end::deleteByName[]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Selecting a person : `select`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the person identified by the index number used in the displayed person list. +"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "Shorthand: `s`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "* Selects the person and loads the Google search page the person at the specified `INDEX`."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chantca95"
        },
        "content": "Selects the 2nd person in InsuRen."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "`select 1` +"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "Shorthand: `hs`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "box."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chantca95"
        },
        "content": "Restores InsuRen to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "Shorthand: `u`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "Undoable commands: those commands that modify InsuRen\u0027s content (`add`, `delete`, `edit`, `import`, `schedule`,"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chantca95"
        },
        "content": " `pic` and `clear`)."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "Shorthand: `r`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "chantca95"
        },
        "content": "Clears all entries from InsuRen. +"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "Shorthand: `c`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "Shorthand: `q`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "chantca95"
        },
        "content": "// tag::import[]"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "\u003d\u003d\u003d Mass import contacts: `import`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "chantca95"
        },
        "content": "Import contacts from a csv file."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "chantca95"
        },
        "content": "If no file path is given, a file browser will open for users to navigate to their desired file (.txt and .csv only)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "chantca95"
        },
        "content": "If a file path is given, InsuRen will attempt to obtain and read the file specified by the given file path."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "chantca95"
        },
        "content": "Format: `import`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "chantca95"
        },
        "content": "Shorthand: `i`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "****"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "chantca95"
        },
        "content": "* InsuRen will fetch the file from the given path."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "chantca95"
        },
        "content": "* InsuRen will throw an error message if the file cannot be found from the given (typed) file path"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "chantca95"
        },
        "content": "* InsuRen will NOT throw an error message if the formatting of the file is incorrect."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "chantca95"
        },
        "content": "* Improperly formatted contacts and/or duplicate contacts will be ignored."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "****"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "chantca95"
        },
        "content": "Example (user does not provide a file path):"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "chantca95"
        },
        "content": "* `import`"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "chantca95"
        },
        "content": "* A file browser will pop up as shown below:"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "chantca95"
        },
        "content": "+"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "chantca95"
        },
        "content": "image::import.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "chantca95"
        },
        "content": "Example (user provides a file path):"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "chantca95"
        },
        "content": "* FOR WINDOWS:"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "chantca95"
        },
        "content": "** `import l/D:/AddressbookCorrect.csv` (absolute pathing) or"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "chantca95"
        },
        "content": "** `import l/AddressbookCorrect.csv` (relative pathing - if you save the .csv file in the same directory as the .jar file)."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "chantca95"
        },
        "content": "* FOR MAC:"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "chantca95"
        },
        "content": "** `import l//FILEPATH` (absolute pathing - note the double slashes) or"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "chantca95"
        },
        "content": "** `import l/AddressbookCorrect.csv` (relative pathing)."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "chantca95"
        },
        "content": "* Regardless which method is used, InsuRen will load contacts from the given csv file."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "chantca95"
        },
        "content": "* Each contact\u0027s Name, Phone, Email, Address, Meeting and Tag(s) fields must be keyed in the csv in that order."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "chantca95"
        },
        "content": "* All fields are optional, except for Name. Contacts with no Address, Phone etc. must have those fields left BLANK. Ie. the"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "chantca95"
        },
        "content": "corresponding Excel cell MUST have nothing in it."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "chantca95"
        },
        "content": "* Any invalid entries (contacts with no name) will be ignored."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "chantca95"
        },
        "content": "* Examples of properly formatted csv files are shown below. (Can be both csv or txt)"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "chantca95"
        },
        "content": "+"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "chantca95"
        },
        "content": "image::import-acceptable-csv3.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "chantca95"
        },
        "content": "// end::import[]"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "chantca95"
        },
        "content": "// tag::export[]"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "chantca95"
        },
        "content": "\u003d\u003d\u003d Export contact list: `export`"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "chantca95"
        },
        "content": "Exports the current contact list into a csv file whose name is given as the second argument. The export file"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "chantca95"
        },
        "content": " can be found in the root directory of the project/application. +"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "chantca95"
        },
        "content": "Format: `export DESTINATION_FILE_NAME.csv`"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "chantca95"
        },
        "content": "Shorthand: `x`"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "****"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "chantca95"
        },
        "content": "* InsuRen will copy all contacts and format them into a csv file, with each row representing a unique contact."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "chantca95"
        },
        "content": "* InsuRen will throw an error message if given file name is invalid (has no .csv suffix)."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "****"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "chantca95"
        },
        "content": "* `export 28Nov.csv` +"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "chantca95"
        },
        "content": "InsuRen contacts are exported to `28Nov.csv`"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "chantca95"
        },
        "content": "+"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "chantca95"
        },
        "content": "image::exportedCsv.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "chantca95"
        },
        "content": "// end::export[]"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "// tag::schedule[]"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "\u003d\u003d\u003d Add meeting time: `schedule`"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "Add a meeting at the input date and time with a specified person. +"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "Format: `schedule INDEX m/DD/MM/YY HHMM`"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "Shorthand: `sch`"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "****"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "chantca95"
        },
        "content": "* InsuRen will add the meeting to your list of meetings, as well as mark the person with the meeting."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "* You may use any special characters such as \u0027/\u0027 and \u0027-\u0027, or whitespace to seperate the entries. As long as the relative order"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "of the numbers is DDMMYYHHMM, InsuRen will save it."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "* Meetings can be scheduled on any valid date in the past (to keep a record) or in the future (as a reminder)."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "* If the date is invalid (i.e. it is not a real date), an error will be thrown."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "* If there are any meetings scheduled at the same time, it will be flagged out."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "****"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "* `schedule 1 m/12/03/19 0930` +"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "InsuRen will record that a meeting is scheduled on 12 March 2019, 0930 with the first entry."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "// end::schedule[]"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "// tag::meetings[]"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "\u003d\u003d\u003d View meeting timings: `meetings`"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "Displays the details of the meeting at the input date and time. +"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "Format: `meetings [DD/MM/YY]`"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "shorthand: `m`"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "****"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "* If there are meetings scheduled on the queried date, the details of the clients the meetings are scheduled with"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "are displayed."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "chantca95"
        },
        "content": "* If the query has no date, then all meetings scheduled in InsuRen are displayed."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "* If there is no meeting scheduled on the day, an empty list is displayed."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "****"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "* `meetings 23/02/18` +"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "InsuRen displays meetings scheduled on 23rd February, 2018."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "// end::meetings[]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "// tag::notifs[]"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "zioul123"
        },
        "content": "\u003d\u003d\u003d Notifications for expiring plans `[coming in v2.0]`"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "chantca95"
        },
        "content": "InsuRen entries have an optional field for date of plan expiry. You will automatically be notified of clients"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "chantca95"
        },
        "content": "with plans expiring within a month from the day when InsuRen is initialized. +"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "No additional search queries are needed."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "// end::notifs[]"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "// tag::picture[]"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "\u003d\u003d\u003d Adding a picture to contact: `pic`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "chantca95"
        },
        "content": "Adds a picture to a person in InsuRen. +"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "zioul123"
        },
        "content": "Format: `​pic INDEX l/FILE_LOCATION​`"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "Shorthand: `p`"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "****"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "chantca95"
        },
        "content": "* InsuRen will add the image to the contact."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "* Only `.jpg` and `.png` files are accepted."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "* Supports file location for any \u003c\u003cDeveloperGuide.adoc#mainstream-os,mainstream OS\u003e\u003e."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "** Windows: `C:/Users/John/Downloads/InsuRen/images/petertan.jpg`"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "** Mac: `/Users/John/Downloads/Insuren/images/petertan.jpg`"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "* File location can be an absolute path (`/Users/John/Downloads/InsuRen/images/petertan.jpg`), or a relative path (`images/petertan.jpg`)."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "* If the picture gets deleted or renamed, InsuRen will show the default user picture."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "****"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "zioul123"
        },
        "content": "* `pic 2 l/john.jpg` +"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "zioul123"
        },
        "content": "The second person in the list will now have image `john.jpg` in his contact."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "* `pic 1 l//Users/John/Downloads/InsuRen/images/petertan.jpg` +"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "The first person in the list will now have image `petertan.jpg` from the given path in his contact."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "* `p 3 l/C:/Users/John/Downloads/InsuRen/images/davidlee.png` +"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "The third person in the list will now have image `davidlee.png` from the given path in his contact."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "// end::picture[]"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "// tag::tag[]"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "\u003d\u003d\u003d Using tags: `tag`"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "\u003d\u003d\u003d\u003d View contacts by tag"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "View all contacts in any existing tag. +"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "Format: `tag TAG_NAME [MORE_TAG_NAMES]`"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "Shorthand: `t`"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "****"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "* View all contacts that belong to the same tag."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "****"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "* `tag Work` +"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "Returns all contacts with the `Work` tag."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "* `tag Work Important` +"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "Returns all contacts with the `Work` or `Important` tags."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "\u003d\u003d\u003d\u003d Edit a tag"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "zioul123"
        },
        "content": "Edit a tag, replacing all its occurrences with a new user-specified tag. +"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "Format: `tag edit EXISTING_TAG_NAME NEW_TAG_NAME`"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "zioul123"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "zioul123"
        },
        "content": "We recommend against (but do not forbid) using `edit` or `delete` (case-insensitive) as tags, as you may run into complications when using the `tag edit` and `tag delete` functionality."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "****"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "* All contacts tagged with `EXISTING_TAG_NAME` will have the tag replaced by `NEW_TAG_NAME`."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "****"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "* `tag edit Work Business` +"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "All contacts that had the `Work` tag have the tag changed to `Business`."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "* `t EDIT Friends Buddies` +"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "Usage of \"edit\" is **not** case-sensitive."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "\u003d\u003d\u003d\u003d Delete a tag"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "Delete a tag, removing it from all contacts. +"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "Format: `tag TAG_NAME [MORE_TAG_NAMES...] delete`"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "****"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "* All contacts in `TAG_NAME` will be removed from the tag. Contacts that were previously tagged are not deleted."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "****"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "* `tag Work delete` +"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "All contacts that were previously tagged with `Work` have the `Work` tag removed. `Work` tag is deleted."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "* `t Work Important delete` +"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "All contacts that were previously tagged with `Work` and `Important` have the aforementioned tags removed. `Work` and"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "`Important` tags are deleted."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "// end::tag[]"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "chantca95"
        },
        "content": "InsuRen data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "zioul123"
        },
        "content": "Encrypt all data in InsuRen behind a password. +"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "zioul123"
        },
        "content": "Format: `encrypt PASSWORD`"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "zioul123"
        },
        "content": "****"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "zioul123"
        },
        "content": "* The next time a user opens InsuRen, he will have to enter a password before the contact list populates."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "zioul123"
        },
        "content": "****"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "zioul123"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "zioul123"
        },
        "content": "* `encrypt Pa$$w0rd` +"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "zioul123"
        },
        "content": "All data will be encrypted. The next time the user opens InsuRen, InsuRen will prompt her for a password."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "// tag::picture-url[]"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "\u003d\u003d\u003d Adding a picture from URL to contact `[coming in v2.0]`"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "Adds a picture from a URL to a person in InsuRen. +"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "Format: `​pic INDEX l/FILE_URL​`"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "Shorthand: `p`"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "****"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "* InsuRen will add the image to the contact."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "* If the URL is broken after it is successfully added, InsuRen will show a picture indicating that the URL is broken."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "****"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "* `pic 1 l/https://cs2103-ay1819s1-w13-1.github.io/main/images/denzelchung.png` +"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "The first person in the list will now have image `denzelchung.png` from the `Github` webpage in his contact."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "// end::picture-url[]"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous InsuRen folder."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "chantca95"
        },
        "content": "Alternatively, use the export command to get your current contact list and save it in portable storage (email, thumbdrive). Install InsuRen on the other computer"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "chantca95"
        },
        "content": "and import the abovementioned csv file into your new computer\u0027s copy of InsuRen."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "* *Add* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` +"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "zioul123"
        },
        "content": "* *Delete* : `delete INDEX/EXISTING_NAME` +"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "zioul123"
        },
        "content": "e.g. `delete 3` +"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "zioul123"
        },
        "content": "or `delete John Doe Kah Wai`"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "zioul123"
        },
        "content": "* *Edit* : `edit INDEX/EXISTING_NAME [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "zioul123"
        },
        "content": "e.g. `edit 2 n/James Lee e/jameslee@example.com` +"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "zioul123"
        },
        "content": "or `edit John Doe n/John Chan a/525 East 80th Street, New York`"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `find James Jake`"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "* *Select* : `select INDEX` +"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "e.g.`select 2`"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "zioul123"
        },
        "content": "* *Import contacts* : `import` or `import l/FILE_PATH`"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "chantca95"
        },
        "content": "* *Export contacts* : `export DESTINATION_DIRECTORY`"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "* *Schedule* : `schedule INDEX m/DD/MM/YY HHMM`"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "* *Meetings* : `meetings [DD/MM/YY]`"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "* *Add picture* : `​pic INDEX l/FILE_LOCATION`"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "* *View all contacts with a specified tag* : `tag TAG_NAME`"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "* *Remove all contacts from a specified tag* : `tag TAG_NAME remove`"
      }
    ],
    "authorContributionMap": {
      "zioul123": 69,
      "A19Sean": 107,
      "-": 227,
      "denzelchung": 41,
      "AyushChatto": 45,
      "chantca95": 66
    }
  },
  {
    "path": "docs/team/A19Sean.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "\u003d Auyok Sean - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "\u003d\u003d PROJECT: InsuRen"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "\u0027Ren\u0027 in Mandarin translates to \u0027person\u0027 or \u0027people\u0027, and true to our name, this app is all about managing one’s network of clients in an organized, efficient and intuitive manner. InsuRen is geared to the needs of the modern Insurance salesman, but anyone whose business is their strong rapport with their clients will find this to be an indispensable tool."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "* *Major enhancement*: added *the ability to view tagged contacts and to edit and delete tags*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "** What it does: allows the user view all contacts with user-specified tags, as well as edit and delete tags across all contacts."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "** Justification: This feature improves the product significantly because a user can easily view relevant contacts and organise their contact book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "** Highlights: This enhancement makes use of a new `PersonContainsTagPredicate` to find the relevant tagged contacts. The enhancement also has three different functionality within one command word by recognising other keywords present in the user\u0027s command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "** Credits: Nil"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003da19sean\u0026sort\u003ddisplayName\u0026since\u003d2018-09-12\u0026until\u003d2018-10-08\u0026timeframe\u003dday\u0026reverse\u003dfalse\u0026repoSort\u003dtrue[RepoSense]]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "*** Managed release `v1.3` on GitHub"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "*** Edited ResultDisplay such that upon an invalid command, the result display text would be in a red font. (Pull request https://github.com/CS2103-AY1819S1-W13-1/main/pull/13[#13])"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "*** Regularly updated User Guide and Developer Guide: https://github.com/CS2103-AY1819S1-W13-1/main/pull/9[#9], https://github.com/CS2103-AY1819S1-W13-1/main/pull/102[#102], https://github.com/CS2103-AY1819S1-W13-1/main/pull/108[#108], https://github.com/CS2103-AY1819S1-W13-1/main/pull/172[#172], https://github.com/CS2103-AY1819S1-W13-1/main/pull/183[#183]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/CS2103-AY1819S1-W13-1/main/pull/39[#39], https://github.com/CS2103-AY1819S1-W13-1/main/pull/73[#73], https://github.com/CS2103-AY1819S1-W13-1/main/pull/79[#79]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com/CS2103-AY1819S1-W12-3/main/issues/127[1],"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "https://github.com/CS2103-AY1819S1-W12-3/main/issues/142[2], https://github.com/CS2103-AY1819S1-W12-3/main/issues/145[3])"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "include::../UserGuide.adoc[tag\u003dtag]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dtagcommand]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dtagUseCase]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dtestingTag]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dnfr]"
      }
    ],
    "authorContributionMap": {
      "A19Sean": 18,
      "denzelchung": 40
    }
  },
  {
    "path": "docs/team/AyushChatto.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "\u003d Chattoraj Ayush - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "\u003d\u003d PROJECT: InsuRen"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "\u0027Ren\u0027 in Mandarin translates to \u0027person\u0027 or \u0027people\u0027, and true to our name, this app is all about managing one’s network of clients in an organized, efficient and intuitive manner. InsuRen is geared to the needs of the modern Insurance salesman, but anyone whose business is their strong rapport with their clients will find this to be an indispensable tool."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "* *Major enhancement*: added *the ability to schedule meetings with clients*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "** What it does: allows the user to schedule a meeting with a client. Schedule meetings can be searched using the meetings command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "** Justification: This feature allows insurance agents to keep track of their schedules by enabling them to have a record of all their meetings. It also allows them to quickly search through all their meetings, and prevents them from accidentally scheduling clashing meetings."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "** Highlights: This enhancement added a new command. It required the use of multiple Java API classes for the validation of dates and times, as well the implementation of a new global data structure to store all meeting timings to prevent meetings from being scheduled at the same time."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "* *Minor enhancement*: added shorthand commands for all existing commands for faster access."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dayushchatto[RepoSense]]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "*** Managed releases `v1.1` - `v1.2` (2 releases) on GitHub"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "*** Did general changes to existing contents of the User Guide and Developer Guide: https://github.com/CS2103-AY1819S1-W13-1/main/pull/57[#57], https://github.com/CS2103-AY1819S1-W13-1/main/pull/91[#91], https://github.com/CS2103-AY1819S1-W13-1/main/pull/100[#100], https://github.com/CS2103-AY1819S1-W13-1/main/pull/116[#116],"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/CS2103-AY1819S1-W13-1/main/pull/102[#102], https://github.com/CS2103-AY1819S1-W13-1/main/pull/60[#60]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com/CS2103-AY1819S1-T09-4/main/issues/107[1], https://github.com/CS2103-AY1819S1-T09-4/main/issues/109[2])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "include::../UserGuide.adoc[tag\u003dschedule]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "include::../UserGuide.adoc[tag\u003dmeetings]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "include::../UserGuide.adoc[tag\u003dnotifs]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dschedule]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dtestingschedule]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dtestingmeetings]"
      }
    ],
    "authorContributionMap": {
      "AyushChatto": 58
    }
  },
  {
    "path": "docs/team/chantca95.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "\u003d Alex Chan - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "\u003d\u003d PROJECT: InsuRen"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "\u0027Ren\u0027 in Mandarin translates to \u0027person\u0027 or \u0027people\u0027, and true to our name, this app is all about managing one’s network of clients in an organized, efficient and intuitive manner. InsuRen is geared to the needs of the modern Insurance salesman, but anyone whose business is their strong rapport with their clients will find this to be an indispensable tool."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chantca95"
        },
        "content": "* *Code contributed*: https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dchantca95[Project Code Dashboard]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chantca95"
        },
        "content": "* *Major enhancement*: added *the ability to import contacts from a CSV file*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chantca95"
        },
        "content": "** What it does: allows the user to import contacts into InsuRen from a previously appropriately-formatted Excel CSV file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chantca95"
        },
        "content": "** Justification: This feature makes it convenient for users who want to populate their own InsuRen apps with existing lists of contacts. Rather than manually copying and adding contacts one by one into InsuRen, users can instead simply format their contact lists into a CSV as shown in the user guide, and import them into InsuRen in one go."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chantca95"
        },
        "content": "** Highlights: This enhancement uses a new *Command*, *ImportCommand*. Users can choose CSV files using a mouse and file browser, or if they are familiar with pathing formats on their respective Operating Systems, they can also enter the path (either relative and absolute) of the required CSV."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chantca95"
        },
        "content": "** Credits: none"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chantca95"
        },
        "content": "* *Minor enhancement*: added *the ability to export InsuRen data into a CSV file*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chantca95"
        },
        "content": "** What it does: allows the user to export the current contacts in InsuRen into a new CSV file, whose name is given by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chantca95"
        },
        "content": "** Justification: This feature allows for convenient movement of a user\u0027s contact list. Some usages include keeping a back up of one\u0027s contact list, allowing one to view his InsuRen data on mobile platforms, etc."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chantca95"
        },
        "content": "** Highlights: This enhancement uses a new *Command*, *ExportCommand*."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chantca95"
        },
        "content": "** Credits: http://javaonlineguide.net/2014/10/compare-two-files-in-java-example-code.html - code referenced for testing ExportCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chantca95"
        },
        "content": "*** Ensured high test coverage, thorough tests"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chantca95"
        },
        "content": "*** Added Coloured Tags"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chantca95"
        },
        "content": "*** Import works based on Add Command - adding multiple Contacts based on csv files"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chantca95"
        },
        "content": "*** Export utilizes the current state of the Model to create an csv file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chantca95"
        },
        "content": "*** Edited our README to reflect our product\u0027s purpose, vision and branding: https://github.com/CS2103-AY1819S1-W13-1/main/pull/6/files[#6]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chantca95"
        },
        "content": "*** Did general changes to existing contents of the User Guide and Developer Guide to reflect InsuRen branding: https://github.com/CS2103-AY1819S1-W13-1/main/pull/73/files[#73]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chantca95"
        },
        "content": "*** Updated `ImportCommand` and `ExportCommand` documentation on the User Guide and Developer Guide: https://github.com/CS2103-AY1819S1-W13-1/main/pull/83/files[#83] https://github.com/CS2103-AY1819S1-W13-1/main/pull/113/files[#113]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chantca95"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com/CS2103-AY1819S1-W17-2/main/issues/263[1], https://github.com/CS2103-AY1819S1-W17-2/main/issues/262[2], https://github.com/CS2103-AY1819S1-W17-2/main/issues/261[3],"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chantca95"
        },
        "content": "https://github.com/CS2103-AY1819S1-W17-2/main/issues/258[4], https://github.com/CS2103-AY1819S1-W17-2/main/issues/257[5], https://github.com/CS2103-AY1819S1-W17-2/main/issues/259[6],"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chantca95"
        },
        "content": "https://github.com/CS2103-AY1819S1-W17-2/main/issues/254[7])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chantca95"
        },
        "content": "include::../UserGuide.adoc[tag\u003dimport]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chantca95"
        },
        "content": "include::../UserGuide.adoc[tag\u003dexport]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chantca95"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dimport]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chantca95"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dexport]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chantca95"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dmanualTestingImport]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chantca95"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dmanualTestingExport]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "denzelchung": 38,
      "chantca95": 32
    }
  },
  {
    "path": "docs/team/denzelchung.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "\u003d Denzel Chung - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "\u003d\u003d PROJECT: InsuRen"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "\u0027Ren\u0027 in Mandarin translates to \u0027person\u0027 or \u0027people\u0027, and true to our name, this app is all about managing one’s network of clients in an organized, efficient and intuitive manner. InsuRen is geared to the needs of the modern Insurance salesman, but anyone whose business is their strong rapport with their clients will find this to be an indispensable tool."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "* *Code contributed*: https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003ddenzelchung[Project Code Dashboard]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "* *Major enhancement*: added *the ability to upload picture*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "** What it does: allows the user to add a picture for his clients."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "** Justification: This feature improves the usability and convenience of the product as the user can now identify his clients by their picture. In the event where the user has two clients of similar names, this feature can help the user identify their identities by looking at their picture and not make the mistake of calling the wrong person."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "** Highlights: This enhancement added a new command. It required knowledge on path validation and handling the different platform\u0027s path format to make the program run on any mainstream OS."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "InsuRen is programmed to do the following:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "*** Loads a default picture if no picture is specified."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "*** Loads the default picture if the set picture is somehow deleted and could not be found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "*** Accepts both absolute and relative path from the program\u0027s running directory."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "** Credits: _rongjiecomputer_ for his suggestion on using `Guava` on the https://github.com/nus-cs2103-AY1819S1/forum/issues/115[forum]."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "*** Setting up of project tools such as AppVeyor, Travis, and Coveralls."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "*** Updated `Storage` to backup data file (Pull request https://github.com/CS2103-AY1819S1-W13-1/main/pull/12[#12])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "*** Did general changes to existing contents of the User Guide and Developer Guide: https://github.com/CS2103-AY1819S1-W13-1/main/pull/34[#34]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "*** Updated `PictureCommand` documentation on the User Guide and Developer Guide: https://github.com/CS2103-AY1819S1-W13-1/main/pull/93[#93], https://github.com/CS2103-AY1819S1-W13-1/main/pull/152[#152], https://github.com/CS2103-AY1819S1-W13-1/main/pull/157[#157]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/CS2103-AY1819S1-W13-1/main/pull/85[#85], https://github.com/CS2103-AY1819S1-W13-1/main/pull/160[#160]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com/CS2103-AY1819S1-T12-4/main/issues/147[1], https://github.com/CS2103-AY1819S1-T12-4/main/issues/148[2], https://github.com/CS2103-AY1819S1-T12-4/main/issues/151[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "include::../UserGuide.adoc[tag\u003dpicture]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "include::../UserGuide.adoc[tag\u003dpicture-url]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003daddpicture]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003daddpictureurl]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dpicUseCase]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dnfr]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dtestingpicture]"
      }
    ],
    "authorContributionMap": {
      "denzelchung": 66
    }
  },
  {
    "path": "docs/team/zioul123.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "\u003d Louiz Kim-Chan - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "\u003d\u003d PROJECT: InsuRen"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "\u0027Ren\u0027 in Mandarin translates to \u0027person\u0027 or \u0027people\u0027, and true to our name, this app is all about managing one’s network of clients in an organized, efficient and intuitive manner. InsuRen is geared to the needs of the modern Insurance salesman, but anyone whose business is their strong rapport with their clients will find this to be an indispensable tool."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zioul123"
        },
        "content": "* *Major enhancement*: added the ability to *edit client contact information and delete client contacts by name*."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zioul123"
        },
        "content": "** What it does: Instead of having to edit or delete contact info by using an index, you can edit and delete contacts directly using their name, provided their name is distinguishable from all other names present in InsuRen."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zioul123"
        },
        "content": "** Justification: This feature improves the product significantly because normally, editing requires scrolling or using `find` to filter the list first. Since we don\u0027t want the user to have to use the mouse, and we want to speed up processes, editing by name will help achieve the product\u0027s goals."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zioul123"
        },
        "content": "** Highlights: This enhancement extends the `edit` and `delete` commands and makes use of a new `Predicate` and `PersonFinderUtil` to find a `Person` when provided a unique identifier."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zioul123"
        },
        "content": "** Credits: Nil."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zioul123"
        },
        "content": "* *Minor enhancement*: Make the address, email and phone number fields `Optional` (Pull requests https://github.com/CS2103-AY1819S1-W13-1/main/pull/16[#16], https://github.com/CS2103-AY1819S1-W13-1/main/pull/33[#33])."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zioul123"
        },
        "content": "** What it does: Instead of requiring all fields to be filled when adding a person, which may require an Insurance Agent to fill placeholder information, she can leave several fields blank instead."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zioul123"
        },
        "content": "** Justification: This feature improves the product significantly, because insurance agents do not always have all the information about their clients they need, but they may still need to keep track of them and contact them with whatever incomplete information they have. This feature thus adds a degree of freedom and ease of use to insurance agents."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zioul123"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dzioul123[RepoSense]]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zioul123"
        },
        "content": "*** Managed release `v1.2` and `v1.3.1` on GitHub"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zioul123"
        },
        "content": "*** Add a display for the number of people in InsuRen on the status bar (Pull request https://github.com/CS2103-AY1819S1-W13-1/main/pull/8[#8])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zioul123"
        },
        "content": "*** Change aesthetics and add text wrapping to Person Cards (Pull request https://github.com/CS2103-AY1819S1-W13-1/main/pull/4[#4])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zioul123"
        },
        "content": "*** Update the About Us page to reflect our team (Pull requests https://github.com/CS2103-AY1819S1-W13-1/main/pull/2[#2], https://github.com/CS2103-AY1819S1-W13-1/main/pull/15[#15])"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zioul123"
        },
        "content": "*** Update the images shown on the project page (Pull requests https://github.com/CS2103-AY1819S1-W13-1/main/pull/2[#2], https://github.com/CS2103-AY1819S1-W13-1/main/pull/15[#15], https://github.com/CS2103-AY1819S1-W13-1/main/pull/28[#28], https://github.com/CS2103-AY1819S1-W13-1/main/pull/56[#56])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zioul123"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/CS2103-AY1819S1-W13-1/main/pull/22[#22], https://github.com/CS2103-AY1819S1-W13-1/main/pull/23[#23], https://github.com/CS2103-AY1819S1-W13-1/main/pull/40[#40], https://github.com/CS2103-AY1819S1-W13-1/main/pull/57[#57], https://github.com/CS2103-AY1819S1-W13-1/main/pull/58[#58], https://github.com/CS2103-AY1819S1-W13-1/main/pull/60[#60], https://github.com/CS2103-AY1819S1-W13-1/main/pull/71[#71]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zioul123"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples: https://github.com/CS2103-AY1819S1-F11-4/main/issues/169[1], https://github.com/CS2103-AY1819S1-F11-4/main/issues/171[2], https://github.com/CS2103-AY1819S1-F11-4/main/issues/184[3], https://github.com/CS2103-AY1819S1-F11-4/main/issues/186[4], https://github.com/CS2103-AY1819S1-F11-4/main/issues/190[5])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zioul123"
        },
        "content": "*** Get CI tools to print stack traces on failed tests (Pull request https://github.com/CS2103-AY1819S1-W13-1/main/pull/77[#77])"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zioul123"
        },
        "content": "include::../UserGuide.adoc[tag\u003deditByName]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zioul123"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddeleteByName]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zioul123"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dbyNameCommands]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zioul123"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003deditUseCase]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zioul123"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddeleteUseCase]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zioul123"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dtestingDelete]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "zioul123": 29,
      "denzelchung": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAddressBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 4, 0, false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 207,
      "AyushChatto": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    private String appTitle \u003d \"InsuRen\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAppTitle() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return appTitle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAppTitle(String appTitle) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appTitle \u003d appTitle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(appTitle, o.appTitle)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"App title : \" + appTitle);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nCurrent log level : \" + logLevel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zioul123": 1,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public static final String MESSAGE_MEETINGS_LISTED_OVERVIEW \u003d \"%1$d meetings scheduled!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public static final String MESSAGE_PERSON_NOT_FOUND \u003d \"The identifier provided does not match anyone in the \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zioul123"
        },
        "content": "            + \"person list!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public static final String MESSAGE_MULTIPLE_PERSONS_FOUND \u003d \"The identifier provided matches multiple people in\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zioul123"
        },
        "content": "            + \" the person list! Please re-use the command with either a specified index or a more specific name!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    public static final String MESSAGE_TAGGED_PERSONS_LISTED_OVERVIEW \u003d \"%1$d tagged persons listed!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    public static final String MESSAGE_TAG_DELETED_OVERVIEW \u003d \"%1$d persons untagged!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    public static final String MESSAGE_TAG_EDITED_OVERVIEW \u003d \"%1$d persons changed tag from \\\"%2$s\\\" to \\\"%3$s\\\"!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public static final String MESSAGE_CLASHING_MEETINGS \u003d \"There is already a meeting scheduled at the given time\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zioul123": 4,
      "A19Sean": 3,
      "-": 13,
      "AyushChatto": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Indicates that a new result is available."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class NewResultAvailableEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String message;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    public final Boolean isValid;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    public NewResultAvailableEvent(String message, boolean isValid) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        this.isValid \u003d isValid;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A19Sean": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    //@@author zioul123"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     * Returns true if {@code s} represents an integer. Will return false for any other non-null string input."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public static boolean isInteger(String s) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zioul123"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zioul123"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zioul123"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zioul123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zioul123": 17,
      "-": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/IndexParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zioul123"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zioul123"
        },
        "content": "//@@author zioul123"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zioul123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zioul123"
        },
        "content": " * Contains a utility method used for parsing a {@code String} for an Index, without throwing ParseExceptions."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zioul123"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zioul123"
        },
        "content": "public class IndexParserUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     * Attempts to parseFileFromArgs an index from the provided string."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     * @param string The preamble of the command typed."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     * @return An Optional of the index if the specified index is valid, an empty optional otherwise"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public static Optional\u003cIndex\u003e getIndex(String string) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zioul123"
        },
        "content": "            index \u003d ParserUtil.parseIndex(string);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zioul123"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        return Optional.of(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zioul123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zioul123": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/PersonFinderUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zioul123"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.model.person.NameContainsAllKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zioul123"
        },
        "content": "//@@author zioul123"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zioul123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zioul123"
        },
        "content": " * Contains a utility method used for finding a person by their name in a model provided."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zioul123"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zioul123"
        },
        "content": "public class PersonFinderUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public static final String GENERAL_MESSAGE_USAGE \u003d \"Press/type help to see the command usage.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     * Find a single person from the specified {@Code Model} using the {@Code String personIdentifier}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public static Person findPerson(Model model, String personIdentifier) throws ParseException, CommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        String trimmedArgs \u003d personIdentifier.trim();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zioul123"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, GENERAL_MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        NameContainsAllKeywordsPredicate predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(nameKeywords));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // Supplier is used because the stream is acted on more than once."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        Supplier\u003cStream\u003cPerson\u003e\u003e filteredPersons \u003d () -\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                model.getAddressBook().getPersonList().stream().filter(predicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        long numOfPeopleMatching \u003d filteredPersons.get().count();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        if (numOfPeopleMatching \u003d\u003d 0) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zioul123"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_PERSON_NOT_FOUND);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        } else if (numOfPeopleMatching !\u003d 1) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zioul123"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_MULTIPLE_PERSONS_FOUND);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        return filteredPersons.get().iterator().next();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zioul123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zioul123": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"a\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 69,
      "AyushChatto": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"c\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        model.resetData(new AddressBook());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 25,
      "AyushChatto": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteByNameCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zioul123"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.logic.PersonFinderUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zioul123"
        },
        "content": "//@@author zioul123"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zioul123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zioul123"
        },
        "content": " * Deletes a person identified using their name from the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zioul123"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zioul123"
        },
        "content": "public class DeleteByNameCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    protected final String personIdentifier;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public DeleteByNameCommand(String personIdentifier) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        super(Index.fromZeroBased(NO_INDEX));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        requireNonNull(personIdentifier);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        this.personIdentifier \u003d personIdentifier;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        Person personToDelete;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zioul123"
        },
        "content": "            personToDelete \u003d PersonFinderUtil.findPerson(model, personIdentifier);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zioul123"
        },
        "content": "            throw new CommandException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                || (other instanceof DeleteByNameCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                \u0026\u0026 personIdentifier.equals(((DeleteByNameCommand) other).personIdentifier)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zioul123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zioul123": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"d\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public static final int NO_INDEX \u003d 1000000000;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zioul123": 2,
      "-": 54,
      "AyushChatto": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditByNameCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zioul123"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.logic.PersonFinderUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zioul123"
        },
        "content": "//@@author zioul123"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zioul123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zioul123"
        },
        "content": " * Edits the details of an existing person in the address book using their name."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zioul123"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zioul123"
        },
        "content": "public class EditByNameCommand extends EditCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    protected final String personIdentifier;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public EditByNameCommand(String personIdentifier, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        super(Index.fromZeroBased(NO_INDEX), editPersonDescriptor);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        requireNonNull(personIdentifier);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        this.personIdentifier \u003d personIdentifier;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        Person person;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zioul123"
        },
        "content": "            person \u003d PersonFinderUtil.findPerson(model, personIdentifier);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zioul123"
        },
        "content": "            throw new CommandException(MESSAGE_NO_EDIT_IDENTIFIER);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        Person editedPerson \u003d EditCommand.createEditedPerson(person, editPersonDescriptor);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        if (!person.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zioul123"
        },
        "content": "            throw new CommandException(EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        model.updatePerson(person, editedPerson);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        return new CommandResult(String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zioul123"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        if (!(other instanceof EditByNameCommand)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zioul123"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        EditByNameCommand e \u003d (EditByNameCommand) other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        return personIdentifier.equals(e.personIdentifier)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zioul123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zioul123": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.model.person.Picture;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"e\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public static final String MESSAGE_NO_EDIT_IDENTIFIER \u003d \"No identifier specified! Please provide either an \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zioul123"
        },
        "content": "            + \"INDEX parameter or a name parameter.\\n\" + MESSAGE_USAGE;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public static final int NO_INDEX \u003d 1000000000;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    protected final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    protected static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        //@@author zioul123"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // Check if the editPersonDescriptor has these fields."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        boolean hasPhone \u003d editPersonDescriptor.getPhone().isPresent();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        boolean hasEmail \u003d editPersonDescriptor.getEmail().isPresent();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        boolean hasAddress \u003d editPersonDescriptor.getAddress().isPresent();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // Take the value of the editPersonDescriptor\u0027s field if it exists, otherwise take the original value."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        Optional\u003cPhone\u003e updatedPhone \u003d hasPhone ? editPersonDescriptor.getPhone() : personToEdit.getPhone();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        Optional\u003cEmail\u003e updatedEmail \u003d hasEmail ? editPersonDescriptor.getEmail() : personToEdit.getEmail();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        Optional\u003cAddress\u003e updatedAddress \u003d hasAddress ? editPersonDescriptor.getAddress() : personToEdit.getAddress();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        // Edit command does not change meeting. Use schedule to change meeting."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        Meeting updatedMeeting \u003d personToEdit.getMeeting();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        Picture updatedPicture \u003d personToEdit.getPicture();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "                updatedTags, updatedMeeting, updatedPicture);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zioul123": 17,
      "-": 220,
      "AyushChatto": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"q\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 22,
      "AyushChatto": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExportCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chantca95"
        },
        "content": "//@@author chantca95"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chantca95"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import static seedu.address.model.meeting.Meeting.NO_MEETING_MSG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chantca95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chantca95"
        },
        "content": " * Exports current state of InsuRen as a .csv file whose name is specified by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chantca95"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chantca95"
        },
        "content": "public class ExportCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"export\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"x\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" destinationFilename.csv\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Contacts successfully exported.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FILE \u003d \"A file already exists with that name. Choose a new name.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    private String fileName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    public ExportCommand(String fileName) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chantca95"
        },
        "content": "     * Writes current InsuRen data into .csv file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chantca95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        FileOutputStream fos \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            fos \u003d new FileOutputStream(fileName, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        PrintWriter pw \u003d new PrintWriter(fos);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        populateFile(pw, model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        pw.close();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chantca95"
        },
        "content": "     * Gets list of persons from a ReadOnlyAddressBook and populates the .csv file"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chantca95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    private void populateFile(PrintWriter pw, Model model) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        ObservableList\u003cPerson\u003e bufferList \u003d model.getAddressBook().getPersonList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        pw.println(\"Name, Phone, Email, Address, Meeting, Tags\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        for (Person current : bufferList) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            insertPersonIntoCsv(current, pw);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chantca95"
        },
        "content": "     * Insert Persons one by one, cleaning up their entries in the process."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chantca95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    private void insertPersonIntoCsv(Person current, PrintWriter pw) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        String name;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        String phone;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        String email;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        String address;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        String meeting;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        ArrayList\u003cString\u003e stringTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        name \u003d cleanEntry(current.getName().toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        if (current.getPhone().isPresent()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            phone \u003d cleanEntry(current.getPhone().toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            phone \u003d \"\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        if (current.getEmail().isPresent()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            email \u003d cleanEntry(current.getEmail().toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            email \u003d \"\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        if (current.getAddress().isPresent()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            address \u003d cleanEntry(current.getAddress().toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            address \u003d \"\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        meeting \u003d current.getMeeting().toString();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        if (meeting.equals(NO_MEETING_MSG)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            meeting \u003d \"\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        tags \u003d current.getTags();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        for (Tag currentTag : tags) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            String currString \u003d currentTag.toString();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            currString \u003d cleanEntry(currString);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            stringTags.add(currString);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        //write this person to the printwriter"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        pw.print(name + \",\" + phone + \",\" + email + \",\" + address + \",\" + meeting + \",\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        for (String currentTag : stringTags) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            pw.print(currentTag);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            pw.print(\",\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        pw.println();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chantca95"
        },
        "content": "     * Removes commas and Optional[] bracketing from a Person\u0027s contact fields."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chantca95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    private String cleanEntry(String oldStr) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        String newStr \u003d oldStr.replaceAll(\",\", \"\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        newStr \u003d newStr.replaceAll(\"Optional\", \"\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        newStr \u003d newStr.replaceAll(\"\\\\[\", \"\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        newStr \u003d newStr.replaceAll(\"]\", \"\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        return newStr;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    public String getFileName() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        return fileName;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        if ((other instanceof ExportCommand)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            ExportCommand otherEc \u003d (ExportCommand) other;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            return (this.fileName.equals(otherEc.getFileName()));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chantca95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chantca95": 132
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"f\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 42,
      "AyushChatto": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"h\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ShowHelpRequestEvent());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "AyushChatto": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"hs\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e previousCommands \u003d history.getHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "AyushChatto": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ImportCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chantca95"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILE_LOCATION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chantca95"
        },
        "content": "//@@author chantca95"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chantca95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chantca95"
        },
        "content": " * Adds a list of pre-established Valid persons to the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chantca95"
        },
        "content": " * Duplicate contacts will not be added."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chantca95"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chantca95"
        },
        "content": "public class ImportCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"import\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"i\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Import successful!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    public static final String MESSAGE_DUPLICATE \u003d \" Duplicate contacts not imported.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    public static final String MESSAGE_FAIL \u003d \"No contacts imported.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Imports contacts from a CSV file. \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            + \"Parameters: \" + PREFIX_FILE_LOCATION + \"FILE_LOCATION \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            + \"OR leave the path empty to open up a file browser (ie. type import ONLY)\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    public static final String MESSAGE_INVALID_FIELD \u003d \" Contacts with invalid fields not imported.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    public static final String MESSAGE_NAMELESS_CONTACT \u003d \" Contacts without at least a name field not imported.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    private final ArrayList\u003cPerson\u003e personsToAdd;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    private final boolean hasContactWithInvalidField;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    private final boolean hasContactWithoutName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    public ImportCommand(ArrayList\u003cPerson\u003e imports, boolean hasContactWithInvalidField, boolean hasContactWithoutName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        requireNonNull(imports);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        personsToAdd \u003d imports;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        this.hasContactWithInvalidField \u003d hasContactWithInvalidField;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        this.hasContactWithoutName \u003d hasContactWithoutName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chantca95"
        },
        "content": "     * Adds Persons in list to AddressBook."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chantca95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        boolean hasAddedNew \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        boolean hasDuplicate \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        for (int i \u003d 0; i \u003c personsToAdd.size(); i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            if (model.hasPerson(personsToAdd.get(i))) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                hasDuplicate \u003d true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            model.addPerson(personsToAdd.get(i));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            hasAddedNew \u003d true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        if (hasAddedNew) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            model.commitAddressBook();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        //Format the final message acccordingly"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        StringBuilder finalReportMessage \u003d new StringBuilder();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        if (hasAddedNew) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            finalReportMessage.append(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            finalReportMessage.append(MESSAGE_FAIL);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        if (hasDuplicate) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            finalReportMessage.append(MESSAGE_DUPLICATE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        if (hasContactWithInvalidField) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            finalReportMessage.append(MESSAGE_INVALID_FIELD);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        if (hasContactWithoutName) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            finalReportMessage.append(MESSAGE_NAMELESS_CONTACT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        return new CommandResult(finalReportMessage.toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        if ((other instanceof ImportCommand)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            ImportCommand otherIc \u003d (ImportCommand) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            return (personsToAdd.equals(otherIc.personsToAdd)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                \u0026\u0026 hasContactWithoutName \u003d\u003d otherIc.hasContactWithoutName"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                \u0026\u0026 hasContactWithInvalidField \u003d\u003d otherIc.hasContactWithInvalidField);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chantca95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A19Sean": 1,
      "chantca95": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"l\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "AyushChatto": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/MeetingsCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.model.meeting.SameMeetingDayPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "//@@author AyushChatto"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": " * Returns details of meetings scheduled at a particular time."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "public class MeetingsCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"meetings\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"m\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays all persons who have meetings \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            + \"scheduled on the same day, if it is provided. Lists all meetings scheduled otherwise. \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            + \"Parameters: [DD/MM/YY] \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 23/02/18\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    private final SameMeetingDayPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public MeetingsCommand(SameMeetingDayPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "                String.format(Messages.MESSAGE_MEETINGS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "                || (other instanceof MeetingsCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "                \u0026\u0026 predicate.equals(((MeetingsCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AyushChatto": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/PictureCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILE_LOCATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import seedu.address.model.person.Picture;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "//@@author denzelchung"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "denzelchung"
        },
        "content": " * Adds a picture to a contact in the address book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "denzelchung"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "public class PictureCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"pic\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"p\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a picture to a contact in the address book \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        + \"by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        + PREFIX_FILE_LOCATION + \"FILE_LOCATION\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        + PREFIX_FILE_LOCATION + \"johndoe.jpg\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Added picture for Person: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    private final Picture picture;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "     * @param picture of the profile picture"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    public PictureCommand(Index index, Picture picture) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        requireNonNull(picture);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        this.picture \u003d picture;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "                personToEdit.getAddress(), personToEdit.getTags(), personToEdit.getMeeting());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        editedPerson.setPicture(picture);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "denzelchung": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"r\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!model.canRedoAddressBook()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        model.redoAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 31,
      "AyushChatto": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ScheduleCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEETING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.model.person.Picture;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "//@@author AyushChatto"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": " * Schedules a meeting with a person."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "public class ScheduleCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"schedule\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"sch\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public static final String MESSAGE_SCHEDULING_SUCCESS \u003d \"Meeting added\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Schedules a value with the person at the given \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            + \"index number. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            + \"Existing values will be overwritten by new values. \\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            + \"[\" + PREFIX_MEETING + \"MEETING TIME]\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            + PREFIX_MEETING + \"31/12/18 1630\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public static final String MESSAGE_NO_PREFIX \u003d \"No prefix \" + PREFIX_MEETING + \" detected.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    private final Meeting meeting;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public ScheduleCommand(Index index, Meeting meeting) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        requireNonNull(meeting);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        this.meeting \u003d meeting;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        if (model.hasMeeting(meeting)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_CLASHING_MEETINGS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        Person personToSchedule \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        if (!personToSchedule.getMeeting().value.equals(Meeting.NO_MEETING)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            model.deleteMeeting(personToSchedule.getMeeting());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        if (!meeting.value.equals(Meeting.NO_MEETING)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            model.addMeeting(meeting);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        Person scheduledPerson \u003d createScheduledPerson(personToSchedule, meeting);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        model.updatePerson(personToSchedule, scheduledPerson);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SCHEDULING_SUCCESS));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToSchedule}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * updated with the value {@code value}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    private static Person createScheduledPerson(Person personToSchedule, Meeting meeting) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        assert personToSchedule !\u003d null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        Name name \u003d personToSchedule.getName();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        Optional\u003cPhone\u003e phone \u003d personToSchedule.getPhone();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        Optional\u003cEmail\u003e email \u003d personToSchedule.getEmail();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        Optional\u003cAddress\u003e address \u003d personToSchedule.getAddress();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        Set\u003cTag\u003e tags \u003d personToSchedule.getTags();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        Picture picture \u003d personToSchedule.getPicture();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        return new Person(name, phone, email, address, tags, meeting, picture);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AyushChatto": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Selects a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Selects the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e filteredPersonList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredPersonList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 56,
      "AyushChatto": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/TagCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import seedu.address.model.tag.PersonContainsTagPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "//@@author A19Sean"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A19Sean"
        },
        "content": " * Finds and lists all persons in address book whose tag matches the argument keyword."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A19Sean"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A19Sean"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "public class TagCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"tag\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"t\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            + \": View, edit or delete all contacts with a specified (case-sensitive) tag.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            + \"Parameters for view or delete functionality: TAG [MORE TAGS]... [delete]\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            + \"Parameters for edit functionality: edit EXISTING_TAG NEW_TAG\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" Work Friends Important\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            + \"will list out all users with \\\"Work\\\", \\\"Friends\\\" or \\\"Important\\\" tags.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" Work Friends Important delete\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            + \"will delete all \\\"Work\\\", \\\"Friends\\\" and \\\"Important\\\" tags from contacts.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" edit Work Colleague\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            + \"will change the \\\"Work\\\" tag to \\\"Colleage\\\" for all tagged contacts.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "     * Enums for the possible actions that can be performed from a tag command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    public enum Action {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        FIND,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        DELETE,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        EDIT"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    private final PersonContainsTagPredicate predicate;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    private final Action action;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    private final List\u003cString\u003e tags;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    public TagCommand(PersonContainsTagPredicate predicate, Action action, List\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        this.action \u003d action;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        String message;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        if (this.action \u003d\u003d Action.DELETE) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            message \u003d Messages.MESSAGE_TAG_DELETED_OVERVIEW;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            List\u003cPerson\u003e currentList \u003d new ArrayList\u003c\u003e(model.getFilteredPersonList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            List\u003cPerson\u003e updatedList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            currentList.forEach(person -\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                Set\u003cTag\u003e personTags \u003d new HashSet\u003c\u003e(person.getTags());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                for (String tag: tags) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                    Tag tagToBeDeleted \u003d new Tag(tag);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                    if (personTags.contains(tagToBeDeleted)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                        personTags.remove(tagToBeDeleted);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                Person editedPerson \u003d new Person(person.getName(), person.getPhone(), person.getEmail(),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                        person.getAddress(), personTags, person.getMeeting(), person.getPicture());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                updatedList.add(editedPerson);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                model.updatePerson(person, editedPerson);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            });"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            model.updateFilteredPersonList(new PersonIsUntaggedPredicate(updatedList));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            model.commitAddressBook();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        } else if (this.action \u003d\u003d Action.EDIT) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            message \u003d Messages.MESSAGE_TAG_EDITED_OVERVIEW;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            List\u003cPerson\u003e currentList \u003d new ArrayList\u003c\u003e(model.getFilteredPersonList());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            List\u003cPerson\u003e updatedList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            currentList.forEach(person -\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                Set\u003cTag\u003e personTags \u003d new HashSet\u003c\u003e(person.getTags());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                Tag tagToBeDeleted \u003d new Tag(tags.get(0));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                Tag tagToBeAdded \u003d new Tag(tags.get(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                if (personTags.contains(tagToBeDeleted)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                    personTags.remove(tagToBeDeleted);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                    personTags.add(tagToBeAdded);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                Person editedPerson \u003d new Person(person.getName(), person.getPhone(), person.getEmail(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                        person.getAddress(), personTags, person.getMeeting(), person.getPicture());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                updatedList.add(editedPerson);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                model.updatePerson(person, editedPerson);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            });"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            model.updateFilteredPersonList(new PersonIsUntaggedPredicate(updatedList));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            model.commitAddressBook();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            message \u003d Messages.MESSAGE_TAGGED_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        if (this.action \u003d\u003d Action.DELETE || this.action \u003d\u003d Action.FIND) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            return new CommandResult(String.format(message, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            return new CommandResult(String.format(message, model.getFilteredPersonList().size(), tags.get(0),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                    tags.get(1)));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                || (other instanceof TagCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                \u0026\u0026 predicate.equals(((TagCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "     * Tests that a {@code Person} has just been untagged."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    private class PersonIsUntaggedPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        private final List\u003cPerson\u003e persons;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        private PersonIsUntaggedPredicate(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            this.persons \u003d persons;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        public boolean test(Person person) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            return persons.stream()"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                    .anyMatch(p -\u003e p.equals(person));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                    || (other instanceof PersonIsUntaggedPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                    \u0026\u0026 persons.equals(((PersonIsUntaggedPredicate) other).persons)); // state check"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A19Sean": 146
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previous state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"u\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!model.canUndoAddressBook()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 31,
      "AyushChatto": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        //@@author zioul123"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        Optional\u003cString\u003e inputPhoneString \u003d argMultimap.getValue(PREFIX_PHONE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        Optional\u003cPhone\u003e phone \u003d inputPhoneString.isPresent()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                ? Optional.of(ParserUtil.parsePhone(inputPhoneString.get()))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                : Optional.empty();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        Optional\u003cString\u003e inputEmailString \u003d argMultimap.getValue(PREFIX_EMAIL);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        Optional\u003cEmail\u003e email \u003d inputEmailString.isPresent()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                ? Optional.of(ParserUtil.parseEmail(inputEmailString.get()))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                : Optional.empty();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        Optional\u003cString\u003e inputAddressString \u003d argMultimap.getValue(PREFIX_ADDRESS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        Optional\u003cAddress\u003e address \u003d inputAddressString.isPresent()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                ? Optional.of(ParserUtil.parseAddress(inputAddressString.get()))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                : Optional.empty();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new Person(name, phone, email, address, tagList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zioul123": 20,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.logic.commands.MeetingsCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import seedu.address.logic.commands.PictureCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import seedu.address.logic.commands.TagCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        case AddCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        case EditCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        case SelectCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        case DeleteCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        case ClearCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        case FindCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        case ListCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        case HistoryCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        case ExitCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        case ExportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        case ExportCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            return new ExportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        case HelpCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        case UndoCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        case RedoCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        case PictureCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        case PictureCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "            return new PictureCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        //@@author chantca95"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        case ImportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        case ImportCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            return new ImportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        case ScheduleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        case ScheduleCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            return new ScheduleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        case MeetingsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        case MeetingsCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            return new MeetingsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        //@@author A19Sean"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        case TagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        case TagCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            return new TagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A19Sean": 7,
      "-": 92,
      "AyushChatto": 21,
      "denzelchung": 5,
      "chantca95": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    public static final Prefix PREFIX_FILE_LOCATION \u003d new Prefix(\"l/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public static final Prefix PREFIX_MEETING \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "denzelchung": 1,
      "AyushChatto": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.logic.IndexParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.logic.commands.DeleteByNameCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an DeleteCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        //@@author zioul123"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // There must be an index or String provided"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        if (args.trim().isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zioul123"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        Optional\u003cIndex\u003e index \u003d IndexParserUtil.getIndex(args); // This method will trim args on its own"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // Command provided an index but index was rejected"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        if (!index.isPresent() \u0026\u0026 StringUtil.isInteger(args.trim())) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zioul123"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // Decide which command to return based on whether the user input was an index or a string"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        return index.map(DeleteCommand::new)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                .orElseGet(() -\u003e new DeleteByNameCommand(args));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zioul123": 24,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import static seedu.address.logic.commands.EditCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.logic.IndexParserUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.logic.commands.EditByNameCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        String preamble \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        //@@author zioul123"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // There must be either an index or string in the preamble"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        if (preamble.isEmpty()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zioul123"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        Optional\u003cIndex\u003e index \u003d IndexParserUtil.getIndex(preamble);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // The command used an index and not a string, but the index was rejected."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        if (!index.isPresent() \u0026\u0026 StringUtil.isInteger(preamble)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zioul123"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // Decide which command to use based on whether the user input was an index or a string"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        return index.map(idx -\u003e new EditCommand(idx, editPersonDescriptor))"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                .orElseGet(() -\u003e new EditByNameCommand(preamble, editPersonDescriptor));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zioul123": 22,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ExportCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chantca95"
        },
        "content": "//@@author chantca95"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chantca95"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chantca95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chantca95"
        },
        "content": " * Parses the user\u0027s given file name, then creates a new ExportCommand with the given file name"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chantca95"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chantca95"
        },
        "content": "public class ExportCommandParser implements Parser\u003cExportCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chantca95"
        },
        "content": "     * Checks if the user\u0027s given file name contains the .csv suffix, and displays an error message if it does not."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chantca95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    public ExportCommand parse(String fileName) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        int length \u003d fileName.length();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        //checks whether the user\u0027s input ends with .csv"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        if (length \u003c 5) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        if (!fileName.substring(length - 4, length).equals(\".csv\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        String trimmedFileName \u003d fileName.trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        File temp \u003d new File(trimmedFileName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        if (temp.exists()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            throw new ParseException(ExportCommand.MESSAGE_DUPLICATE_FILE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        return new ExportCommand(trimmedFileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chantca95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chantca95": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ImportCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chantca95"
        },
        "content": "//@@author chantca95"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chantca95"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILE_LOCATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import javafx.stage.FileChooser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chantca95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chantca95"
        },
        "content": " * Directs user to choose a file, then reads from the file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chantca95"
        },
        "content": " * Prepares a list of Persons to add to the address book."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chantca95"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chantca95"
        },
        "content": "public class ImportCommandParser implements Parser\u003cImportCommand\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    private static final int NAME_FIELD \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    private static final int PHONE_FIELD \u003d 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    private static final int EMAIL_FIELD \u003d 2;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    private static final int ADDRESS_FIELD \u003d 3;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    private static final int MEETING_FIELD \u003d 4;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    private static final int TAG_FIELD_START \u003d 5;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    private ArrayList\u003cPerson\u003e persons;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chantca95"
        },
        "content": "     * Creates a new ImportCommandParser with an empty ArrayList of Persons to be added."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chantca95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    public ImportCommandParser() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chantca95"
        },
        "content": "     * Starts the import process by directing users to choose a file."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chantca95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    public ImportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        if (args.isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            return parseFile(getFileFromFileBrowser());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            return parseFile(getFileFromArgs(args));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chantca95"
        },
        "content": "     * Parses the selected csv file pointed to by the user\u0027s input."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chantca95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    private File getFileFromArgs(String args) throws ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_FILE_LOCATION);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_FILE_LOCATION).isPresent()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        Path fileLocation \u003d ParserUtil.parseCsv(argMultimap.getValue(PREFIX_FILE_LOCATION).get());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        return fileLocation.toFile();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    private File getFileFromFileBrowser() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        FileChooser fileChooser \u003d new FileChooser();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        fileChooser.setTitle(\"Select .csv file\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        fileChooser.getExtensionFilters().add(new FileChooser.ExtensionFilter(\"CSV\", \"*.csv\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        fileChooser.getExtensionFilters().add(new FileChooser.ExtensionFilter(\"TEXT\", \"*.txt\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        File file \u003d fileChooser.showOpenDialog(new Stage());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        return file;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chantca95"
        },
        "content": "     * Parses the selected csv file."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chantca95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    public ImportCommand parseFile(File file) throws ParseException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        FileReader fr;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            fr \u003d new FileReader(file);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        } catch (FileNotFoundException fnfe) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            throw new ParseException(\"File not found\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        BufferedReader br \u003d new BufferedReader(fr);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        return parseLinesFromFile(br);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chantca95"
        },
        "content": "     * Reads every row of the chosen csv file."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chantca95"
        },
        "content": "     * Contacts with wrongly formatted fields and/or without Name fields are ignored."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chantca95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    private ImportCommand parseLinesFromFile(BufferedReader br) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        boolean hasContactWithInvalidField \u003d false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        boolean hasContactWithoutName \u003d false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            String line \u003d br.readLine();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            while (line !\u003d null) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                String[] attributes \u003d line.split(\",\", -1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                int numAttributes \u003d attributes.length;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                if (attributes[NAME_FIELD].equalsIgnoreCase(\"Name\")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                        || attributes[NAME_FIELD].equalsIgnoreCase(\"Name:\")) { // ignore headers"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                    line \u003d br.readLine();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                if (contactHasNoName(attributes, numAttributes)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                    hasContactWithoutName \u003d true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                    line \u003d br.readLine();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                Name name \u003d null;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                Optional\u003cPhone\u003e phone \u003d Optional.empty();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                Optional\u003cEmail\u003e email \u003d Optional.empty();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                Optional\u003cAddress\u003e address \u003d Optional.empty();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                Meeting meeting \u003d null;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                    name \u003d ParserUtil.parseName(attributes[NAME_FIELD]);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                    if (!attributes[PHONE_FIELD].matches(\"\")) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                        phone \u003d Optional.of(ParserUtil.parsePhone(attributes[PHONE_FIELD]));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                    if (!attributes[EMAIL_FIELD].matches(\"\")) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                        email \u003d Optional.of(ParserUtil.parseEmail(attributes[EMAIL_FIELD]));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                    if (!attributes[ADDRESS_FIELD].matches(\"\")) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                        address \u003d Optional.of(ParserUtil.parseAddress(attributes[ADDRESS_FIELD]));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                    if (!attributes[MEETING_FIELD].matches(\"\")) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                        meeting \u003d ParserUtil.parseMeeting(attributes[MEETING_FIELD]);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                } catch (ParseException pe) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                    hasContactWithInvalidField \u003d true;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                    line \u003d br.readLine();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                ArrayList\u003cString\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                //Check for tags"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                if (numAttributes \u003e TAG_FIELD_START) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                    for (int i \u003d TAG_FIELD_START; i \u003c numAttributes; i++) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                        if (!attributes[i].matches(\"\")) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                            tags.add(attributes[i]);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                Set\u003cTag\u003e tagList \u003d null;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                    tagList \u003d ParserUtil.parseTags(tags);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                } catch (ParseException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                    line \u003d br.readLine();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                if (meeting \u003d\u003d null) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                    persons.add(new Person(name, phone, email, address, tagList));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                    persons.add(new Person(name, phone, email, address, tagList, meeting));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                line \u003d br.readLine();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            br.close();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            ioe.printStackTrace();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        return new ImportCommand(persons, hasContactWithInvalidField, hasContactWithoutName);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        this method checks if the compulsory name field is filled up."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    private boolean contactHasNoName(String[] attributes, int numAttributes) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        if (attributes[0].matches(\"\")) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chantca95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chantca95": 190
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MeetingsCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.logic.commands.MeetingsCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.model.meeting.SameMeetingDayPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "//@@author AyushChatto"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": " * Parses input arguments and creates a new MeetingsCommand object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "public class MeetingsCommandParser implements Parser\u003cMeetingsCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MeetingsCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * and returns an MeetingsCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public MeetingsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        Meeting meeting;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            return new MeetingsCommand(new SameMeetingDayPredicate(new Meeting(Meeting.NO_MEETING)));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        String paddedArgs \u003d args + \"0000\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            meeting \u003d ParserUtil.parseMeeting(paddedArgs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            return new MeetingsCommand(new SameMeetingDayPredicate(meeting));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MeetingsCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AyushChatto": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Parser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chantca95"
        },
        "content": " * Represents a Parser that is able to parseFileFromArgs user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "chantca95": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import seedu.address.model.person.Picture;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    //@@author AyushChatto"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * Parses a {@code String meeting} into a {@code Meeting}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * @throws ParseException if the given {@code value} is invalid."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public static Meeting parseMeeting(String meeting) throws ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        requireNonNull(meeting);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        String trimmedMeeting \u003d meeting.trim();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        trimmedMeeting \u003d Meeting.formatMeeting(trimmedMeeting);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        if (!Meeting.isValidMeeting(trimmedMeeting)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            throw new ParseException(Meeting.MESSAGE_MEETING_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        return new Meeting(trimmedMeeting);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * Parses a {@code String fileLocation} into a {@code Path}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * @throws ParseException if the given {@code fileLocation} is invalid."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public static Picture parseFileLocation(String fileLocation) throws ParseException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        requireNonNull(fileLocation);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        String trimmedFileLocation \u003d fileLocation.trim();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        if (trimmedFileLocation.equals(Picture.DEFAULT_PICTURE_URL.getPath())) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            return new Picture(trimmedFileLocation);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        if (!Picture.isValidPicture(trimmedFileLocation)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            if (Picture.isValidPictureInDirectory(trimmedFileLocation)) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "                return new Picture(Picture.getDirectoryPath(trimmedFileLocation));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            // not valid and not in directory"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            throw new ParseException(Picture.MESSAGE_PICTURE_CONSTRAINTS);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        return new Picture(Picture.getPath(trimmedFileLocation));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * Parses a {@code String csvFileLocation} into a {@code Path}."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * @throws ParseException if the given {@code fileLocation} is invalid."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public static Path parseCsv(String fileLocation) throws ParseException {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        requireNonNull(fileLocation);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        String trimmedFileLocation \u003d fileLocation.trim();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        Path path \u003d Paths.get(trimmedFileLocation);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        return path;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 97,
      "denzelchung": 3,
      "AyushChatto": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/PictureCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILE_LOCATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import seedu.address.logic.commands.PictureCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import seedu.address.model.person.Picture;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "//@@author denzelchung"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "denzelchung"
        },
        "content": " * Parses input arguments and creates a new PictureCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "denzelchung"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "public class PictureCommandParser implements Parser\u003cPictureCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the PictureCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "     * and returns an PictureCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    public PictureCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_FILE_LOCATION);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, PictureCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_FILE_LOCATION).isPresent()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, PictureCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        Picture picture \u003d ParserUtil.parseFileLocation(argMultimap.getValue(PREFIX_FILE_LOCATION).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        return new PictureCommand(index, picture);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "denzelchung": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ScheduleCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEETING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "//@@author AyushChatto"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": " * Parses input arguments and creates a new ScheduleCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "public class ScheduleCommandParser implements Parser\u003cScheduleCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public ScheduleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MEETING);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        Meeting meeting;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            if (argMultimap.getValue(PREFIX_MEETING).isPresent()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "                meeting \u003d ParserUtil.parseMeeting(argMultimap.getValue(PREFIX_MEETING).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "                return new ScheduleCommand(index, meeting);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "                throw new ParseException(ScheduleCommand.MESSAGE_NO_PREFIX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AyushChatto": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TagCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import seedu.address.logic.commands.TagCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import seedu.address.model.tag.PersonContainsTagPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "//@@author A19Sean"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A19Sean"
        },
        "content": " * Parses input arguments and creates a new TagCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A19Sean"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "public class TagCommandParser implements Parser\u003cTagCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the TagCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "     * and returns a TagCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    public TagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        String[] splitArgs \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        if (trimmedArgs.isEmpty() || (splitArgs[0].equalsIgnoreCase(\"edit\") \u0026\u0026 splitArgs.length !\u003d 3)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        TagCommand.Action action;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        String[] tagKeywords;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        if (splitArgs[splitArgs.length - 1].equalsIgnoreCase(\"delete\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            action \u003d TagCommand.Action.DELETE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            tagKeywords \u003d Arrays.copyOfRange(splitArgs, 0, splitArgs.length - 1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        } else if (splitArgs[0].equalsIgnoreCase(\"edit\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            action \u003d TagCommand.Action.EDIT;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            tagKeywords \u003d Arrays.copyOfRange(splitArgs, 1, splitArgs.length);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            action \u003d TagCommand.Action.FIND;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            tagKeywords \u003d splitArgs;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        if (action \u003d\u003d TagCommand.Action.DELETE || action \u003d\u003d TagCommand.Action.FIND) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            return new TagCommand(new PersonContainsTagPredicate(Arrays.asList(tagKeywords)), action,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                    Arrays.asList(tagKeywords));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            return new TagCommand(new PersonContainsTagPredicate(Arrays.asList(tagKeywords[0])), action,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                    Arrays.asList(tagKeywords));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A19Sean": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/exceptions/ParseException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chantca95"
        },
        "content": " * Represents a parseFileFromArgs error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 16,
      "chantca95": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.model.meeting.UniqueMeetingList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    private final UniqueMeetingList meetings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chantca95"
        },
        "content": "     * Note that non-static parse blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        meetings \u003d new UniqueMeetingList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * Replaces the contents of the meetings list with {@code meetings}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * {@code meetings} must not contain clashing meetings."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public void setMeetings(List\u003cMeeting\u003e meetings) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        this.meetings.setMeetings(meetings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        setMeetings(newData.getMeetingList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public ObservableList\u003cMeeting\u003e getMeetingList() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        return meetings.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * Returns true if a meeting with the same timing as {@code meeting} exists in the address book."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public boolean hasMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        requireNonNull(meeting);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        return meetings.contains(meeting);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * Removes {@code target} from this {@code AddressBook}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public void removeMeeting(Meeting target) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        meetings.remove(target);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * Adds a meeting to the address book."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * The meeting must not already exist in the address book."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public void addMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        meetings.add(meeting);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 120,
      "AyushChatto": 45,
      "chantca95": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    void resetData(ReadOnlyAddressBook newData);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    void updatePerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canUndoAddressBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canRedoAddressBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitAddressBook();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * Returns true if a meeting with the same timing as {@code meeting} exists in the address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    boolean hasMeeting(Meeting meeting);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * Deletes the given meeting."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * The meeting must exist in the address book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    void deleteMeeting(Meeting target);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * Adds the given meeting."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * {@code meeting} must not already exist in the address book."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    void addMeeting(Meeting meeting);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 78,
      "AyushChatto": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.resetData(newData);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private void indicateAddressBookChanged() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new AddressBookChangedEvent(versionedAddressBook));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.hasPerson(person);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.removePerson(target);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.addPerson(person);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.updatePerson(target, editedPerson);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredPersons);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Meetings \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * Returns true if a meeting with the same timing as {@code meeting} exists in the address book."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public boolean hasMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        requireNonNull(meeting);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        return versionedAddressBook.hasMeeting(meeting);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * Deletes the given meeting."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * The meeting must exist in the address book."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public void deleteMeeting(Meeting target) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        versionedAddressBook.removeMeeting(target);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * Adds the given meeting."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * {@code meeting} must not already exist in the address book."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public void addMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        versionedAddressBook.addMeeting(meeting);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 150,
      "AyushChatto": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * Returns an unmodifiable view of the meetings list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * This list will not contain any clashing meetings."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    ObservableList\u003cMeeting\u003e getMeetingList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "AyushChatto": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/Meeting.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "//@@author AyushChatto"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": " * Represents a value that the user has scheduled with the client."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "public class Meeting {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public static final String MESSAGE_MEETING_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            \"Meeting should only contain a date and time in DD/MM/YY HHMM format\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public static final String MEETING_VALIDATION_REGEX \u003d \"\\\\d{10}\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public static final String NO_MEETING \u003d \"0000000000\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public static final String NO_MEETING_MSG \u003d \"No meeting scheduled\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * Constructs a {@code Meeting}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * @param meeting A valid value time."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public Meeting(String meeting) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        requireNonNull(meeting);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        checkArgument(isValidMeeting(meeting), MESSAGE_MEETING_CONSTRAINTS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        value \u003d meeting;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * Formats meetings to meet the standard entry format by removing special characters"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public static String formatMeeting(String uneditedMeeting) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        String editedMeeting \u003d \"\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        for (int i \u003d 0; i \u003c uneditedMeeting.length(); i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            if (Character.isDigit(uneditedMeeting.charAt(i))) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "                editedMeeting +\u003d uneditedMeeting.charAt(i);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        return editedMeeting;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * Returns true if a given string is a valid value."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public static boolean isValidMeeting(String test) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        if (test.equals(NO_MEETING)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        String formattedTest \u003d formatMeeting(test);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        if (formattedTest.matches(MEETING_VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "                DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"ddMMuu\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "                        .withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "                LocalDate.parse(formattedTest.substring(0, 6), dateFormatter);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "                DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"HHmm\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "                        .withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "                LocalTime.parse(formattedTest.substring(6, 10), timeFormatter);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * Returns a string representing the date of the meeting"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public String getDay() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        return value.substring(0, 6);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * Returns true if {@code meeting} is on the same day."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public boolean isSameDay(Meeting meeting) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        return getDay().equals(meeting.getDay());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        if (value.equals(NO_MEETING)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            return NO_MEETING_MSG;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        sb.append(\" \" + value.substring(0, 2) + \"/\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "                + value.substring(2, 4) + \"/\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "                + value.substring(4, 6) + \" at \""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "                + value.substring(6, 8)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "                + value.substring(8, 10));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "                || (other instanceof Meeting // instanceof handles nulls"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "                \u0026\u0026 value.equals(((Meeting) other).value)); // state check"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AyushChatto": 115
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/SameMeetingDayPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "//@@author AyushChatto"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Meeting} is on the same day as the meeting given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "public class SameMeetingDayPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    private final Meeting meeting;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public SameMeetingDayPredicate(Meeting meeting) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        this.meeting \u003d meeting;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        if (meeting.value.equals(Meeting.NO_MEETING)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            return !person.getMeeting().value.equals(Meeting.NO_MEETING);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            return meeting.isSameDay(person.getMeeting());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AyushChatto": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/UniqueMeetingList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.model.meeting.exceptions.DuplicateMeetingException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.model.meeting.exceptions.MeetingNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "//@@author AyushChatto"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": " * A list of meetings that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "public class UniqueMeetingList implements Iterable\u003cMeeting\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    private final ObservableList\u003cMeeting\u003e allMeetings \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * Returns true if the list contains an equivalent value as the given argument."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public boolean contains(Meeting toCheck) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        return allMeetings.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * Adds a value to the list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * No value at the same time can exist in the list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public void add(Meeting toAdd) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            throw new DuplicateMeetingException();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        allMeetings.add(toAdd);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * Replaces the value {@code target} in the list with {@code editedMeeting}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public void setMeeting(Meeting target, Meeting editedMeeting) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        requireAllNonNull(target, editedMeeting);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        int index \u003d allMeetings.indexOf(target);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            throw new MeetingNotFoundException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        allMeetings.set(index, editedMeeting);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * Replaces the contents of this list with {@code meetings}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * {@code meetings} must not contain duplicate meetings."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public void setMeetings(List\u003cMeeting\u003e meetings) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        requireAllNonNull(meetings);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        if (!meetingsAreUnique(meetings)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            throw new DuplicateMeetingException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        allMeetings.setAll(meetings);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * Removes the equivalent value from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * The value must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public void remove(Meeting toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        if (!allMeetings.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            throw new MeetingNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public Iterator\u003cMeeting\u003e iterator() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        return allMeetings.iterator();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public ObservableList\u003cMeeting\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        return FXCollections.unmodifiableObservableList(allMeetings);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * Returns true if {@code meetings} contains only unique meetings."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    private boolean meetingsAreUnique(List\u003cMeeting\u003e meetings) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        for (int i \u003d 0; i \u003c meetings.size() - 1; i++) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            for (int j \u003d i + 1; j \u003c meetings.size(); j++) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "                if (meetings.get(i).equals(meetings.get(j))) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "                }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AyushChatto": 107
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/exceptions/DuplicateMeetingException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "package seedu.address.model.meeting.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "//@@author AyushChatto"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": " * Signals that the operation will result in duplicate Meetings (Meetings are considered duplicte if they are at the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": " * same time)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "public class DuplicateMeetingException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public DuplicateMeetingException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        super(\"There is already a value at the given time\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AyushChatto": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/exceptions/MeetingNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "package seedu.address.model.meeting.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "//@@author AyushChatto"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": " * Signals that the operation is unable to find the specified value."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "public class MeetingNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AyushChatto": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Address.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public static final String NO_ADDRESS \u003d \"NO_ADDRESS\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(ADDRESS_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zioul123": 1,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Email.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public static final String NO_EMAIL \u003d \"NOEMAIL@NOEMAIL.NOEMAIL\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EMAIL_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(EMAIL_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zioul123": 1,
      "-": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/NameContainsAllKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zioul123"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zioul123"
        },
        "content": "//@@author zioul123"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zioul123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zioul123"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches all of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zioul123"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zioul123"
        },
        "content": "public class NameContainsAllKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public NameContainsAllKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                .allMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                || (other instanceof NameContainsAllKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsAllKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zioul123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zioul123": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zioul123"
        },
        "content": " * Guarantees: details are present and not null, but details other than name are optional, field values are"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "denzelchung"
        },
        "content": " * validated, immutable. Only the picture field is mutable as users are able to change the profile picture."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    private final Optional\u003cPhone\u003e phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    private final Optional\u003cEmail\u003e email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    private final Optional\u003cAddress\u003e address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    private Picture picture;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    private final Meeting meeting;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public Person(Name name, Optional\u003cPhone\u003e phone, Optional\u003cEmail\u003e email, Optional\u003cAddress\u003e address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        this.picture \u003d new Picture(Picture.DEFAULT_PICTURE_URL.getPath());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        this.meeting \u003d new Meeting(Meeting.NO_MEETING);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    //@@author AyushChatto"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * Constructor for scheduling a value. Not to be used for creating a new entry in the"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * address book."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public Person(Name name, Optional\u003cPhone\u003e phone, Optional\u003cEmail\u003e email, Optional\u003cAddress\u003e address,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "                  Set\u003cTag\u003e tags, Meeting meeting) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags, meeting);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        this.picture \u003d new Picture(Picture.DEFAULT_PICTURE_URL.getPath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        this.meeting \u003d meeting;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    //@@author AyushChatto"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * Constructor for retaining pictures."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public Person(Name name, Optional\u003cPhone\u003e phone, Optional\u003cEmail\u003e email, Optional\u003cAddress\u003e address,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "                  Set\u003cTag\u003e tags, Meeting meeting, Picture picture) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags, meeting);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        this.picture \u003d picture;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        this.meeting \u003d meeting;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    //@@author AyushChatto"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public Meeting getMeeting() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        return meeting;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    //@@author denzelchung"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    public Picture getPicture() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        return picture;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    public void setPicture(Picture picture) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        this.picture \u003d picture;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        //@@author zioul123"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // The other person must exist and have the same name to be the same person"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        if (otherPerson \u003d\u003d null || !otherPerson.getName().equals(getName())) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zioul123"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        boolean bothHavePhone \u003d getPhone().isPresent() \u0026\u0026 otherPerson.getPhone().isPresent();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        boolean bothHaveEmail \u003d getEmail().isPresent() \u0026\u0026 otherPerson.getEmail().isPresent();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // Do not compare fields unless they are present"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        return ((bothHavePhone \u0026\u0026 otherPerson.getPhone().equals(getPhone()))"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                || (bothHaveEmail \u0026\u0026 otherPerson.getEmail().equals(getEmail())));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags())"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "                \u0026\u0026 otherPerson.getMeeting().equals(getMeeting());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags, picture);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        builder.append(getName());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        builder.append(\" Phone: \");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        getPhone().ifPresentOrElse(builder::append, () -\u003e builder.append(\"None\"));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        builder.append(\" Email: \");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        getEmail().ifPresentOrElse(builder::append, () -\u003e builder.append(\"None\"));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        builder.append(\" Address: \");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        getAddress().ifPresentOrElse(builder::append, () -\u003e builder.append(\"None\"));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        builder.append(\" Meeting: \")"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "                .append(getMeeting().toString());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        builder.append(\" Picture: \")"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "                .append(getPicture());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        builder.append(\" Tags: \");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zioul123": 25,
      "-": 85,
      "AyushChatto": 72,
      "denzelchung": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Phone.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public static final String NO_PHONE \u003d \"000000000000\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PHONE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(PHONE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zioul123": 1,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Picture.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "//@@author denzelchung"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "denzelchung"
        },
        "content": " * Represents a Person\u0027s picture in the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "denzelchung"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPicture(String)}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "denzelchung"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "public class Picture {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    // https://www.stubbornjava.com/posts/reading-file-resources-with-guava"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    public static final URL DEFAULT_PICTURE_URL \u003d com.google.common.io.Resources"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        .getResource(\"images/placeholder_image.jpg\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    public static final String MESSAGE_PICTURE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        \"Picture should be a valid file path\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "     * Regular expression validation for path."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    public static final String PICTURE_PATH_WIN_VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        \"([a-zA-Z]:)?((\\\\\\\\|/)[a-zA-Z0-9_.-]+)+(\\\\\\\\|/)?\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    public static final String DEFAULT_PATH_WIN_VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        \"/\" + PICTURE_PATH_WIN_VALIDATION_REGEX;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    public static final String PICTURE_PATH_MAC_VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        \"^((?!.*//.*)(?!.*/ .*)/{1}([^\\\\\\\\(){}:\\\\*\\\\?\u003c\u003e\\\\|\\\\\\\"\\\\\u0027])+\\\\.(jpg|png))$\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    public final String picture;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "     * Constructs an {@code Picture}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "     * @param picture A valid picture."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    public Picture(String picture) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        requireNonNull(picture);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        if (!isValidPicture(picture)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "            this.picture \u003d DEFAULT_PICTURE_URL.getPath();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "            this.picture \u003d picture;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "     * Returns the current directory concatenated with the given path."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    public static String getDirectoryPath(String path) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        return Paths.get(System.getProperty(\"user.dir\") + \"/\" + path).toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "     * Returns the path generated by the Path class."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "     * Removes additional slashes \u0027/\u0027 in the given unformattedPath."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    public static String getPath(String unformattedPath) throws ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "            Path path \u003d Paths.get(unformattedPath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "            return path.toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "            throw new ParseException(Picture.MESSAGE_PICTURE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "     * Returns true if a given string is a valid picture."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    public static boolean isValidPicture(String test) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        if (test.equals(DEFAULT_PICTURE_URL.getPath())) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        if (test.matches(DEFAULT_PATH_WIN_VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "            test \u003d test.substring(1, test.length());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        return ((test.endsWith(\".jpg\") || test.endsWith(\".png\"))"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "            \u0026\u0026 (Files.exists(Paths.get(test))));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "     * Returns true if a given string is a valid picture in the current directory."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    public static boolean isValidPictureInDirectory(String test) throws ParseException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "            String directoryPath \u003d getDirectoryPath(test);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "            Path path \u003d Paths.get(directoryPath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "            return Files.exists(path);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "            throw new ParseException(Picture.MESSAGE_PICTURE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        return picture;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "            || (other instanceof Picture // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "            \u0026\u0026 picture.equals(((Picture) other).picture)); // state check"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        return picture.hashCode();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "denzelchung": 119
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/PersonContainsTagPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "//@@author A19Sean"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A19Sean"
        },
        "content": " * Tests that a {@code Person} contains any of the tags given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A19Sean"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "public class PersonContainsTagPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    private final List\u003cString\u003e tags;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    public PersonContainsTagPredicate(List\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        return tags.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                .anyMatch(tagName -\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                    Tag tag \u003d new Tag(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                    return person.getTags().contains(tag);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                });"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                || (other instanceof PersonContainsTagPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                \u0026\u0026 tags.equals(((PersonContainsTagPredicate) other).tags)); // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A19Sean": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zioul123"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), Optional.of(new Phone(\"87438807\")),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                Optional.of(new Email(\"alexyeoh@example.com\")),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                Optional.of(new Address(\"Blk 30 Geylang Street 29, #06-40\")), getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zioul123"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), Optional.of(new Phone(\"99272758\")),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                Optional.of(new Email(\"berniceyu@example.com\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                Optional.of(new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\")),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zioul123"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), Optional.of(new Phone(\"93210283\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                Optional.of(new Email(\"charlotte@example.com\")),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                Optional.of(new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zioul123"
        },
        "content": "            new Person(new Name(\"David Li\"), Optional.of(new Phone(\"91031282\")),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                Optional.of(new Email(\"lidavid@example.com\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                Optional.of(new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"family\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zioul123"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), Optional.of(new Phone(\"92492021\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                Optional.of(new Email(\"irfan@example.com\")),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                Optional.of(new Address(\"Blk 47 Tampines Street 20, #17-35\")),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zioul123"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), Optional.of(new Phone(\"92624417\")),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                Optional.of(new Email(\"royb@example.com\")),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                Optional.of(new Address(\"Blk 45 Aljunied Street 85, #11-31\")),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zioul123": 19,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AddressBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.AddressBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "     * Saves the address book in a fixed temporary location."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 45,
      "denzelchung": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager extends ComponentManager implements Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            saveAddressBook(event.data);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        addressBookStorage.backupAddressBook(addressBook);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 93,
      "denzelchung": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedMeeting.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": " * JAXB-friendly version of the Meeting."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "public class XmlAdaptedMeeting {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    private String meeting;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * Constructs an XmlAdaptedMeeting."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public XmlAdaptedMeeting() {}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * Constructs a {@code XmlAdaptedMeeting} with the given {@code meeting}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public XmlAdaptedMeeting(String meeting) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        this.meeting \u003d meeting;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * Converts a given Meeting into this class for JAXB use."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public XmlAdaptedMeeting(Meeting source) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        meeting \u003d source.value;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * Converts this jaxb-friendly adapted meeting object into the model\u0027s Meeting object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted meeting"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public Meeting toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        if (!Meeting.isValidMeeting(meeting)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            throw new IllegalValueException(Meeting.MESSAGE_MEETING_CONSTRAINTS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        return new Meeting(meeting);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AyushChatto": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import seedu.address.model.person.Picture;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly version of the Person."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPerson {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private String phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    private String meeting;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    private String picture;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedPerson."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson() {}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code XmlAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson(String name, String phone, String email, String address, List\u003cXmlAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Person into this class for JAXB use."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedPerson"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        phone \u003d source.getPhone().isPresent() ? source.getPhone().get().value : Phone.NO_PHONE;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        email \u003d source.getEmail().isPresent() ? source.getEmail().get().value : Email.NO_EMAIL;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        address \u003d source.getAddress().isPresent() ? source.getAddress().get().value : Address.NO_ADDRESS;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged \u003d source.getTags().stream()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        meeting \u003d source.getMeeting().value;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        picture \u003d source.getPicture().picture;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        final Optional\u003cPhone\u003e modelPhone \u003d Optional.ofNullable("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                phone.equals(Phone.NO_PHONE) ? null : new Phone(phone));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        final Optional\u003cEmail\u003e modelEmail \u003d Optional.ofNullable("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                email.equals(Email.NO_EMAIL) ? null : new Email(email));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        final Optional\u003cAddress\u003e modelAddress \u003d Optional.ofNullable("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                address.equals(Address.NO_ADDRESS) ? null : new Address(address));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        if (meeting \u003d\u003d null) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Meeting.class.getSimpleName()));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        if (!Meeting.isValidMeeting(meeting)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            throw new IllegalValueException(Meeting.MESSAGE_MEETING_CONSTRAINTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        final Meeting modelMeeting \u003d new Meeting(meeting);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        if (picture \u003d\u003d null) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Picture.class.getSimpleName()));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        if (!Picture.isValidPicture(picture)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "            picture \u003d Picture.DEFAULT_PICTURE_URL.getPath();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        final Picture modelPicture \u003d new Picture(picture);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelTags, modelMeeting, modelPicture);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedPerson)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(name, otherPerson.name)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(email, otherPerson.email)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(address, otherPerson.address)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "                \u0026\u0026 Objects.equals(picture, otherPerson.picture)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagged.equals(otherPerson.tagged);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zioul123": 10,
      "-": 131,
      "AyushChatto": 13,
      "denzelchung": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAddressBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlAddressBookStorage.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    private Path backupFilePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        backupFilePath \u003d Paths.get(filePath.toString(), \".backup\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                                 FileNotFoundException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"AddressBook file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook xmlAddressBook \u003d XmlFileStorage.loadDataFromSaveFile(filePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(xmlAddressBook.toModelType());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlFileStorage.saveDataToFile(filePath, new XmlSerializableAddressBook(addressBook));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        saveAddressBook(addressBook, backupFilePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 80,
      "denzelchung": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to XML format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@XmlRootElement(name \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlSerializableAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public static final String MESSAGE_CLASHING_MEETINGS \u003d \"Meeting list contains clashing meeting(s)\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedPerson\u003e persons;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    private List\u003cXmlAdaptedMeeting\u003e meetings;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an empty XmlSerializableAddressBook."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlSerializableAddressBook() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        meetings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        meetings.addAll(src.getMeetingList().stream().map(XmlAdaptedMeeting::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this addressbook into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code XmlAdaptedPerson}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedPerson p : persons) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d p.toModelType();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        for (XmlAdaptedMeeting m : meetings) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            Meeting meeting \u003d m.toModelType();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            if (addressBook.hasMeeting(meeting)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "                throw new IllegalValueException(MESSAGE_CLASHING_MEETINGS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            addressBook.addMeeting(meeting);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlSerializableAddressBook)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.equals(((XmlSerializableAddressBook) other).persons);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 71,
      "AyushChatto": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PAGE \u003d \"default.html\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanel() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadPersonPage(Person person) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // Load the default page, because PersonPages are not implemented yet."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(defaultPage.toExternalForm());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Frees resources allocated to the browser."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void freeResources() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        browser \u003d null;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPersonPage(event.getNewSelection());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zioul123": 2,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.ListElementPointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(Logic logic) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            // process result of the command"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            raise(new NewResultAvailableEvent(commandResult.feedbackToUser, true));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            // handle command failure"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandTextField.getText());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            raise(new NewResultAvailableEvent(e.getMessage(), false));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A19Sean": 2,
      "-": 149
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanel();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath(),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                logic.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    void releaseResources() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel.freeResources();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zioul123": 2,
      "-": 202
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import seedu.address.model.person.Picture;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public static final String NO_PHONE \u003d \"No Phone Number\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public static final String NO_EMAIL \u003d \"No Email Address\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public static final String NO_ADDRESS \u003d \"No Address\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    private static final String[] TAG_COLOR_STYLES \u003d { \"teal\", \"red\", \"yellow\", \"blue\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        \"orange\", \"brown\", \"green\", \"pink\", \"black\", \"grey\"};"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(PersonCard.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    private ImageView picture;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    private Label meeting;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        //@@author zioul123"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        person.getPhone()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                .ifPresentOrElse(p -\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                    phone.setText(p.value);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                }, () -\u003e phone.setText(NO_PHONE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        person.getAddress()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                .ifPresentOrElse(a -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                    address.setText(a.value);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                }, () -\u003e address.setText(NO_ADDRESS));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        person.getEmail()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                .ifPresentOrElse(e -\u003e {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                    email.setText(e.value);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                }, () -\u003e email.setText(NO_EMAIL));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        meeting.setText(person.getMeeting().value.equals(Meeting.NO_MEETING) ? Meeting.NO_MEETING_MSG : \"Meeting on\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                + person.getMeeting().toString() + \"hrs\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        //@@author denzelchung"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        // set profile picture"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        Image image;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        if (!Picture.isValidPicture(person.getPicture().picture)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "            || person.getPicture().picture.equals(Picture.DEFAULT_PICTURE_URL.getPath())) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "                image \u003d new Image(Picture.DEFAULT_PICTURE_URL.openStream());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "            } catch (IOException io) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "                logger.warning(\"Unable to load default picture\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "                image \u003d new Image(Picture.DEFAULT_PICTURE_URL.getPath());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "            image \u003d new Image(\"file:\" + person.getPicture().picture);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        picture.setImage(image);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        picture.setCache(true);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        initTags(person);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        name.setWrapText(true);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        address.setWrapText(true);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        email.setWrapText(true);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        meeting.setWrapText(true);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chantca95"
        },
        "content": "     * Returns the color style for {@code tagName}\u0027s label."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chantca95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    private String getTagColorStyleFor(String tagName) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        // we use the hash code of the tag name to generate a random color, so that the color remain consistent"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        // between different runs of the program while still making it random enough between tags."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        return TAG_COLOR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOR_STYLES.length];"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chantca95"
        },
        "content": "     * Creates the tag labels for {@code person}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chantca95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    private void initTags(Person person) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        person.getTags().forEach(tag -\u003e {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            Label tagLabel \u003d new Label(tag.tagName);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            tagLabel.getStyleClass().add(getTagColorStyleFor(tag.tagName));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            tags.getChildren().add(tagLabel);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        });"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zioul123": 24,
      "-": 66,
      "denzelchung": 30,
      "AyushChatto": 5,
      "chantca95": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ResultDisplay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ResultDisplay.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StringProperty displayed \u003d new SimpleStringProperty(\"\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.textProperty().bind(displayed);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleNewResultAvailableEvent(NewResultAvailableEvent event) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            if (event.isValid) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                setStyleToDefault();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            displayed.setValue(event.message);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        });"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "     * Sets the result text to use the default style."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        resultDisplay.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "     * Sets the result text style to indicate a failed command."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d resultDisplay.getStyleClass();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A19Sean": 31,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.controlsfx.control.StatusBar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public static final String TOTAL_NUMBER_STATUS \u003d \"%d person(s) total\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar syncStatus;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar saveLocationStatus;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    private StatusBar totalNumberStatus;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public StatusBarFooter(Path saveLocation, int totalPeople) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        setSaveLocation(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        setTotalNumberStatus(0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        setTotalNumberStatus(totalPeople);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public void setTotalNumberStatus(int totalNumber) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        Platform.runLater(() -\u003e totalNumberStatus.setText(String.format(TOTAL_NUMBER_STATUS, totalNumber)));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSaveLocation(String location) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e saveLocationStatus.setText(location));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSyncStatus(String status) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e syncStatus.setText(status));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent(AddressBookChangedEvent abce) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        setTotalNumberStatus(abce.data.getPersonList().size());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zioul123": 11,
      "-": 82
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "chantca95"
        },
        "content": "#tags .teal {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    -fx-background-color: teal;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "chantca95"
        },
        "content": "}"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "chantca95"
        },
        "content": "#tags .red {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    -fx-background-color: red;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "chantca95"
        },
        "content": "}"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "chantca95"
        },
        "content": "#tags .yellow {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    -fx-background-color: yellow;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "chantca95"
        },
        "content": "}"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "chantca95"
        },
        "content": "#tags .blue {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    -fx-background-color: blue;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "chantca95"
        },
        "content": "}"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "chantca95"
        },
        "content": "#tags .orange {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    -fx-background-color: orange;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "chantca95"
        },
        "content": "}"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "chantca95"
        },
        "content": "#tags .brown {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    -fx-background-color: brown;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "chantca95"
        },
        "content": "}"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "chantca95"
        },
        "content": "#tags .green {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    -fx-background-color: green;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "chantca95"
        },
        "content": "}"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "chantca95"
        },
        "content": "#tags .pink {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    -fx-background-color: pink;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "chantca95"
        },
        "content": "}"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "chantca95"
        },
        "content": "#tags .black {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "chantca95"
        },
        "content": "}"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "chantca95"
        },
        "content": "#tags .grey {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    -fx-background-color: grey;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "chantca95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 349,
      "chantca95": 41
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "      \u003cImageView fx:id\u003d\"picture\" fitHeight\u003d\"100.0\" fitWidth\u003d\"100.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        \u003cimage\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        \u003c/image\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "      \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"1\" spacing\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"8\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "      \u003cLabel fx:id\u003d\"meeting\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$meeting\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "zioul123": 1,
      "-": 32,
      "denzelchung": 8,
      "AyushChatto": 1
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zioul123"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zioul123"
        },
        "content": "\u003c?import org.controlsfx.control.StatusBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zioul123"
        },
        "content": "\u003cGridPane styleClass\u003d\"grid-pane\" xmlns\u003d\"http://javafx.com/javafx/8.0.121\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zioul123"
        },
        "content": "      \u003cColumnConstraints /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zioul123"
        },
        "content": "  \u003cStatusBar fx:id\u003d\"syncStatus\" styleClass\u003d\"stack-pane\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zioul123"
        },
        "content": "  \u003cStatusBar fx:id\u003d\"saveLocationStatus\" nodeOrientation\u003d\"RIGHT_TO_LEFT\" styleClass\u003d\"stack-pane\" GridPane.columnIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zioul123"
        },
        "content": "  \u003cStatusBar fx:id\u003d\"totalNumberStatus\" nodeOrientation\u003d\"RIGHT_TO_LEFT\" styleClass\u003d\"stack-pane\" GridPane.columnIndex\u003d\"2\" GridPane.hgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zioul123"
        },
        "content": "   \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zioul123"
        },
        "content": "      \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zioul123"
        },
        "content": "   \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "zioul123": 12,
      "-": 8
    }
  },
  {
    "path": "src/test/data/CsvTest/AddressbookText.txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chantca95"
        },
        "content": "Chee Cheong Fun,98987423,horjiak@gmail.com,Bedok 88,,hawker,businessman"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chantca95"
        },
        "content": "Amos Yee,98743423,amosyee@gmail.com,America,,refugee,activist"
      }
    ],
    "authorContributionMap": {
      "chantca95": 2
    }
  },
  {
    "path": "src/test/data/XmlAddressBookStorageTest/invalidAndValidPersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Valid Person --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        \u003cmeeting isPrivate\u003d\"false\"\u003e0000000000\u003c/meeting\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        \u003cpicture isPrivate\u003d\"false\"\u003e/images/hans.jpg\u003c/picture\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with invalid phone field --\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e948asdf2424\u003c/phone\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        \u003cmeeting isPrivate\u003d\"false\"\u003e0000000000\u003c/meeting\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        \u003cpicture isPrivate\u003d\"false\"\u003e/images/hans.jpg\u003c/picture\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "AyushChatto": 2,
      "denzelchung": 2
    }
  },
  {
    "path": "src/test/data/XmlAddressBookStorageTest/invalidPersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with invalid name field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHa!ns Mu@ster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        \u003cmeeting isPrivate\u003d\"false\"\u003e0000000000\u003c/meeting\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "AyushChatto": 1
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/duplicatePersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        \u003cmeeting\u003e0000000000\u003c/meeting\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        \u003cpicture\u003e/images/alice.jpg\u003c/picture\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with same identity as Alice Pauline --\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003epauline@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        \u003cmeeting\u003e0000000000\u003c/meeting\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        \u003cpicture\u003e/images/alice.jpg\u003c/picture\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "AyushChatto": 2,
      "denzelchung": 2
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/invalidPersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with invalid email field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@exam!32ple\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        \u003cmeeting isPrivate\u003d\"false\"\u003e0000000000\u003c/meeting\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "AyushChatto": 1
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/typicalPersonsAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook() --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        \u003cmeeting\u003e0000000000\u003c/meeting\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        \u003cpicture\u003e/images/placeholder_image.jpg\u003c/picture\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eBenson Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e98765432\u003c/phone\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ejohnd@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e311, Clementi Ave 2, #02-25\u003c/address\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        \u003cmeeting\u003e0000000000\u003c/meeting\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003eowesMoney\u003c/tagged\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        \u003cpicture\u003e/images/placeholder_image.jpg\u003c/picture\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCarl Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        \u003cmeeting\u003e0000000000\u003c/meeting\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        \u003cpicture\u003e/images/placeholder_image.jpg\u003c/picture\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eDaniel Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        \u003cmeeting\u003e0000000000\u003c/meeting\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        \u003cpicture\u003e/images/placeholder_image.jpg\u003c/picture\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eElle Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        \u003cmeeting\u003e0000000000\u003c/meeting\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        \u003cpicture\u003e/images/placeholder_image.jpg\u003c/picture\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eFiona Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        \u003cmeeting\u003e0000000000\u003c/meeting\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        \u003ctagged\u003eowesMoney\u003c/tagged\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        \u003ctagged\u003eDBS\u003c/tagged\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        \u003cpicture\u003e/images/placeholder_image.jpg\u003c/picture\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eGeorge Best\u003c/name\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        \u003cmeeting\u003e0000000000\u003c/meeting\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        \u003cpicture\u003e/images/placeholder_image.jpg\u003c/picture\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        \u003cname\u003eHenry Golding\u003c/name\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        \u003cphone\u003e000000000000\u003c/phone\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        \u003cemail\u003ehenry@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        \u003caddress\u003eCrazy Rich Street\u003c/address\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        \u003cmeeting\u003e0000000000\u003c/meeting\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        \u003cpicture\u003e/images/placeholder_image.jpg\u003c/picture\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        \u003cname\u003eIanna Cluse\u003c/name\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        \u003cphone\u003e83848586\u003c/phone\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        \u003cemail\u003eNOEMAIL@NOEMAIL.NOEMAIL\u003c/email\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        \u003caddress\u003e24 Recluse Avenue\u003c/address\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        \u003cmeeting\u003e0000000000\u003c/meeting\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        \u003cpicture\u003e/images/placeholder_image.jpg\u003c/picture\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        \u003cname\u003eJenny Khiu\u003c/name\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        \u003cphone\u003e91234523\u003c/phone\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        \u003cemail\u003ejenny@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        \u003caddress\u003eNO_ADDRESS\u003c/address\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        \u003cmeeting\u003e0000000000\u003c/meeting\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        \u003cpicture\u003e/images/placeholder_image.jpg\u003c/picture\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "zioul123": 17,
      "A19Sean": 2,
      "-": 51,
      "AyushChatto": 10,
      "denzelchung": 10
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/invalidPersonField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- Person with an invalid phone field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482asf424\u003c/phone\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    \u003cmeeting\u003e0000000000\u003c/meeting\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "AyushChatto": 1
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/missingPersonField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- Person with missing name field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    \u003cmeeting\u003e0000000000\u003c/meeting\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 8,
      "AyushChatto": 1
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        \u003cmeeting isPrivate\u003d\"false\"\u003e0000000000\u003c/meeting\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        \u003cpicture isPrivate\u003d\"false\"\u003e/images/hans.jpg\u003c/picture\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eRuth Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87249245\u003c/phone\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eruth@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e81th street\u003c/address\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        \u003cmeeting isPrivate\u003d\"false\"\u003e0000000000\u003c/meeting\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        \u003cpicture isPrivate\u003d\"false\"\u003e/images/ruth.jpg\u003c/picture\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHeinz Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        \u003cmeeting isPrivate\u003d\"false\"\u003e0000000000\u003c/meeting\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        \u003cpicture isPrivate\u003d\"false\"\u003e/images/heinz.jpg\u003c/picture\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCornelia Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        \u003cmeeting isPrivate\u003d\"false\"\u003e0000000000\u003c/meeting\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        \u003cpicture isPrivate\u003d\"false\"\u003e/images/cornelia.jpg\u003c/picture\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eWerner Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        \u003cmeeting isPrivate\u003d\"false\"\u003e0000000000\u003c/meeting\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        \u003cpicture isPrivate\u003d\"false\"\u003e/images/werner.jpg\u003c/picture\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eLydia Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        \u003cmeeting isPrivate\u003d\"false\"\u003e0000000000\u003c/meeting\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        \u003cpicture isPrivate\u003d\"false\"\u003e/images/lydia.jpg\u003c/picture\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAnna Best\u003c/name\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        \u003cmeeting isPrivate\u003d\"false\"\u003e0000000000\u003c/meeting\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        \u003cpicture isPrivate\u003d\"false\"\u003e/images/anna.jpg\u003c/picture\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eStefan Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003estefan@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle india\u003c/address\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        \u003cmeeting isPrivate\u003d\"false\"\u003e0000000000\u003c/meeting\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        \u003cpicture isPrivate\u003d\"false\"\u003e/images/stefan.jpg\u003c/picture\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eMartin Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482131\u003c/phone\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003echicago ave\u003c/address\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        \u003cmeeting isPrivate\u003d\"false\"\u003e0000000000\u003c/meeting\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        \u003cpicture isPrivate\u003d\"false\"\u003e/images/martin.jpg\u003c/picture\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 57,
      "AyushChatto": 9,
      "denzelchung": 9
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validPerson.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    \u003cmeeting\u003e0000000000\u003c/meeting\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 8,
      "AyushChatto": 1
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.ui.PersonCard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle to a person card in the person list panel."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EMAIL_FIELD_ID \u003d \"#email\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    private static final String PICTURE_FIELD_ID \u003d \"#picture\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label addressLabel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label emailLabel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    private final ImageView picture;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        picture \u003d getChildNode(PICTURE_FIELD_ID);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressLabel.getText();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return emailLabel.getText();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    public Image getPicture() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        return picture.getImage();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    public List\u003cString\u003e getTagStyleClasses(String tag) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                .filter(label -\u003e label.getText().equals(tag))"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                .map(Label::getStyleClass)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                .orElseThrow(() -\u003e new IllegalArgumentException(\"No such tag.\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if this handle contains {@code person}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Person person) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return getName().equals(person.getName().fullName)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                \u0026\u0026 getAddress().equals(person.getAddress().isPresent()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                        ? person.getAddress().get().value"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                        : PersonCard.NO_ADDRESS)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                \u0026\u0026 getPhone().equals(person.getPhone().isPresent()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                        ? person.getPhone().get().value"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                        : PersonCard.NO_PHONE)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                \u0026\u0026 getEmail().equals(person.getEmail().isPresent()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                        ? person.getEmail().get().value"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                        : PersonCard.NO_EMAIL)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(person.getTags().stream()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zioul123": 10,
      "-": 84,
      "denzelchung": 9,
      "chantca95": 9
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/ResultDisplayHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A handler for the {@code ResultDisplay} of the UI"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplayHandle extends NodeHandle\u003cTextArea\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String RESULT_DISPLAY_ID \u003d \"#resultDisplay\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle(TextArea resultDisplayNode) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        super(resultDisplayNode);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text in the result display."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getText();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "     * Returns the list of style classes present in the result display."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    public ObservableList\u003cString\u003e getStyleClass() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        return getRootNode().getStyleClass();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A19Sean": 8,
      "-": 22
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/StatusBarFooterHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.controlsfx.control.StatusBar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A handle for the {@code StatusBarFooter} at the footer of the application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String STATUS_BAR_PLACEHOLDER \u003d \"#statusbarPlaceholder\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SYNC_STATUS_ID \u003d \"#syncStatus\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SAVE_LOCATION_STATUS_ID \u003d \"#saveLocationStatus\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    private static final String TOTAL_NUMBER_STATUS_ID \u003d \"#totalNumberStatus\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBar syncStatusNode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBar saveLocationNode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    private final StatusBar totalNumberNode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private String lastRememberedSyncStatus;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private String lastRememberedSaveLocation;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    private String lastRememberedTotalNumber;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle(Node statusBarFooterNode) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        super(statusBarFooterNode);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatusNode \u003d getChildNode(SYNC_STATUS_ID);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationNode \u003d getChildNode(SAVE_LOCATION_STATUS_ID);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        totalNumberNode \u003d getChildNode(TOTAL_NUMBER_STATUS_ID);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the sync status portion of the status bar."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getSyncStatus() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return syncStatusNode.getText();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the \u0027save location\u0027 portion of the status bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getSaveLocation() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return saveLocationNode.getText();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     * Returns the text of the \u0027total number of people\u0027 portion of the status bar."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public String getTotalNumberStatus() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        return totalNumberNode.getText();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remembers the content of the sync status portion of the status bar."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rememberSyncStatus() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        lastRememberedSyncStatus \u003d getSyncStatus();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the current content of the sync status is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code rememberSyncStatus()} call."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSyncStatusChanged() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return !lastRememberedSyncStatus.equals(getSyncStatus());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remembers the content of the \u0027save location\u0027 portion of the status bar."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rememberSaveLocation() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        lastRememberedSaveLocation \u003d getSaveLocation();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the current content of the \u0027save location\u0027 is different from the value remembered by the most"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * recent {@code rememberSaveLocation()} call."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSaveLocationChanged() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return !lastRememberedSaveLocation.equals(getSaveLocation());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     * Remembers the content of the total number status portion of the status bar."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public void rememberTotalNumberStatus() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        lastRememberedTotalNumber \u003d getTotalNumberStatus();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     * Returns true if the current content of the sync status is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     * {@code rememberSyncStatus()} call."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public boolean isTotalNumberStatusChanged() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        return !lastRememberedTotalNumber.equals(getTotalNumberStatus());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zioul123": 25,
      "-": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        String defaultConfigAsString \u003d \"App title : InsuRen\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zioul123": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/IndexParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zioul123"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zioul123"
        },
        "content": "//@@author zioul123"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zioul123"
        },
        "content": "public class IndexParserUtilTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    private static final String VALID_INDEX \u003d \"1\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    private static final String VALID_INDEX_LARGER \u003d \"1000\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    private static final String VALID_INDEX_WITHSPACES \u003d \"  10  \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    private static final String INVALID_INDEX \u003d \"0\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    private static final String INVALID_NEGATIVE_INDEX \u003d \"-1\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    private static final String INVALID_INDEX_WITHSPACES \u003d \"  -10 \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public void validIndex() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertEquals(Optional.of(Index.fromOneBased(1)), IndexParserUtil.getIndex(VALID_INDEX));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertEquals(Optional.of(Index.fromOneBased(1000)), IndexParserUtil.getIndex(VALID_INDEX_LARGER));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertEquals(Optional.of(Index.fromOneBased(10)), IndexParserUtil.getIndex(VALID_INDEX_WITHSPACES));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public void invalidIndex() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertEquals(Optional.empty(), IndexParserUtil.getIndex((INVALID_INDEX)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertEquals(Optional.empty(), IndexParserUtil.getIndex((INVALID_NEGATIVE_INDEX)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertEquals(Optional.empty(), IndexParserUtil.getIndex((INVALID_INDEX_WITHSPACES)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zioul123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zioul123": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/PersonFinderUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zioul123"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import static seedu.address.logic.PersonFinderUtil.GENERAL_MESSAGE_USAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import static seedu.address.logic.PersonFinderUtil.findPerson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zioul123"
        },
        "content": "//@@author zioul123"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zioul123"
        },
        "content": "public class PersonFinderUtilTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    private static final String COMMON_SURNAME \u003d \"Meier\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    private static final String BENSON_FIRSTNAME \u003d \"Benson\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    private static final String UNUSED_NAME \u003d \"ABCDE HIJ\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public void noIdentifierProvided() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, GENERAL_MESSAGE_USAGE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        Assert.assertThrows(ParseException.class, expectedMessage, () -\u003e PersonFinderUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                .findPerson(model, \"\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        Assert.assertThrows(ParseException.class, expectedMessage, () -\u003e PersonFinderUtil"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                .findPerson(model, \"  \"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public void noPeopleMatching() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        String expectedMessage \u003d Messages.MESSAGE_PERSON_NOT_FOUND;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        Assert.assertThrows(CommandException.class, expectedMessage, () -\u003e PersonFinderUtil"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                .findPerson(model, UNUSED_NAME));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public void multiplePeopleMatching() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        String expectedMessage \u003d Messages.MESSAGE_MULTIPLE_PERSONS_FOUND;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        Assert.assertThrows(CommandException.class, expectedMessage, () -\u003e PersonFinderUtil"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                .findPerson(model, COMMON_SURNAME));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public void oneMatch() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        Person expectedPerson \u003d TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        Person foundPerson;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zioul123"
        },
        "content": "            foundPerson \u003d findPerson(model, ALICE.getName().toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zioul123"
        },
        "content": "            foundPerson \u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertEquals(expectedPerson, foundPerson);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        expectedPerson \u003d TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zioul123"
        },
        "content": "            foundPerson \u003d findPerson(model, BENSON_FIRSTNAME);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zioul123"
        },
        "content": "            foundPerson \u003d null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertEquals(expectedPerson, foundPerson);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zioul123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zioul123": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        public boolean hasMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        public void deleteMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        public void addMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 204,
      "AyushChatto": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILE_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import seedu.address.model.person.Picture;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public static final String VALID_NAME_CAM \u003d \"Cam Dee\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public static final String VALID_PHONE_CAM \u003d \"33333333\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public static final String VALID_PHONE_DEN \u003d \"44444444\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public static final String VALID_EMAIL_CAM \u003d \"cam@example.com\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public static final String VALID_EMAIL_DEN \u003d \"den@example.com\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public static final String VALID_ADDRESS_CAM \u003d \"Block 132, Cammy Street 2\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    public static final String VALID_PICTURE_PATH \u003d Picture.DEFAULT_PICTURE_URL.getPath();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public static final String NAME_DESC_CAM \u003d \" \" + PREFIX_NAME + VALID_NAME_CAM;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public static final String PHONE_DESC_CAM \u003d \" \" + PREFIX_PHONE + VALID_PHONE_CAM;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public static final String EMAIL_DESC_CAM \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public static final String ADDRESS_DESC_CAM \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_CAM;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    public static final String PICTURE_PATH \u003d \" \" + PREFIX_FILE_LOCATION + VALID_PICTURE_PATH;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    public static final String INVALID_PICTURE_PATH \u003d \" \" + PREFIX_FILE_LOCATION + \"johndoe.jpg\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book and the filtered person list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(firstPerson);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zioul123": 10,
      "-": 141,
      "denzelchung": 5,
      "AyushChatto": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteByNameCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zioul123"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zioul123"
        },
        "content": "//@@author zioul123"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zioul123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zioul123"
        },
        "content": " * Contains integration tests (interactin with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zioul123"
        },
        "content": " * {@code DeleteByNameCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zioul123"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zioul123"
        },
        "content": "public class DeleteByNameCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    private static final String UNUSED_NAME \u003d \"ABCDE HIJ\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    private static final String COMMON_SURNAME \u003d \"Meier\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public void execute_multipleMatches_throwsCommandException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        DeleteByNameCommand deleteByNameCommand \u003d new DeleteByNameCommand(COMMON_SURNAME);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandFailure(deleteByNameCommand, model, commandHistory, Messages.MESSAGE_MULTIPLE_PERSONS_FOUND);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public void execute_validNameUnfilteredList_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        DeleteByNameCommand deleteByNameCommand \u003d new DeleteByNameCommand(personToDelete.getName().toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandSuccess(deleteByNameCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public void execute_invalidNameUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        DeleteByNameCommand deleteByNameCommand \u003d new DeleteByNameCommand(UNUSED_NAME);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandFailure(deleteByNameCommand, model, commandHistory, Messages.MESSAGE_PERSON_NOT_FOUND);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public void execute_validNameFilteredList_success() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        DeleteByNameCommand deleteByNameCommand \u003d new DeleteByNameCommand(personToDelete.getName().toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandSuccess(deleteByNameCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public void execute_validNameNotInFilteredList_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        DeleteByNameCommand deleteByNameCommand \u003d new DeleteByNameCommand(personToDelete.getName().toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandSuccess(deleteByNameCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public void execute_invalidNameFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        DeleteByNameCommand deleteByNameCommand \u003d new DeleteByNameCommand(UNUSED_NAME);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandFailure(deleteByNameCommand, model, commandHistory,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                Messages.MESSAGE_PERSON_NOT_FOUND);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public void executeUndoRedo_validNameUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        DeleteByNameCommand deleteByNameCommand \u003d new DeleteByNameCommand(personToDelete.getName().toString());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // delete -\u003e first person deleted"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        deleteByNameCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // redo -\u003e same first person deleted again"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public void executeUndoRedo_invalidNameUnfilteredList_failure() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        DeleteByNameCommand deleteByNameCommand \u003d new DeleteByNameCommand(UNUSED_NAME);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandFailure(deleteByNameCommand, model, commandHistory,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                Messages.MESSAGE_PERSON_NOT_FOUND);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     * 1. Deletes a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted person in the"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the person object regardless of indexing."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public void executeUndoRedo_validNameFilteredList_samePersonDeleted() throws Exception {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        DeleteByNameCommand deleteByNameCommand \u003d new DeleteByNameCommand(personToDelete.getName().toString());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // delete -\u003e deletes second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        deleteByNameCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertNotEquals(personToDelete, model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // redo -\u003e deletes same second person in unfiltered person list"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        DeleteByNameCommand deleteAliceCommand \u003d new DeleteByNameCommand(\"Alice\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        DeleteByNameCommand deleteBensonCommand \u003d new DeleteByNameCommand(\"Benson\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertTrue(deleteAliceCommand.equals(deleteAliceCommand));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        DeleteByNameCommand deleteAliceCommandCopy \u003d new DeleteByNameCommand(\"Alice\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertTrue(deleteAliceCommand.equals(deleteAliceCommandCopy));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertFalse(deleteAliceCommand.equals(1));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertFalse(deleteAliceCommand.equals(new DeleteCommand(INDEX_FIRST_PERSON)));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertFalse(deleteAliceCommand.equals(null));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertFalse(deleteAliceCommand.equals(deleteBensonCommand));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zioul123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zioul123": 202
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditByNameCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zioul123"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zioul123"
        },
        "content": "//@@author zioul123"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zioul123"
        },
        "content": "public class EditByNameCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public static final String UNUSED_NAME \u003d \"ABCDE HIJ\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    private static final String COMMON_SURNAME \u003d \"Meier\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public void execute_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        EditCommand.EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        EditByNameCommand editByNameCommand \u003d new EditByNameCommand(editedPerson.getName().toString(), descriptor);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandSuccess(editByNameCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public void execute_noFieldSpecified_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        EditByNameCommand editByNameCommand \u003d new EditByNameCommand(ALICE.getName().toString(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                new EditCommand.EditPersonDescriptor());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandSuccess(editByNameCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public void execute_duplicatePerson_failure() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        Person secondPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        EditCommand.EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(secondPerson).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        EditByNameCommand editCommand \u003d new EditByNameCommand(BENSON.getName().toString(), descriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public void execute_noneMatch_failure() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        EditCommand.EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        EditByNameCommand editByNameCommand \u003d new EditByNameCommand(UNUSED_NAME, descriptor);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandFailure(editByNameCommand, model, commandHistory, Messages.MESSAGE_PERSON_NOT_FOUND);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public void execute_multipleMatch_failure() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        EditByNameCommand editCommand \u003d new EditByNameCommand(COMMON_SURNAME,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_MULTIPLE_PERSONS_FOUND);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public void executeUndoRedo_validUpdate_success() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        EditCommand.EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        EditCommand editByNameCommand \u003d new EditByNameCommand(ALICE.getName().toString(), descriptor);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        expectedModel.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // edit -\u003e first person edited"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        editByNameCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // redo -\u003e same first person edited again"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public void executeUndoRedo_invalidUpdate_failure() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        EditCommand.EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        EditByNameCommand editCommand \u003d new EditByNameCommand(UNUSED_NAME, descriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_PERSON_NOT_FOUND);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     * 1. Edits a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public void executeUndoRedo_validFilteredList_samePersonEdited() throws Exception {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        EditCommand.EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        EditByNameCommand editByNameCommand \u003d new EditByNameCommand(BENSON.getName().toString(), descriptor);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        expectedModel.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // edit -\u003e edits second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        editByNameCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), personToEdit);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // redo -\u003e edits same second person in unfiltered person list"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        EditCommand.EditPersonDescriptor copyDescriptor \u003d new EditCommand.EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zioul123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zioul123": 186
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExportCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chantca95"
        },
        "content": "//@@author chantca95"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chantca95"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chantca95"
        },
        "content": "public class ExportCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    private static final String EXPORTED_FILE_NAME \u003d \"exportedCommandTest.csv\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"CsvTest\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    private static final Path EXPECTED_FILE_NAME \u003d TEST_DATA_FOLDER.resolve(\"expectedExport.csv\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    private static String OS \u003d System.getProperty(\"os.name\").toLowerCase();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    private CommandHistory commandHistory;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    private ExportCommand exportCommand \u003d new ExportCommand(EXPORTED_FILE_NAME);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    //This test crashes on Appveyor but passes on Travis and on JUnit"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    public void excludeWindows() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        boolean isWindows \u003d (OS.indexOf(\"win\") \u003e\u003d 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        org.junit.Assume.assumeFalse(isWindows);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    public void execute_export_success() throws CommandException, IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        setUp();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        CommandResult result \u003d exportCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        File produced \u003d new File(EXPORTED_FILE_NAME);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        File expected \u003d EXPECTED_FILE_NAME.toFile();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        boolean isTwoEqual \u003d compareFiles(produced, expected);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        assertTrue(isTwoEqual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chantca95"
        },
        "content": "     * Helper method to check if the exported file is the same as the expected one"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chantca95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    public static boolean compareFiles(File produced, File expected) throws IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        boolean isIdentical \u003d true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        FileInputStream fis1 \u003d new FileInputStream (produced);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        FileInputStream fis2 \u003d new FileInputStream (expected);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        if (produced.length() \u003d\u003d expected.length()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            int n \u003d 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            byte[] b1;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            byte[] b2;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            while ((n \u003d fis1.available()) \u003e 0) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                if (n \u003e 80) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                    n \u003d 80;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                b1 \u003d new byte[n];"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                b2 \u003d new byte[n];"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                fis1.read(b1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                fis2.read(b2);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                if (Arrays.equals(b1, b2) \u003d\u003d false) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                    System.out.println(produced + \" :\\n\\n \" + new String(b1));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                    System.out.println();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                    System.out.println(expected + \" : \\n\\n\" + new String(b2));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                    isIdentical \u003d false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            //if length does not match."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            isIdentical \u003d false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        fis1.close();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        fis2.close();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        // delete the generated file so that the test can be rerun"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        produced.delete();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        return isIdentical;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chantca95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chantca95": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ImportCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chantca95"
        },
        "content": "//@@author chantca95"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chantca95"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import seedu.address.logic.parser.ImportCommandParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chantca95"
        },
        "content": "public class ImportCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"CsvTest\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    private static final Path CORRECT_CSV \u003d TEST_DATA_FOLDER.resolve(\"AddressbookCorrect.csv\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    private static final Path DUPLICATE_CLASH_CSV \u003d TEST_DATA_FOLDER.resolve(\"AddressbookDuplicateClash.csv\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    private static final Path DUPLICATE_CLASH_NEGATIVE_CSV \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"AddressbookDuplicateClashNegative.csv\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    private CommandHistory commandHistory;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    private ImportCommandParser parser \u003d new ImportCommandParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    public void execute_import_success() throws ParseException, CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        setUp();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        File file \u003d CORRECT_CSV.toFile();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        ImportCommand command \u003d parser.parseFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        //Expected persons being added to expectedModel"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        Person alex \u003d new Person("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                new Name(\"Alex Chan\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                Optional.of(new Phone(\"97412033\")),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                Optional.of(new Email(\"chantca95@gmail.com\")),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                Optional.of(new Address(\"Bedok North Street 2 Block 120\")),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                Collections.singleton(new Tag(\"Loanshark\")),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                new Meeting(\"2401181230\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        Person louiz \u003d new PersonBuilder().withName(\"Louiz\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                .withAddress(\"Cinammon College Level 19\").withEmail(\"louizkc@gmail.com\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                .withPhone(\"98573747\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        Person sean \u003d new PersonBuilder().withName(\"Auyok Sean\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                .withAddress(\"IDKWhere he stays Road\").withEmail(\"seanA@gmail.com\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                .withPhone(\"85737463\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                .withTags(\"Transferee\", \"Student\").build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        expectedModel.addPerson(alex);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        expectedModel.addPerson(louiz);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        expectedModel.addPerson(sean);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                String.format(ImportCommand.MESSAGE_SUCCESS), expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    public void execute_import_duplicates() throws ParseException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        setUp();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        File file \u003d DUPLICATE_CLASH_CSV.toFile();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        ImportCommand command \u003d parser.parseFile(file);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        //Populate the test model with an Alex entry, a duplicate of which is in the CSV under test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        Person alex \u003d new PersonBuilder().withName(\"Alex Chan\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                .withAddress(\"Bedok North Street 2 Block 120\").withEmail(\"chantca95@gmail.com\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                .withPhone(\"97412033\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                .withTags(\"Loanshark\").build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        model.addPerson(alex);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        expectedModel.addPerson(alex);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        //Expected persons being added to expectedModel"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        Person alistair \u003d new PersonBuilder().withName(\"Alistair\")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                .withAddress(\"Cinammon College Also\").withEmail(\"princeali@gmail.com\")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                .withPhone(\"95812341\")"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                .withTags(\"Transferee\", \"Floorball\").build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        expectedModel.addPerson(alistair);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                String.format(ImportCommand.MESSAGE_SUCCESS + ImportCommand.MESSAGE_DUPLICATE), expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    public void execute_import_unique() throws ParseException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        setUp();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        File file \u003d DUPLICATE_CLASH_NEGATIVE_CSV.toFile();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        ImportCommand command \u003d parser.parseFile(file);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        //Populate the test model with an Alex entry, an (apparent) duplicate of which is in the CSV under test."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        Person alex \u003d new PersonBuilder().withName(\"Alex Chan\")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                .withAddress(\"Bedok North Street 2 Block 120\").withEmail(\"chantca95@gmail.com\")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                .withPhone(\"97412033\")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                .withTags(\"Loanshark\").build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        model.addPerson(alex);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        expectedModel.addPerson(alex);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        //Expected persons being added to expectedModel"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        //The Alex Chan emtry in the CSV being tested does not count as a duplicate and will be added to the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        Person alexCopy \u003d new PersonBuilder().withName(\"Alex Chan\")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                .withAddress(\"Bedok North Street 2 Block 120\").withEmail(\"javalover@gmail.com\")"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                .withPhone(\"43678243\")"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                .withTags(\"Loanshark\").build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        expectedModel.addPerson(alexCopy);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                String.format(ImportCommand.MESSAGE_SUCCESS), expectedModel);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chantca95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chantca95": 138
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/MeetingsCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MEETINGS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.STEVE_MEETING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.TYLER_MEETING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getScheduledAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.model.meeting.SameMeetingDayPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "public class MeetingsCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    private Model model \u003d new ModelManager(getScheduledAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getScheduledAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        SameMeetingDayPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "                new SameMeetingDayPredicate(new Meeting(\"1202181800\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        SameMeetingDayPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "                new SameMeetingDayPredicate(new Meeting(\"1302181800\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        MeetingsCommand meetingsFirstCommand \u003d new MeetingsCommand(firstPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        MeetingsCommand meetingsSecondCommand \u003d new MeetingsCommand(secondPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        assertTrue(meetingsFirstCommand.equals(meetingsFirstCommand));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        MeetingsCommand meetingsFirstCommandCopy \u003d new MeetingsCommand(firstPredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        assertTrue(meetingsFirstCommand.equals(meetingsFirstCommandCopy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        assertFalse(meetingsFirstCommand.equals(1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        assertFalse(meetingsFirstCommand.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        // different day -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        assertFalse(meetingsFirstCommand.equals(meetingsSecondCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public void execute_zeroKeywords_listAllMeetings() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MEETINGS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        SameMeetingDayPredicate predicate \u003d new SameMeetingDayPredicate(new Meeting(\"0000000000\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        MeetingsCommand command \u003d new MeetingsCommand(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        assertEquals(Arrays.asList(STEVE_MEETING, TYLER_MEETING), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public void execute_oneArgument_listAllMeetings() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MEETINGS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        SameMeetingDayPredicate predicate \u003d new SameMeetingDayPredicate(new Meeting(\"1202180000\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        MeetingsCommand command \u003d new MeetingsCommand(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        assertEquals(Arrays.asList(STEVE_MEETING), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AyushChatto": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/PictureCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import seedu.address.model.person.Picture;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "//@@author denzelchung"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "denzelchung"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for PictureCommand."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "denzelchung"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "public class PictureCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    public void execute_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(firstPerson).withPicture(\"/image/alice.jpg\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        PictureCommand pictureCommand \u003d new PictureCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "            new Picture(editedPerson.getPicture().picture));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        String expectedMessage \u003d String.format(PictureCommand.MESSAGE_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        assertCommandSuccess(pictureCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(person).withPicture(\"/image/alice.jpg\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        PictureCommand pictureCommand \u003d new PictureCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "            new Picture(editedPerson.getPicture().picture));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        assertCommandFailure(pictureCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "denzelchung": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ScheduleCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "//@@author AyushChatto"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": " * ScheduleCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "public class ScheduleCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        Person scheduledPerson \u003d new PersonBuilder(TypicalPersons.ALICE).withMeeting(\"1202181600\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        Meeting meeting \u003d new Meeting(\"1202181600\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        ScheduleCommand scheduleCommand \u003d new ScheduleCommand(INDEX_FIRST_PERSON, meeting);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        String expectedMessage \u003d String.format(ScheduleCommand.MESSAGE_SCHEDULING_SUCCESS, scheduledPerson);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), scheduledPerson);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        assertCommandSuccess(scheduleCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AyushChatto": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/TagCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_TAGGED_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL_TAGGED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE_TAGGED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.GEORGE_TAGGED;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HENRY_TAGGED;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTaggedAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import seedu.address.model.tag.PersonContainsTagPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "//@@author A19Sean"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A19Sean"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code TagCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A19Sean"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "public class TagCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    private Model model \u003d new ModelManager(getTaggedAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTaggedAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        PersonContainsTagPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                new PersonContainsTagPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        PersonContainsTagPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                new PersonContainsTagPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        TagCommand findFirstCommand \u003d new TagCommand(firstPredicate, TagCommand.Action.FIND,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        TagCommand findSecondCommand \u003d new TagCommand(secondPredicate, TagCommand.Action.FIND,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        TagCommand findFirstCommandCopy \u003d new TagCommand(firstPredicate, TagCommand.Action.FIND,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        // different tag -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TAGGED_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        PersonContainsTagPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        TagCommand command \u003d new TagCommand(predicate, TagCommand.Action.FIND, Collections.singletonList(\" \"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TAGGED_PERSONS_LISTED_OVERVIEW, 4);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        PersonContainsTagPredicate predicate \u003d preparePredicate(\"Singaporean OCBC important\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        TagCommand command \u003d new TagCommand(predicate, TagCommand.Action.FIND, Arrays.asList(\"Singaporean\", \"OCBC\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                \"FRIENDS\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        assertEquals(Arrays.asList(CARL_TAGGED, ELLE_TAGGED, GEORGE_TAGGED, HENRY_TAGGED),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                model.getFilteredPersonList());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "     * Parses {@code userInput} into a {@code PersonContainsTagPredicate}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    private PersonContainsTagPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        return new PersonContainsTagPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A19Sean": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/TagDeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_TAG_DELETED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL_UNTAGGED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE_UNTAGGED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.GEORGE_UNTAGGED;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HENRY_POSB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HENRY_SINGAPOREAN;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTaggedAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import seedu.address.model.tag.PersonContainsTagPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "//@@author A19Sean"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A19Sean"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A19Sean"
        },
        "content": " * {@code TagCommand}\u0027s delete functionality."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A19Sean"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "public class TagDeleteCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    private Model model \u003d new ModelManager(getTaggedAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        PersonContainsTagPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                new PersonContainsTagPredicate(Collections.singletonList(\"Singaporean\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        PersonContainsTagPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                new PersonContainsTagPredicate(Collections.singletonList(\"OCBC\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        TagCommand deleteFirstCommand \u003d new TagCommand(firstPredicate, TagCommand.Action.DELETE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                Collections.singletonList(\"Singaporean\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        TagCommand deleteSecondCommand \u003d new TagCommand(secondPredicate, TagCommand.Action.DELETE,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                Collections.singletonList(\"OCBC\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        TagCommand deleteFirstCommandCopy \u003d new TagCommand(firstPredicate, TagCommand.Action.DELETE,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                Collections.singletonList(\"Singaporean\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        // different tag -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    public void execute_zeroKeywords_noTagDeleted() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TAG_DELETED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        PersonContainsTagPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        TagCommand command \u003d new TagCommand(predicate, TagCommand.Action.DELETE, Collections.singletonList(\" \"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    public void execute_singleKeyword_singleTagDeleted() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TAG_DELETED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        PersonContainsTagPredicate predicate \u003d preparePredicate(\"POSB\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        NameContainsKeywordsPredicate namePredicate \u003d prepareNamePredicate(HENRY_SINGAPOREAN.getName().toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        TagCommand command \u003d new TagCommand(predicate, TagCommand.Action.DELETE, Collections.singletonList(\"POSB\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        expectedModel.updatePerson(expectedModel.getFilteredPersonList().get(0), HENRY_SINGAPOREAN);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        expectedModel.updateFilteredPersonList(namePredicate);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        assertEquals(Arrays.asList(HENRY_SINGAPOREAN), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    public void execute_multipleKeywords_multipleTagsDeleted() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TAG_DELETED_OVERVIEW, 4);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        PersonContainsTagPredicate predicate \u003d preparePredicate(\"Singaporean OCBC important\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        NameContainsKeywordsPredicate namePredicate \u003d prepareNamePredicate("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                CARL_UNTAGGED.getName().toString() + \" \""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                        + ELLE_UNTAGGED.getName().toString() + \" \""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                        + GEORGE_UNTAGGED.getName().toString() + \" \""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                        + HENRY_POSB.getName().toString());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        TagCommand command \u003d new TagCommand(predicate, TagCommand.Action.DELETE, Arrays.asList(\"Singaporean\","
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                \"OCBC\", \"important\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        expectedModel.updatePerson(expectedModel.getFilteredPersonList().get(0), CARL_UNTAGGED);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        expectedModel.updatePerson(expectedModel.getFilteredPersonList().get(0), ELLE_UNTAGGED);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        expectedModel.updatePerson(expectedModel.getFilteredPersonList().get(0), GEORGE_UNTAGGED);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        expectedModel.updatePerson(expectedModel.getFilteredPersonList().get(0), HENRY_POSB);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        expectedModel.updateFilteredPersonList(namePredicate);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        assertEquals(Arrays.asList(CARL_UNTAGGED, ELLE_UNTAGGED, GEORGE_UNTAGGED, HENRY_POSB),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                model.getFilteredPersonList());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    public void executeUndoRedo_tagDelete_success() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        PersonContainsTagPredicate predicate \u003d preparePredicate(\"POSB\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        NameContainsKeywordsPredicate namePredicate \u003d prepareNamePredicate(HENRY_SINGAPOREAN.getName().toString());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        TagCommand command \u003d new TagCommand(predicate, TagCommand.Action.DELETE, Collections.singletonList(\"POSB\"));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        expectedModel.updatePerson(expectedModel.getFilteredPersonList().get(0), HENRY_SINGAPOREAN);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        expectedModel.updateFilteredPersonList(namePredicate);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        command.execute(model, commandHistory);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        expectedModel.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "     * Parses {@code userInput} into a {@code PersonContainsTagPredicate}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    private PersonContainsTagPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        return new PersonContainsTagPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    private NameContainsKeywordsPredicate prepareNamePredicate(String userInput) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A19Sean": 154
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/TagEditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_TAG_EDITED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL_EDITED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE_EDITED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HENRY_BANKER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HENRY_BUDDY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTaggedAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import seedu.address.model.tag.PersonContainsTagPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "//@@author A19Sean"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A19Sean"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A19Sean"
        },
        "content": " * {@code TagCommand}\u0027s edit functionality."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A19Sean"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "public class TagEditCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    private Model model \u003d new ModelManager(getTaggedAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        PersonContainsTagPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                new PersonContainsTagPredicate(Collections.singletonList(\"Singaporean\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        PersonContainsTagPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                new PersonContainsTagPredicate(Collections.singletonList(\"OCBC\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        TagCommand editFirstCommand \u003d new TagCommand(firstPredicate, TagCommand.Action.EDIT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                Arrays.asList(\"Singaporean\", \"buddies\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        TagCommand editSecondCommand \u003d new TagCommand(secondPredicate, TagCommand.Action.EDIT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                Arrays.asList(\"OCBC\", \"bank\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        assertTrue(editFirstCommand.equals(editFirstCommand));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        TagCommand deleteFirstCommandCopy \u003d new TagCommand(firstPredicate, TagCommand.Action.EDIT,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                Arrays.asList(\"Singaporean\", \"buddies\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        assertTrue(editFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        assertFalse(editFirstCommand.equals(1));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        assertFalse(editFirstCommand.equals(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        // different edits -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        assertFalse(editFirstCommand.equals(editSecondCommand));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    public void execute_noTagsChanged_success() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TAG_EDITED_OVERVIEW, 0, \"doesNotExist\", \"dummyTag\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        PersonContainsTagPredicate predicate \u003d preparePredicate(\"doesNotExist\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        TagCommand command \u003d new TagCommand(predicate, TagCommand.Action.EDIT, Arrays.asList(\"doesNotExist\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                \"dummyTag\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    public void execute_singleTagChanged_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TAG_EDITED_OVERVIEW, 1, \"POSB\", \"banker\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        PersonContainsTagPredicate predicate \u003d preparePredicate(\"POSB\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        NameContainsKeywordsPredicate namePredicate \u003d prepareNamePredicate(HENRY_BANKER.getName().toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        TagCommand command \u003d new TagCommand(predicate, TagCommand.Action.EDIT, Arrays.asList(\"POSB\", \"banker\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        expectedModel.updatePerson(expectedModel.getFilteredPersonList().get(0), HENRY_BANKER);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        expectedModel.updateFilteredPersonList(namePredicate);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        assertEquals(Arrays.asList(HENRY_BANKER), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    public void execute_multipleTagsChanged_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TAG_EDITED_OVERVIEW, 3, \"Singaporean\", \"buddies\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        PersonContainsTagPredicate predicate \u003d preparePredicate(\"Singaporean\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        NameContainsKeywordsPredicate namePredicate \u003d prepareNamePredicate("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                CARL_EDITED.getName().toString() + \" \""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                + ELLE_EDITED.getName().toString() + \" \""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                + HENRY_BUDDY.getName().toString()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        );"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        TagCommand command \u003d new TagCommand(predicate, TagCommand.Action.EDIT, Arrays.asList(\"Singaporean\", \"buddies\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        expectedModel.updatePerson(expectedModel.getFilteredPersonList().get(0), CARL_EDITED);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        expectedModel.updatePerson(expectedModel.getFilteredPersonList().get(0), ELLE_EDITED);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        expectedModel.updatePerson(expectedModel.getFilteredPersonList().get(0), HENRY_BUDDY);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        expectedModel.updateFilteredPersonList(namePredicate);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        assertEquals(Arrays.asList(CARL_EDITED, ELLE_EDITED, HENRY_BUDDY),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                model.getFilteredPersonList());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    public void executeUndoRedo_tagEdit_success() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        PersonContainsTagPredicate predicate \u003d preparePredicate(\"POSB\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        NameContainsKeywordsPredicate namePredicate \u003d prepareNamePredicate(HENRY_BANKER.getName().toString());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        TagCommand command \u003d new TagCommand(predicate, TagCommand.Action.EDIT, Arrays.asList(\"POSB\", \"banker\"));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        expectedModel.updatePerson(expectedModel.getFilteredPersonList().get(0), HENRY_BANKER);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        expectedModel.updateFilteredPersonList(namePredicate);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        command.execute(model, commandHistory);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        expectedModel.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "     * Parses {@code userInput} into a {@code PersonContainsTagPredicate}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    private PersonContainsTagPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        return new PersonContainsTagPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    private NameContainsKeywordsPredicate prepareNamePredicate(String userInput) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A19Sean": 152
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILE_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import seedu.address.logic.commands.PictureCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import seedu.address.logic.commands.TagCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import seedu.address.model.person.Picture;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import seedu.address.model.tag.PersonContainsTagPredicate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public void parseCommandAlias_add() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(AddCommand.COMMAND_ALIAS + \" \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                                                              + PersonUtil.getPersonDetails(person));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public void parseCommandWord_clear() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public void parseCommandAlias_clear() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS) instanceof ClearCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public void parseCommandWord_delete() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public void parseCommandAlias_delete() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "                DeleteCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public void parseCommandWord_edit() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public void parseCommandAlias_edit() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_ALIAS + \" \""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public void parseCommandWord_exit() throws Exception {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public void parseCommandAlias_exit() throws Exception {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_ALIAS) instanceof ExitCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_ALIAS + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public void parseCommandWord_find() throws Exception {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public void parseCommandAlais_find() throws Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "                FindCommand.COMMAND_ALIAS + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public void parseCommandWord_help() throws Exception {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public void parseCommandAlias_help() throws Exception {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_ALIAS) instanceof HelpCommand);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_ALIAS + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public void parseCommandWord_history() throws Exception {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public void parseCommandAlias_history() throws Exception {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public void parseCommandWord_list() throws Exception {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public void parseCommandAlias_list() throws Exception {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS) instanceof ListCommand);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public void parseCommandWord_select() throws Exception {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public void parseCommandAlias_select() throws Exception {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "                SelectCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public void parseCommand_redoCommandAlias_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS) instanceof RedoCommand);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        assertTrue(parser.parseCommand(\"r 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public void parseCommand_undoCommandAlias_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS) instanceof UndoCommand);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        assertTrue(parser.parseCommand(\"u 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    //@@author denzelchung"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    public void parseCommand_pictureCommandWord_returnsPictureCommand() throws Exception {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        PictureCommand command \u003d (PictureCommand) parser.parseCommand(PictureCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "            + INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_FILE_LOCATION + Picture.DEFAULT_PICTURE_URL.getPath());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        assertTrue(command instanceof PictureCommand);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    public void parseCommand_pictureCommandAlias_returnsPictureCommand() throws Exception {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        PictureCommand command \u003d (PictureCommand) parser.parseCommand(PictureCommand.COMMAND_ALIAS + \" \""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "            + INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_FILE_LOCATION + Picture.DEFAULT_PICTURE_URL.getPath());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        assertTrue(command instanceof PictureCommand);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    //@@author A19Sean"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    public void parseCommandWord_tag() throws Exception {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"friends\", \"colleagues\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        TagCommand findCommand \u003d (TagCommand) parser.parseCommand("
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                TagCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        assertEquals(new TagCommand(new PersonContainsTagPredicate(keywords), TagCommand.Action.FIND, keywords),"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                findCommand);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    public void parseCommandAlias_tag() throws Exception {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"friends\", \"colleagues\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        TagCommand findCommand \u003d (TagCommand) parser.parseCommand("
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                TagCommand.COMMAND_ALIAS + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        assertEquals(new TagCommand(new PersonContainsTagPredicate(keywords), TagCommand.Action.FIND, keywords),"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                findCommand);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A19Sean": 22,
      "-": 136,
      "denzelchung": 18,
      "AyushChatto": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.logic.commands.DeleteByNameCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zioul123"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"Alice\" and \"1 Alice\" take the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zioul123"
        },
        "content": " * The path variation for those two cases occur inside the IndexParserUtil, and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    //@@author zioul123"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public void parse_noArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertParseFailure(parser, \"   \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    //@@author zioul123"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public void parse_validArgs_returnsDeleteByNameCommand() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertParseSuccess(parser, \"Alice\", new DeleteByNameCommand(\"Alice\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertParseFailure(parser, \"0\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertParseFailure(parser, \"-1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zioul123": 27,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_CAM;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.logic.commands.EditByNameCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // no index or string identifier specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        String userInput \u003d PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertParseFailure(parser, userInput, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // EditCommand"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // EditByNameCommand"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertParseFailure(parser, \"\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // positive index with a plus sign"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertParseFailure(parser, \"+5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // EditCommand"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        runTest_invalidValue_failure(\"1\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // EditByNameCommand"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        runTest_invalidValue_failure(VALID_NAME_AMY);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     * Run tests for invalid values on the EditCommandParser, with the specified preamble."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    private void runTest_invalidValue_failure(String preamble) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertParseFailure(parser, preamble + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertParseFailure(parser, preamble + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertParseFailure(parser, preamble + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertParseFailure(parser, preamble + INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertParseFailure(parser, preamble + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertParseFailure(parser, preamble + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertParseFailure(parser, preamble + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertParseFailure(parser, preamble + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertParseFailure(parser, preamble + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertParseFailure(parser, preamble + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertParseFailure(parser, preamble + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                + VALID_PHONE_AMY, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // EditCommand"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // EditByNameCommand"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        userInput \u003d VALID_NAME_AMY + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        expectedCommand \u003d new EditByNameCommand(VALID_NAME_AMY, descriptor);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // EditCommand"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // EditByNameCommand"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        userInput \u003d VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        expectedCommand \u003d new EditByNameCommand(VALID_NAME_BOB, descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // EditCommand"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // EditByNameCommand"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        userInput \u003d VALID_NAME_CAM + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        expectedCommand \u003d new EditByNameCommand(VALID_NAME_CAM, descriptor);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // EditCommand"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // EditByNameCommand"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        userInput \u003d VALID_NAME_CAM + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        expectedCommand \u003d new EditByNameCommand(VALID_NAME_CAM, descriptor);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // EditCommand"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // EditByNameCommand"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        userInput \u003d VALID_NAME_CAM + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        expectedCommand \u003d new EditByNameCommand(VALID_NAME_CAM, descriptor);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // EditCommand"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // EditByNameCommand"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        userInput \u003d VALID_NAME_CAM + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        expectedCommand \u003d new EditByNameCommand(VALID_NAME_CAM, descriptor);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // EditCommand"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // EditByNameCommand"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        userInput \u003d VALID_NAME_CAM + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        expectedCommand \u003d new EditByNameCommand(VALID_NAME_CAM, descriptor);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // EditCommand"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // EditByNameCommand"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        userInput \u003d VALID_NAME_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        expectedCommand \u003d new EditByNameCommand(VALID_NAME_AMY, descriptor);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // EditCommand"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // EditByNameCommand"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        userInput \u003d VALID_NAME_AMY + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        expectedCommand \u003d new EditByNameCommand(VALID_NAME_AMY, descriptor);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // EditCommand"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // EditByNameCommand"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        userInput \u003d VALID_NAME_AMY + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        expectedCommand \u003d new EditByNameCommand(VALID_NAME_AMY, descriptor);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // EditCommand"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // EditByNameCommand"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        userInput \u003d VALID_NAME_CAM + TAG_EMPTY;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        expectedCommand \u003d new EditByNameCommand(VALID_NAME_CAM, descriptor);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zioul123": 123,
      "-": 169
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ExportCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chantca95"
        },
        "content": "//@@author chantca95"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chantca95"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chantca95"
        },
        "content": "public class ExportCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    private static final String NO_USER_INPUT \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    private static final String NO_DOT_CSV \u003d \"contacts\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    private static final String PROPER_CSV \u003d \"contacts.csv\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    private ExportCommandParser parser \u003d new ExportCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    public void parse_no_input() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        // no export file name given"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        assertParseFailure(parser, NO_USER_INPUT, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    public void parse_no_csv() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        // export file name has no .csv"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        assertParseFailure(parser, NO_DOT_CSV, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    public void parse_proper_format() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        // proper export file name given: contacts.csv"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        String correct \u003d \"contacts.csv\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        ExportCommand expectedCommand \u003d new ExportCommand(correct);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        assertParseSuccess(parser, PROPER_CSV, expectedCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chantca95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chantca95": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ImportCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chantca95"
        },
        "content": "//@@author chantca95"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chantca95"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chantca95"
        },
        "content": "public class ImportCommandParserTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"CsvTest\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    private static final Path CORRECT_CSV \u003d TEST_DATA_FOLDER.resolve(\"AddressbookCorrect.csv\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    private static final Path CONTACT_ONLY_NAME_CSV \u003d TEST_DATA_FOLDER.resolve(\"AddressbookContactOnlyName.csv\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    private static final Path CONTACT_NO_NAME_CSV \u003d TEST_DATA_FOLDER.resolve(\"AddressbookIncompleteContacts.csv\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    private static final Path INVALID_CONTACT_FIELD_CSV \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"AddressbookInvalidContactField.csv\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    private static final Path TEXT_DOC_CSV \u003d TEST_DATA_FOLDER.resolve(\"AddressbookText.txt\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    private static final ArrayList\u003cString\u003e noTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    public void perfectly_formatted_csv() throws FileNotFoundException, ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        ImportCommandParser parser \u003d new ImportCommandParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        File file \u003d CORRECT_CSV.toFile();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        ImportCommand command \u003d parser.parseFile(file);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        //Initialize the expected Import command"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        ArrayList\u003cPerson\u003e expectedPersons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        expectedPersons.add(new Person("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                new Name(\"Alex Chan\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                Optional.of(new Phone(\"97412033\")),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                Optional.of(new Email(\"chantca95@gmail.com\")),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                Optional.of(new Address(\"Bedok North Street 2 Block 120\")),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                Collections.singleton(new Tag(\"Loanshark\")),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                new Meeting(\"2401181230\"))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        );"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        expectedPersons.add(new Person("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                new Name(\"Louiz\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                Optional.of(new Phone(\"98573747\")),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                Optional.of(new Email(\"louizkc@gmail.com\")),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                Optional.of(new Address(\"Cinammon College Level 19\")),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                ParserUtil.parseTags(noTags))"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        );"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        expectedPersons.add(new Person("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                new Name(\"Auyok Sean\"),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                Optional.of(new Phone(\"85737463\")),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                Optional.of(new Email(\"seanA@gmail.com\")),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                Optional.of(new Address(\"IDKWhere he stays Road\")),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                ParserUtil.parseTags(Arrays.asList(\"Transferee\", \"Student\")))"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        );"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        boolean expectedHasContactWithInvalidField \u003d false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        boolean expectedHasContactWithoutName \u003d false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        ImportCommand expectedImportCommand \u003d new ImportCommand(expectedPersons,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                expectedHasContactWithInvalidField, expectedHasContactWithoutName);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        assertEquals(command, expectedImportCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    public void contactsWithOnlyName() throws FileNotFoundException, ParseException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        ImportCommandParser parser \u003d new ImportCommandParser();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        File file \u003d CONTACT_ONLY_NAME_CSV.toFile();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        ImportCommand command \u003d parser.parseFile(file);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        //Initialize the expected Import command"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        ArrayList\u003cPerson\u003e expectedPersons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        expectedPersons.add(new Person("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                new Name(\"Ernie\"),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                Optional.empty(),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                Optional.empty(),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                Optional.empty(),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                ParserUtil.parseTags(noTags))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        );"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        expectedPersons.add(new Person("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                new Name(\"Arjun\"),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                Optional.empty(),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                Optional.empty(),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                Optional.empty(),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                ParserUtil.parseTags(noTags))"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        );"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        boolean expectedHasContactWithInvalidField \u003d false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        boolean expectedHasContactWithoutName \u003d false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        ImportCommand expectedImportCommand \u003d new ImportCommand(expectedPersons,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                expectedHasContactWithInvalidField, expectedHasContactWithoutName);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        assertEquals(command, expectedImportCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    public void contactsWithNoName() throws FileNotFoundException, ParseException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        ImportCommandParser parser \u003d new ImportCommandParser();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        File file \u003d CONTACT_NO_NAME_CSV.toFile();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        ImportCommand command \u003d parser.parseFile(file);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        //Initialize the expected Import command"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        ArrayList\u003cPerson\u003e expectedPersons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        expectedPersons.add(new Person("
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                new Name(\"Winnie\"),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                Optional.of(new Phone(\"91847372\")),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                Optional.of(new Email(\"honeypot@disney.com\")),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                Optional.of(new Address(\"Walt Disney Studios\")),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                ParserUtil.parseTags(Arrays.asList(\"Pooh\", \"Bear\")))"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        );"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        expectedPersons.add(new Person("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                new Name(\"Martin Henz\"),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                Optional.of(new Phone(\"84736316\")),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                Optional.of(new Email(\"henz@comp.nus.edu.sg\")),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                Optional.of(new Address(\"COM 1\")),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                Collections.singleton(new Tag(\"1101S\")))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        );"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        boolean expectedHasContactWithInvalidField \u003d false;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        boolean expectedHasContactWithoutName \u003d true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        ImportCommand expectedImportCommand \u003d new ImportCommand(expectedPersons,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                expectedHasContactWithInvalidField, expectedHasContactWithoutName);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        assertEquals(command, expectedImportCommand);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    public void contactsWithInvalidField() throws FileNotFoundException, ParseException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        ImportCommandParser parser \u003d new ImportCommandParser();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        File file \u003d INVALID_CONTACT_FIELD_CSV.toFile();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        ImportCommand command \u003d parser.parseFile(file);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        //Initialize the expected Import command"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        ArrayList\u003cPerson\u003e expectedPersons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        expectedPersons.add(new Person("
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                new Name(\"Bert\"),"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                Optional.of(new Phone(\"94837243\")),"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                Optional.of(new Email(\"valid@gmail.com\")),"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                Optional.of(new Address(\"Sesame Street\")),"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                ParserUtil.parseTags(Arrays.asList(\"puppet\", \"grouchy\")))"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        );"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        boolean expectedHasContactWithInvalidField \u003d true;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        boolean expectedHasContactWithoutName \u003d false;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        ImportCommand expectedImportCommand \u003d new ImportCommand(expectedPersons,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                expectedHasContactWithInvalidField, expectedHasContactWithoutName);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        assertEquals(command, expectedImportCommand);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    public void textDocCsv() throws FileNotFoundException, ParseException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        ImportCommandParser parser \u003d new ImportCommandParser();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        File file \u003d TEXT_DOC_CSV.toFile();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        ImportCommand command \u003d parser.parseFile(file);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        //Initialize the expected Import command"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        ArrayList\u003cPerson\u003e expectedPersons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        expectedPersons.add(new Person("
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                new Name(\"Chee Cheong Fun\"),"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                Optional.of(new Phone(\"98987423\")),"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                Optional.of(new Email(\"horjiak@gmail.com\")),"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                Optional.of(new Address(\"Bedok 88\")),"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                ParserUtil.parseTags(Arrays.asList(\"hawker\", \"businessman\")))"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        );"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        expectedPersons.add(new Person("
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                new Name(\"Amos Yee\"),"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                Optional.of(new Phone(\"98743423\")),"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                Optional.of(new Email(\"amosyee@gmail.com\")),"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                Optional.of(new Address(\"America\")),"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                ParserUtil.parseTags(Arrays.asList(\"refugee\", \"activist\")))"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        );"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        boolean expectedHasContactWithInvalidField \u003d false;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        boolean expectedHasContactWithoutName \u003d false;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        ImportCommand expectedImportCommand \u003d new ImportCommand(expectedPersons,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                expectedHasContactWithInvalidField, expectedHasContactWithoutName);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        assertEquals(command, expectedImportCommand);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chantca95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chantca95": 200
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/PictureCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PICTURE_PATH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PICTURE_PATH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import seedu.address.logic.commands.PictureCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import seedu.address.model.person.Picture;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "//@@author denzelchung"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "public class PictureCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        String.format(MESSAGE_INVALID_COMMAND_FORMAT, PictureCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    private PictureCommandParser parser \u003d new PictureCommandParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        assertParseFailure(parser, PICTURE_PATH, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        // no file location specified"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        assertParseFailure(parser, INDEX_FIRST_PERSON.getOneBased() + \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        // no name and no file location specified"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        assertParseFailure(parser, \"-5\" + INDEX_FIRST_PERSON, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        assertParseFailure(parser, \"0\" + INDEX_FIRST_PERSON, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        // positive index with a plus sign"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        assertParseFailure(parser, \"+5\" + INDEX_FIRST_PERSON, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    public void runTest_invalidValue_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        // invalid image"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        String userInput \u003d INDEX_FIRST_PERSON.getOneBased() + INVALID_PICTURE_PATH;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        assertParseFailure(parser, userInput, Picture.MESSAGE_PICTURE_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "denzelchung": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/TagCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import seedu.address.logic.commands.TagCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import seedu.address.model.tag.PersonContainsTagPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "//@@author A19Sean"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "public class TagCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    private TagCommandParser parser \u003d new TagCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                TagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    public void parse_validArgs_returnsTagCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        List\u003cString\u003e tags \u003d Arrays.asList(\"owesMoney\", \"friends\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        // Find tags command, no leading and trailing whitespaces"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        TagCommand expectedFindTagCommand \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                new TagCommand(new PersonContainsTagPredicate(tags), TagCommand.Action.FIND, tags);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        assertParseSuccess(parser, \"owesMoney friends\", expectedFindTagCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        // Find tags command, multiple whitespaces between keywords"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        assertParseSuccess(parser, \" \\n owesMoney \\n \\t friends \\t\", expectedFindTagCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        // Delete tags command, no leading and trailing whitespaces"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        List\u003cString\u003e tagsToBeDeleted \u003d Arrays.asList(\"owesMoney\", \"friends\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        assertParseSuccess(parser, \"owesMoney friends delete\", new TagCommand(new"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                PersonContainsTagPredicate(tagsToBeDeleted), TagCommand.Action.DELETE, tagsToBeDeleted));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        // Delete tags command, multiple whitespaces between keywords"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        assertParseSuccess(parser, \"\\t\\nowesMoney   \\t\\n  friends \\t\\t delete\\n\\n\", new TagCommand(new"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                PersonContainsTagPredicate(tagsToBeDeleted), TagCommand.Action.DELETE, tagsToBeDeleted));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        // Edit tags command, no leading and trailing whitespaces"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        assertParseSuccess(parser, \"edit owesMoney unreliable\", new TagCommand("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                new PersonContainsTagPredicate(Collections.singletonList(\"owesMoney\")),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                TagCommand.Action.EDIT,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                Arrays.asList(\"owesMoney\", \"unreliable\")));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        // Edit tags command, multiple whitespaces between keywords"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        assertParseSuccess(parser, \"\\n\\tedit     \\t\\t\\n\\nowesMoney \\n\\n\\tunreliable\\n\\t\", new TagCommand("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                new PersonContainsTagPredicate(Collections.singletonList(\"owesMoney\")),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                TagCommand.Action.EDIT,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                Arrays.asList(\"owesMoney\", \"unreliable\")));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A19Sean": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.hasPerson(null);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.getPersonList().remove(0);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        private final ObservableList\u003cMeeting\u003e meetings \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        public ObservableList\u003cMeeting\u003e getMeetingList() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            return meetings;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 110,
      "AyushChatto": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/model/meeting/MeetingTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "//@@author AyushChatto"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "public class MeetingTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Meeting(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public void constructor_invalidMeeting_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        String invalidMeeting \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Meeting(invalidMeeting));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    void isValidMeeting() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        // null meeting"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Meeting.isValidMeeting(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        // blank meeting"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        assertFalse(Meeting.isValidMeeting(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        assertFalse(Meeting.isValidMeeting(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        // invalid length"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        assertFalse(Meeting.isValidMeeting(\"1234\")); // too short"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        assertFalse(Meeting.isValidMeeting(\"12345678900\")); // too long"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        // invalid Dates"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        assertFalse(Meeting.isValidMeeting(\"1234567890\")); // not a real date"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        assertFalse(Meeting.isValidMeeting(\"3102181230\")); // not a real date"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        assertFalse(Meeting.isValidMeeting(\"2902181230\")); // not a valid date on a non-leap year"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        // invalid Time"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        assertFalse(Meeting.isValidMeeting(\"1202182500\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        assertFalse(Meeting.isValidMeeting(\"1202181480\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        // valid meeting"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        assertTrue(Meeting.isValidMeeting(\"1212121212\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        assertTrue(Meeting.isValidMeeting(\"12/12/121212\")); // / in date"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        assertTrue(Meeting.isValidMeeting(\"121212 1212\")); // space between date and time"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        assertTrue(Meeting.isValidMeeting(\"12121212:12\")); // : in time"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        assertTrue(Meeting.isValidMeeting(\" 1212121212\")); // leading space"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        assertTrue(Meeting.isValidMeeting(\"1212121212 \")); // trailing space"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        assertTrue(Meeting.isValidMeeting(\"12-12-121212\")); // hyphens in date"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        assertTrue(Meeting.isValidMeeting(\"1212121212.\")); // time ends with a period"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        assertTrue(Meeting.isValidMeeting(\"1111111111\")); // minimal"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        assertTrue(Meeting.isValidMeeting(\"29/02/16 1430\")); // leap year"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AyushChatto": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PictureTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "//@@author denzelchung"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "public class PictureTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Picture(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    public void constructor_invalidPicture() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        String invalidPicture \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        assertTrue(new Picture(invalidPicture).picture \u003d\u003d Picture.DEFAULT_PICTURE_URL.getPath());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    public void isValidPicture() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        // null picture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Picture.isValidPicture(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        // invalid pictures"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        assertFalse(Picture.isValidPicture(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        assertFalse(Picture.isValidPicture(\"/images/test.exe\")); // path not ending with jpg/png"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        assertFalse(Picture.isValidPicture(\"C:/Documents/Pictures/test.png\")); // invalid path"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        assertFalse(Picture.isValidPicture(\"/images/test.jpg\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        assertFalse(Picture.isValidPicture(\"/images/test.png\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        // valid picture"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        assertTrue(Picture.isValidPicture(Picture.DEFAULT_PICTURE_URL.getPath()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "denzelchung": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPersonTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().get().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().get().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().get().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zioul123": 3,
      "-": 107
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAddressBookStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAddressBookStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlAddressBookStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new XmlAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.xml\").isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notXmlFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"NotXmlFormatAddressBook.xml\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"invalidPersonAddressBook.xml\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"invalidAndValidPersonAddressBook.xml\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempAddressBook.xml\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save in new file and read back"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save and read without specifying file path"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlAddressBookStorage.saveAddressBook(original); //file path not specified"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d xmlAddressBookStorage.readAddressBook().get(); //file path not specified"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(null, \"SomeFile.xml\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            new XmlAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(new AddressBook(), null);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    public void backupAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        backupAddressBook(null, \"SomeFile.xml\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    public void backupAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        backupAddressBook(new AddressBook(), null);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "     * Backup {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    private void backupAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "            new XmlAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "                .backupAddressBook(addressBook);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "            throw new AssertionError(\"There should not be an error backing up the file.\", ioe);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 127,
      "denzelchung": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        person.getPhone().ifPresent(phone -\u003e descriptor.setPhone(phone));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        person.getEmail().ifPresent(email -\u003e descriptor.setEmail(email));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        person.getAddress().ifPresent(address -\u003e descriptor.setAddress(address));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zioul123": 3,
      "-": 84
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "import seedu.address.model.person.Picture;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public static final String DEFAULT_MEETING \u003d \"0000000000\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    private Optional\u003cPhone\u003e phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    private Optional\u003cEmail\u003e email;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    private Optional\u003cAddress\u003e address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    private Picture picture;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    private Meeting meeting;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        phone \u003d Optional.of(new Phone(DEFAULT_PHONE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        email \u003d Optional.of(new Email(DEFAULT_EMAIL));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        address \u003d Optional.of(new Address(DEFAULT_ADDRESS));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        picture \u003d new Picture(Picture.DEFAULT_PICTURE_URL.getPath());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        meeting \u003d new Meeting(DEFAULT_MEETING);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        picture \u003d personToCopy.getPicture();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        meeting \u003d personToCopy.getMeeting();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        this.address \u003d Optional.of(new Address(address));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    //@@author zioul123"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} we are building to null, for"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     * testing people without an address field."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public PersonBuilder withoutAddress() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        this.address \u003d Optional.empty();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        this.phone \u003d Optional.of(new Phone(phone));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    //@@author zioul123"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} we are building to null, for testing people without a phone field."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public PersonBuilder withoutPhone() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        this.phone \u003d Optional.empty();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        this.email \u003d Optional.of(new Email(email));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    //@@author zioul123"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} we are building to null, for testing people without an email field."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public PersonBuilder withoutEmail() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        this.email \u003d Optional.empty();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    //@@author denzelchung"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "     * Sets the {@code Picture} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    public PersonBuilder withPicture(String picture) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        this.picture \u003d new Picture(picture);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "denzelchung"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    //@@author AyushChatto"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     * Sets the {@code Meeting} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public PersonBuilder withMeeting(String meeting) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        this.meeting \u003d new Meeting(meeting);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "     * Build the person with the given fields."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        Person person \u003d new Person(name, phone, email, address, tags, meeting);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        person.setPicture(picture);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "        return person;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zioul123": 38,
      "-": 84,
      "AyushChatto": 16,
      "denzelchung": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        person.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE + phone.value + \" \"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        person.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL + email.value + \" \"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        person.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS + address.value + \" \"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zioul123": 3,
      "-": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "            .withTags(\"friends\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "            .withPicture(\"/images/placeholder_image.jpg\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "            .withPicture(\"/images/placeholder_image.jpg\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "            .withPicture(\"/images/placeholder_image.jpg\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "            .withPicture(\"/images/placeholder_image.jpg\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "            .withPicture(\"/images/placeholder_image.jpg\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            .withTags(\"owesMoney\", \"DBS\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "            .withPicture(\"/images/placeholder_image.jpg\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "            .withPicture(\"/images/placeholder_image.jpg\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    // Without certain fields (still typical)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    // Without phone"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public static final Person HENRY \u003d new PersonBuilder().withName(\"Henry Golding\").withoutPhone()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "            .withEmail(\"henry@example.com\").withAddress(\"Crazy Rich Street\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "            .withPicture(\"/images/placeholder_image.jpg\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    // Without email"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public static final Person IANNA \u003d new PersonBuilder().withName(\"Ianna Cluse\").withPhone(\"83848586\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "            .withoutEmail().withAddress(\"24 Recluse Avenue\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "            .withPicture(\"/images/placeholder_image.jpg\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    // Without address"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public static final Person JENNY \u003d new PersonBuilder().withName(\"Jenny Khiu\").withPhone(\"91234523\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "            .withEmail(\"jenny@example.com\").withoutAddress()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "            .withPicture(\"/images/placeholder_image.jpg\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    //@@author A19Sean"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    // Contacts with tags to be removed"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    public static final Person CARL_TAGGED \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            .withTags(\"Singaporean\", \"OCBC\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            .withPicture(\"/images/placeholder_image.jpg\").build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    public static final Person ELLE_TAGGED \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            .withTags(\"Singaporean\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            .withPicture(\"/images/placeholder_image.jpg\").build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    public static final Person GEORGE_TAGGED \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            .withTags(\"OCBC\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            .withPicture(\"/images/placeholder_image.jpg\").build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    public static final Person HENRY_TAGGED \u003d new PersonBuilder().withName(\"Henry Golding\").withoutPhone()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            .withEmail(\"henry@example.com\").withAddress(\"Crazy Rich Street\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            .withTags(\"Singaporean\", \"POSB\")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            .withPicture(\"/images/placeholder_image.jpg\").build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    // Untagged persons"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    public static final Person CARL_UNTAGGED \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            .withPicture(\"/images/placeholder_image.jpg\").build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    public static final Person ELLE_UNTAGGED \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\")"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            .withPicture(\"/images/placeholder_image.jpg\").build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    public static final Person GEORGE_UNTAGGED \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            .withPicture(\"/images/placeholder_image.jpg\").build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    public static final Person HENRY_SINGAPOREAN \u003d new PersonBuilder().withName(\"Henry Golding\").withoutPhone()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            .withEmail(\"henry@example.com\").withAddress(\"Crazy Rich Street\")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            .withTags(\"Singaporean\")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            .withPicture(\"/images/placeholder_image.jpg\").build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    public static final Person HENRY_POSB \u003d new PersonBuilder().withName(\"Henry Golding\").withoutPhone()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            .withEmail(\"henry@example.com\").withAddress(\"Crazy Rich Street\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            .withTags(\"POSB\")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            .withPicture(\"/images/placeholder_image.jpg\").build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    // Persons with edited tags"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    public static final Person CARL_EDITED \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            .withTags(\"buddies\", \"OCBC\")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            .withPicture(\"/images/placeholder_image.jpg\").build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    public static final Person ELLE_EDITED \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\")"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            .withTags(\"buddies\")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            .withPicture(\"/images/placeholder_image.jpg\").build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    public static final Person HENRY_BANKER \u003d new PersonBuilder().withName(\"Henry Golding\").withoutPhone()"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            .withEmail(\"henry@example.com\").withAddress(\"Crazy Rich Street\")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            .withTags(\"Singaporean\", \"banker\")"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            .withPicture(\"/images/placeholder_image.jpg\").build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    public static final Person HENRY_BUDDY \u003d new PersonBuilder().withName(\"Henry Golding\").withoutPhone()"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            .withEmail(\"henry@example.com\").withAddress(\"Crazy Rich Street\")"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            .withTags(\"buddies\", \"POSB\")"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            .withPicture(\"/images/placeholder_image.jpg\").build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    // People with meetings"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public static final Person STEVE_MEETING \u003d new PersonBuilder().withName(\"Steve Carell\").withPhone(\"83365620\")"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            .withEmail(\"steve@example.com\").withAddress(\"9th Avenue\")"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            .withPicture(\"/images/place_holder_image.jpg\").withMeeting(\"1202181600\").build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public static final Person TYLER_MEETING \u003d new PersonBuilder().withName(\"Tyler Durden\").withPhone(\"83365621\")"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            .withEmail(\"tyler@example.com\").withAddress(\"10th Avenue\")"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            .withPicture(\"/images/place_holder_image.jpg\").withMeeting(\"1203181600\").build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE, HENRY, IANNA, JENNY));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    //@@author A19Sean"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    public static AddressBook getTaggedAddressBook() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        List\u003cPerson\u003e scheduledPeople \u003d new ArrayList\u003c\u003e(Arrays.asList(CARL_TAGGED, ELLE_TAGGED, GEORGE_TAGGED,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "                HENRY_TAGGED));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        for (Person person : scheduledPeople) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "    public static AddressBook getScheduledAddressBook() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        List\u003cPerson\u003e scheduledPeople \u003d new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, STEVE_MEETING, TYLER_MEETING));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        for (Person person : scheduledPeople) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zioul123": 7,
      "A19Sean": 71,
      "-": 69,
      "denzelchung": 20,
      "AyushChatto": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/BrowserPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonPanelSelectionChangedEvent selectionChangedEventStub;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanelHandle browserPanelHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        selectionChangedEventStub \u003d new PersonPanelSelectionChangedEvent(ALICE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(browserPanel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // default web page"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // associated web page of a person is not yet implemented, display the default webpage"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(selectionChangedEventStub);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        URL expectedPersonUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(browserPanelHandle);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPersonUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zioul123": 2,
      "-": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CommandBoxTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandBoxHandle commandBoxHandle;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(commandBox);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithFailedCommand() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify that style is changed correctly even after multiple consecutive failed commands"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_handleKeyPress() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.A);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithUp() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands (latest command is failure)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, thirdCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithDown() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text remains \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "     *      - an event is posted and its {@code isValid} value is false"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        assertFalse(((NewResultAvailableEvent) eventsCollectorRule.eventsCollector.getMostRecent()).isValid);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        eventsCollectorRule.eventsCollector.reset();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "     *      - an event is posted and its {@code isValid} value is true."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        assertTrue(((NewResultAvailableEvent) eventsCollectorRule.eventsCollector.getMostRecent()).isValid);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        eventsCollectorRule.eventsCollector.reset();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(keycode);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommand, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A19Sean": 16,
      "-": 157
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/PersonCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personWithNoTags \u003d new PersonBuilder().withTags(new String[0]).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard personCard \u003d new PersonCard(personWithNoTags, 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personCard);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardDisplay(personCard, personWithNoTags, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personWithTags \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        personCard \u003d new PersonCard(personWithTags, 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personCard);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardDisplay(personCard, personWithTags, 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        //@@author zioul123"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // without phone"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        Person personWithoutPhone \u003d new PersonBuilder().withoutPhone().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        personCard \u003d new PersonCard(personWithoutPhone, 3);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        uiPartRule.setUiPart(personCard);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCardDisplay(personCard, personWithoutPhone, 3);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // without email"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        Person personWithoutEmail \u003d new PersonBuilder().withoutEmail().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        personCard \u003d new PersonCard(personWithoutEmail, 4);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        uiPartRule.setUiPart(personCard);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCardDisplay(personCard, personWithoutEmail, 4);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // without address"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        Person personWithoutAddress \u003d new PersonBuilder().withoutAddress().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        personCard \u003d new PersonCard(personWithoutAddress, 5);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        uiPartRule.setUiPart(personCard);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCardDisplay(personCard, personWithoutAddress, 5);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard personCard \u003d new PersonCard(person, 0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // same person, same index -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard copy \u003d new PersonCard(person, 0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(personCard.equals(copy));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(personCard.equals(personCard));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(personCard.equals(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(personCard.equals(0));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person, same index -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Person differentPerson \u003d new PersonBuilder().withName(\"differentName\").build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(personCard.equals(new PersonCard(differentPerson, 0)));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // same person, different index -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(personCard.equals(new PersonCard(person, 1)));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code personCard} displays the details of {@code expectedPerson} correctly and matches"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCardDisplay(PersonCard personCard, Person expectedPerson, int expectedId) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle personCardHandle \u003d new PersonCardHandle(personCard.getRoot());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", personCardHandle.getId());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify person details are displayed correctly"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardDisplaysPerson(expectedPerson, personCardHandle);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zioul123": 20,
      "-": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/PersonListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final ObservableList\u003cPerson\u003e TYPICAL_PERSONS \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.observableList(getTypicalPersons());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanelHandle personListPanelHandle;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_PERSONS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_PERSONS.size(); i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanelHandle.navigateToCard(TYPICAL_PERSONS.get(i));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            Person expectedPerson \u003d TYPICAL_PERSONS.get(i);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            PersonCardHandle actualCard \u003d personListPanelHandle.getPersonCardHandle(i);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(expectedPerson, actualCard);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleJumpToListRequestEvent() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_PERSONS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(JUMP_TO_SECOND_EVENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle expectedPerson \u003d personListPanelHandle.getPersonCardHandle(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle selectedPerson \u003d personListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardEquals(expectedPerson, selectedPerson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifies that creating and deleting large number of persons in {@code PersonListPanel} requires lesser than"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void performanceTest() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cPerson\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }, \"Creation and deletion of person cards exceeded time limit\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a list of persons containing {@code personCount} persons that is used to populate the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code PersonListPanel}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private ObservableList\u003cPerson\u003e createBackingList(int personCount) throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Path xmlFile \u003d createXmlFileWithPersons(personCount);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook xmlAddressBook \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlUtil.getDataFromFile(xmlFile, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.observableArrayList(xmlAddressBook.toModelType().getPersonList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a .xml file containing {@code personCount} persons. This file will be deleted when the JVM terminates."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path createXmlFileWithPersons(int personCount) throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003c?xml version\u003d\\\"1.0\\\" encoding\u003d\\\"UTF-8\\\" standalone\u003d\\\"yes\\\"?\u003e\\n\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003caddressbook\u003e\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c personCount; i++) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cpersons\u003e\\n\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cname\u003e\").append(i).append(\"a\u003c/name\u003e\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cphone\u003e000\u003c/phone\u003e\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cemail\u003ea@aa\u003c/email\u003e\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003caddress\u003ea\u003c/address\u003e\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AyushChatto"
        },
        "content": "            builder.append(\"\u003cmeeting\u003e1212121212\u003c/meeting\u003e\\n\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "denzelchung"
        },
        "content": "            builder.append(\"\u003cpicture\u003e/images/placeholder_image.jpg\u003c/picture\u003e\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003c/persons\u003e\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003c/addressbook\u003e\\n\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path manyPersonsFile \u003d Paths.get(TEST_DATA_FOLDER + \"manyPersons.xml\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(manyPersonsFile);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(manyPersonsFile, builder.toString());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        manyPersonsFile.toFile().deleteOnExit();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return manyPersonsFile;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes {@code personListPanelHandle} with a {@code PersonListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code PersonListPanel}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initUi(ObservableList\u003cPerson\u003e backingList) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonListPanel personListPanel \u003d new PersonListPanel(backingList);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personListPanel);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelHandle \u003d new PersonListPanelHandle(getChildNode(personListPanel.getRoot(),"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                PersonListPanelHandle.PERSON_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 124,
      "AyushChatto": 1,
      "denzelchung": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/ResultDisplayTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplayTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    private static final NewResultAvailableEvent NEW_RESULT_VALID_EVENT_STUB \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            new NewResultAvailableEvent(\"Stub\", true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    private static final NewResultAvailableEvent NEW_RESULT_INVALID_EVENT_STUB \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            new NewResultAvailableEvent(\"Stub\", false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplayHandle resultDisplayHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfResultDisplay;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfResultDisplay;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(resultDisplay);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayHandle \u003d new ResultDisplayHandle(getChildNode(resultDisplay.getRoot(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        defaultStyleOfResultDisplay \u003d new ArrayList\u003c\u003e(resultDisplayHandle.getStyleClass());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A19Sean"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        errorStyleOfResultDisplay \u003d new ArrayList\u003c\u003e(defaultStyleOfResultDisplay);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        errorStyleOfResultDisplay.add(ResultDisplay.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // default result text"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        assertEquals(defaultStyleOfResultDisplay, resultDisplayHandle.getStyleClass());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        // valid event received"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        assertResultDisplayStyle(NEW_RESULT_VALID_EVENT_STUB);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        assertResultDisplayStyle(NEW_RESULT_INVALID_EVENT_STUB);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "     * Verifies that a valid event has the default result display style"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "     * and an invalid event has the error style."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "     * @param event is either a valid or invalid event that is posted to the event bus."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "    private void assertResultDisplayStyle(NewResultAvailableEvent event) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        postNow(event);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        assertEquals(event.message, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        if (event.isValid) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            assertEquals(defaultStyleOfResultDisplay, resultDisplayHandle.getStyleClass());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            assertEquals(errorStyleOfResultDisplay, resultDisplayHandle.getStyleClass());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A19Sean": 32,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.TOTAL_NUMBER_STATUS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STUB_SAVE_LOCATION \u003d Paths.get(\"Stub\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path RELATIVE_PATH \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author zioul123-reused"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    //Reused from https://github.com/se-edu/addressbook-level4/pull/803/"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    private static final AddressBookChangedEvent EVENT_STUB \u003d new AddressBookChangedEvent(("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zioul123"
        },
        "content": "            new AddressBookBuilder()).withPerson(TypicalPersons.ALICE).build());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    private static final int INITIAL_NUMBER_OF_PERSONS \u003d 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // inject fixed clock"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore original clock"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION, 0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // initial state"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(), SYNC_STATUS_INITIAL,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                String.format(TOTAL_NUMBER_STATUS, INITIAL_NUMBER_OF_PERSONS));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // after address book is updated"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(EVENT_STUB);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                String.format(TOTAL_NUMBER_STATUS, EVENT_STUB.data.getPersonList().size()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, the"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}, and the total number of"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     * people status matches that of {@code expectedTotalNumberStatus}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                                        String expectedTotalNumberStatus) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertEquals(expectedTotalNumberStatus, statusBarFooterHandle.getTotalNumberStatus());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zioul123": 19,
      "-": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chantca95"
        },
        "content": "import seedu.address.ui.PersonCard;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    private static final String LABEL_DEFAULT_STYLE \u003d \"label\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        expectedCard.getTags().forEach(tag -\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                assertEquals(expectedCard.getTagStyleClasses(tag), actualCard.getTagStyleClasses(tag)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertPhoneFieldAccurate(expectedPerson.getPhone(), actualCard.getPhone());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertEmailFieldAccurate(expectedPerson.getEmail(), actualCard.getEmail());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertAddressFieldAccurate(expectedPerson.getAddress(), actualCard.getAddress());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        assertTagsEqual(expectedPerson, actualCard);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    //@@author zioul123"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     * Asserts that {@code actualAddressField} displays the correct address of {@code address} if it exists,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     * and the correct message otherwise."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     * @param address The Optional address that belongs to the person."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     * @param actualAddressField The string displayed in the Card\u0027s address field."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    private static void assertAddressFieldAccurate(Optional\u003cAddress\u003e address, String actualAddressField) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        address.ifPresentOrElse(a -\u003e assertEquals(a.value, actualAddressField), () -\u003e {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zioul123"
        },
        "content": "            assertEquals(actualAddressField, PersonCard.NO_ADDRESS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        });"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     * Asserts that {@code actualPhoneField} displays the correct phone number of {@code phone} if it exists,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     * and the correct message otherwise."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     * @param phone The Optional phone that belongs to the person."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     * @param actualPhoneField The string displayed in the Card\u0027s phone field."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    private static void assertPhoneFieldAccurate(Optional\u003cPhone\u003e phone, String actualPhoneField) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        phone.ifPresentOrElse(p -\u003e assertEquals(p.value, actualPhoneField), () -\u003e {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zioul123"
        },
        "content": "            assertEquals(actualPhoneField, PersonCard.NO_PHONE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        });"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     * Asserts that {@code actualEmailField} displays the correct email address of {@code email} if it exists,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     * and the correct message otherwise."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     * @param email The Optional email that belongs to the person."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     * @param actualEmailField The string displayed in the Card\u0027s email field."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    private static void assertEmailFieldAccurate(Optional\u003cEmail\u003e email, String actualEmailField) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        email.ifPresentOrElse(e -\u003e assertEquals(e.value, actualEmailField), () -\u003e {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zioul123"
        },
        "content": "            assertEquals(actualEmailField, PersonCard.NO_EMAIL);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        });"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.length; i++) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chantca95"
        },
        "content": "     * Returns the color style for {@code tagName}\u0027s label. The tag\u0027s color is determined by looking up the color"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chantca95"
        },
        "content": "     * in {@code PersonCard#TAG_COLOR_STYLES}, using an index generated by the hash code of the tag\u0027s content."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chantca95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chantca95"
        },
        "content": "     * @see PersonCard#getTagColorStyleFor(String)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chantca95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    private static String getTagColorStyleFor(String tagName) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        switch (tagName) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        case \"classmates\":"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        case \"owesMoney\":"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        case \"Important\":"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        case \"Rich\":"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            return \"teal\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        case \"colleagues\":"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        case \"neighbours\":"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            return \"yellow\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        case \"family\":"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        case \"friend\":"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            return \"orange\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        case \"friends\":"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            return \"brown\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        case \"husband\":"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        case \"OCBC\":"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            return \"grey\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        case \"Korean\":"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        case \"POSB\":"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            return \"black\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        case \"Japanese\":"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            return \"blue\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        case \"Chinese\":"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        case \"Client\":"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        case \"Singaporean\":"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        case \"DBS\":"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            return \"pink\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "        case \"Colleague\":"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "A19Sean"
        },
        "content": "            return \"red\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chantca95"
        },
        "content": "            throw new AssertionError(tagName + \" does not have a color assigned.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chantca95"
        },
        "content": "     * Asserts that the tags in {@code actualCard} matches all the tags in {@code expectedPerson} with the correct"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chantca95"
        },
        "content": "     * color."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chantca95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    private static void assertTagsEqual(Person expectedPerson, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        List\u003cString\u003e expectedTags \u003d expectedPerson.getTags().stream()"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                .map(tag -\u003e tag.tagName).collect(Collectors.toList());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        assertEquals(expectedTags, actualCard.getTags());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chantca95"
        },
        "content": "        expectedTags.forEach(tag -\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                assertEquals(Arrays.asList(LABEL_DEFAULT_STYLE, getTagColorStyleFor(tag)),"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chantca95"
        },
        "content": "                        actualCard.getTagStyleClasses(tag)));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chantca95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chantca95"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        int numberOfPeople \u003d personListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zioul123": 45,
      "A19Sean": 15,
      "-": 69,
      "chantca95": 45
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_CAM;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_DEN;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_CAM;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_DEN;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Person toAdd \u003d AMY;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except phone and email"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        //@@author zioul123"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        /* Case: add a person with missing phone field -\u003e added */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withEmail(VALID_EMAIL_CAM).withoutPhone().build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        /* Case: add another person with the same name and missing phone field, but different email -\u003e added */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withEmail(VALID_EMAIL_DEN).withoutPhone().build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        /* Case: add a person with missing email field -\u003e added */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withoutEmail().withPhone(VALID_PHONE_CAM).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        /* Case: add another person with the same name and missing email field, but different phone -\u003e added */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withoutEmail().withPhone(VALID_PHONE_DEN).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        /* Case: add a person with missing address field -\u003e added */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        toAdd \u003d new PersonBuilder(BOB).withoutAddress().withPhone(VALID_PHONE_CAM).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person, missing tags -\u003e added */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before adding -\u003e added */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(CARL);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person -\u003e rejected */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different email -\u003e rejected */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different address -\u003e rejected */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Person toAdd) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Person)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Person toAdd) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(toAdd);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertStatusBarChangedExceptLocation();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zioul123": 32,
      "-": 235
    }
  },
  {
    "path": "src/test/java/systemtests/AddressBookSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.TOTAL_NUMBER_STATUS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class AddressBookSystemTest {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getPersonListPanel();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons in the address book."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showAllPersons() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showPersonsWithName(String keyword) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the person at {@code index} of the displayed list."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void selectPerson(Index index) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes all persons in the address book."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void deleteAllPersons() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same person objects as {@code expectedModel}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the person list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(expectedModel.getAddressBook()), testApp.readStorageAddressBook());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        statusBarFooterHandle.rememberTotalNumberStatus();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().rememberSelectedPersonCard();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * of the previously selected person."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     * Asserts that the browser\u0027s url displays the default page, and only the card at {@code expectedSelectedCardIndex}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     * is selected."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().navigateToCard(getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedUrl;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        expectedUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + BrowserPanel.DEFAULT_PAGE);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertFalse(handle.isTotalNumberStatusChanged());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    protected void assertStatusBarChangedExceptLocation() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertEquals(handle.getTotalNumberStatus(),"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                String.format(TOTAL_NUMBER_STATUS, testApp.getModel().getAddressBook().getPersonList().size()));"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zioul123": 10,
      "-": 283
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo clearing address book -\u003e original address book restored */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo clearing address book -\u003e cleared */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in person list and clears address book -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before clearing -\u003e entire address book cleared */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear empty address book -\u003e cleared */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertStatusBarChangedExceptLocation();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zioul123": 1,
      "-": 100
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSON_NOT_FOUND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getPerson;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the first person in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_PERSON.getOneBased() + \"       \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Person deletedPerson \u003d removePerson(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the last person in the list -\u003e deleted */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo deleting the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo deleting the last person in the list -\u003e last person deleted again */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        removePerson(modelBeforeDeletingLast, lastPersonIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the middle person in the list -\u003e deleted */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middlePersonIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(middlePersonIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, delete index within bounds of address book and person list -\u003e deleted */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, delete index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------- Performing delete operation while a person card is selected ------------------------ */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the selected person -\u003e person list panel selects the person before the deleted person */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(selectedIndex);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        deletedPerson \u003d removePerson(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                getModel().getAddressBook().getPersonList().size() + 1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        /* Case: invalid arguments (extra argument) will cause the DeleteCommand to be parsed as a DeleteByNameCommand,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zioul123"
        },
        "content": "           and match it to no Person -\u003e rejected */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_PERSON_NOT_FOUND);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the {@code Person} at the specified {@code index} in {@code model}\u0027s address book."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the removed person"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private Person removePerson(Model model, Index index) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Person targetPerson \u003d getPerson(model, index);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(targetPerson);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return targetPerson;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the person at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Person deletedPerson \u003d removePerson(expectedModel, toDelete);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertStatusBarChangedExceptLocation();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zioul123": 5,
      "-": 187
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_CAM;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_CAM;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import static seedu.address.logic.commands.EditByNameCommandTest.UNUSED_NAME;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zioul123"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    private static final String INVALID_NAME \u003d \"_ab$\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo editing the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo editing the last person in the list -\u003e last person edited again */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updatePerson("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different name -\u003e edited */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(getModel().getFilteredPersonList().get(index.getZeroBased()), BOB);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(BOB).withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different phone and email"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(index);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // browser\u0027s url is updated to reflect the new person\u0027s name"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, AMY, index);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(PersonUtil.getAddCommand(BOB));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different address -\u003e rejected */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different email -\u003e rejected */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    public void editByName() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zioul123"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zioul123"
        },
        "content": "         */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        String firstPerson \u003d ALICE.getName().toString();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + firstPerson + \"  \" + NAME_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        /* Case: undo editing the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        /* Case: redo editing the last person in the list -\u003e last person edited again */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        model.updatePerson("
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        /* Case: edit a person with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        firstPerson \u003d VALID_NAME_BOB; // first person\u0027s name is currently Bob"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + firstPerson + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different name -\u003e edited */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        String secondPerson \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertNotEquals(getModel().getFilteredPersonList().get(index.getZeroBased()), BOB);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + secondPerson + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        editedPerson \u003d new PersonBuilder(BOB).withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different phone and email"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "zioul123"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zioul123"
        },
        "content": "         */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        secondPerson \u003d VALID_NAME_AMY; // Second person\u0027s name is currently Amy, with every other field matching Bob\u0027s."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + secondPerson + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        editedPerson \u003d new PersonBuilder(BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        /* Undo so that names are unique */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        firstPerson \u003d VALID_NAME_BOB;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + firstPerson + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        firstPerson \u003d DANIEL.getName().toString();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + firstPerson + \" \" + NAME_DESC_CAM;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_CAM).build();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        /* Case: filtered person list, edit a person in the address book but not in the filtered list"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "zioul123"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "zioul123"
        },
        "content": "         */"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        index \u003d INDEX_THIRD_PERSON; // Of the unfiltered list"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        String personNotInList \u003d CARL.getName().toString();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + personNotInList + \" \" + PREFIX_ADDRESS + CARL.getAddress().get();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        personToEdit \u003d getModel().getAddressBook().getPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).build();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandSuccess(command, personToEdit, editedPerson);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "zioul123"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "zioul123"
        },
        "content": "         */"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        firstPerson \u003d VALID_NAME_BOB;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        selectPerson(index);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + firstPerson + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        // browser\u0027s url is updated to reflect the new person\u0027s name"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandSuccess(command, index, AMY, index);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        /* Undo so that there is only one Amy */"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        /* Case: unused name identifier -\u003e rejected */"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + UNUSED_NAME + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                Messages.MESSAGE_PERSON_NOT_FOUND);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        /* Case: invalid name identifier -\u003e rejected */"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INVALID_NAME + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                Messages.MESSAGE_PERSON_NOT_FOUND);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        /* Case: missing identifier -\u003e rejected */"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + CARL.getName(),"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + CARL.getName() + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + CARL.getName() + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + CARL.getName() + INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + CARL.getName() + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + CARL.getName() + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        executeCommand(EditCommand.COMMAND_WORD + \" \" + VALID_NAME_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        secondPerson \u003d VALID_NAME_AMY;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + secondPerson + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + secondPerson + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different address -\u003e rejected */"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + secondPerson + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + secondPerson + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different email -\u003e rejected */"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + secondPerson + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the person {@code toEdit} being"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     * updated to values specified {@code editedPerson}.\u003cbr\u003e"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     * @param toEdit the person to be edited"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "zioul123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    private void assertCommandSuccess(String command, Person toEdit, Person editedPerson) {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        expectedModel.updatePerson(toEdit, editedPerson);"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "zioul123"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), null);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "zioul123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "zioul123"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedPerson, null);"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "     * updated to values specified {@code editedPerson}.\u003cbr\u003e"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assertStatusBarChangedExceptLocation();"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zioul123": 207,
      "-": 298
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: repeat previous find command where person list is displaying the persons we are finding"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getModel().getAddressBook().getPersonList().contains(BENSON));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, keyword is substring of name -\u003e 0 persons found */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person not in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find phone number of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assert (DANIEL.getPhone().isPresent()); // DANIEL can have no phone number, so this must be handled"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().get().value;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find address of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assert (DANIEL.getAddress().isPresent()); // DANIEL can have no address, so this must be handled"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getAddress().get().value;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find email of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        assert (DANIEL.getEmail().isPresent()); // DANIEL can have no email address, so this must be handled"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zioul123"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().get().value;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find tags of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find while a person is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in empty address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"FiNd Meier\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zioul123": 6,
      "-": 192
    }
  }
]
